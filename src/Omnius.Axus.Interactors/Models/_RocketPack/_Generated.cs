// <auto-generated/>
#nullable enable

namespace Omnius.Axus.Interactors.Models;

public sealed partial class ProfilePublisherConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig>.Empty;

    static ProfilePublisherConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig>.Empty = new global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig(global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty, global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxTrustedSignaturesCount = 1024;
    public static readonly int MaxBlockedSignaturesCount = 1024;

    public ProfilePublisherConfig(global::Omnius.Core.Cryptography.OmniDigitalSignature digitalSignature, global::Omnius.Core.Cryptography.OmniSignature[] trustedSignatures, global::Omnius.Core.Cryptography.OmniSignature[] blockedSignatures)
    {
        if (digitalSignature is null) throw new global::System.ArgumentNullException("digitalSignature");
        if (trustedSignatures is null) throw new global::System.ArgumentNullException("trustedSignatures");
        if (trustedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("trustedSignatures");
        foreach (var n in trustedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (blockedSignatures is null) throw new global::System.ArgumentNullException("blockedSignatures");
        if (blockedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("blockedSignatures");
        foreach (var n in blockedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.DigitalSignature = digitalSignature;
        this.TrustedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(trustedSignatures);
        this.BlockedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(blockedSignatures);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (digitalSignature != default) ___h.Add(digitalSignature.GetHashCode());
            foreach (var n in trustedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in blockedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniDigitalSignature DigitalSignature { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> TrustedSignatures { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> BlockedSignatures { get; }

    public static global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig? left, global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig? left, global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.DigitalSignature != target.DigitalSignature) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.TrustedSignatures, target.TrustedSignatures)) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.BlockedSignatures, target.BlockedSignatures)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.DigitalSignature != global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniDigitalSignature.Formatter.Serialize(ref w, value.DigitalSignature, rank + 1);
            }
            if (value.TrustedSignatures.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.TrustedSignatures.Count);
                foreach (var n in value.TrustedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.BlockedSignatures.Count != 0)
            {
                w.Write((uint)3);
                w.Write((uint)value.BlockedSignatures.Count);
                foreach (var n in value.BlockedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniDigitalSignature p_digitalSignature = global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty;
            global::Omnius.Core.Cryptography.OmniSignature[] p_trustedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
            global::Omnius.Core.Cryptography.OmniSignature[] p_blockedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_digitalSignature = global::Omnius.Core.Cryptography.OmniDigitalSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_trustedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_trustedSignatures.Length; i++)
                            {
                                p_trustedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 3:
                        {
                            var length = r.GetUInt32();
                            p_blockedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_blockedSignatures.Length; i++)
                            {
                                p_blockedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.ProfilePublisherConfig(p_digitalSignature, p_trustedSignatures, p_blockedSignatures);
        }
    }
}
public sealed partial class ProfileSubscriberConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig>.Empty;

    static ProfileSubscriberConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig>.Empty = new global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig(global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), 0, 0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxTrustedSignaturesCount = 1024;
    public static readonly int MaxBlockedSignaturesCount = 1024;

    public ProfileSubscriberConfig(global::Omnius.Core.Cryptography.OmniSignature[] trustedSignatures, global::Omnius.Core.Cryptography.OmniSignature[] blockedSignatures, uint searchDepth, uint maxProfileCount)
    {
        if (trustedSignatures is null) throw new global::System.ArgumentNullException("trustedSignatures");
        if (trustedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("trustedSignatures");
        foreach (var n in trustedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (blockedSignatures is null) throw new global::System.ArgumentNullException("blockedSignatures");
        if (blockedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("blockedSignatures");
        foreach (var n in blockedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        this.TrustedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(trustedSignatures);
        this.BlockedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(blockedSignatures);
        this.SearchDepth = searchDepth;
        this.MaxProfileCount = maxProfileCount;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in trustedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in blockedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            if (searchDepth != default) ___h.Add(searchDepth.GetHashCode());
            if (maxProfileCount != default) ___h.Add(maxProfileCount.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> TrustedSignatures { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> BlockedSignatures { get; }
    public uint SearchDepth { get; }
    public uint MaxProfileCount { get; }

    public static global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig? left, global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig? left, global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.TrustedSignatures, target.TrustedSignatures)) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.BlockedSignatures, target.BlockedSignatures)) return false;
        if (this.SearchDepth != target.SearchDepth) return false;
        if (this.MaxProfileCount != target.MaxProfileCount) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.TrustedSignatures.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.TrustedSignatures.Count);
                foreach (var n in value.TrustedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.BlockedSignatures.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.BlockedSignatures.Count);
                foreach (var n in value.BlockedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.SearchDepth != 0)
            {
                w.Write((uint)3);
                w.Write(value.SearchDepth);
            }
            if (value.MaxProfileCount != 0)
            {
                w.Write((uint)4);
                w.Write(value.MaxProfileCount);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature[] p_trustedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
            global::Omnius.Core.Cryptography.OmniSignature[] p_blockedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
            uint p_searchDepth = 0;
            uint p_maxProfileCount = 0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_trustedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_trustedSignatures.Length; i++)
                            {
                                p_trustedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_blockedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_blockedSignatures.Length; i++)
                            {
                                p_blockedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 3:
                        {
                            p_searchDepth = r.GetUInt32();
                            break;
                        }
                    case 4:
                        {
                            p_maxProfileCount = r.GetUInt32();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.ProfileSubscriberConfig(p_trustedSignatures, p_blockedSignatures, p_searchDepth, p_maxProfileCount);
        }
    }
}
public sealed partial class BarkPublisherConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkPublisherConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.BarkPublisherConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkPublisherConfig>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.BarkPublisherConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkPublisherConfig>.Empty;

    static BarkPublisherConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkPublisherConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkPublisherConfig>.Empty = new global::Omnius.Axus.Interactors.Models.BarkPublisherConfig(global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty, global::System.Array.Empty<global::Omnius.Axus.Interactors.Models.BarkMessage>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxMessagesCount = 8192;

    public BarkPublisherConfig(global::Omnius.Core.Cryptography.OmniDigitalSignature digitalSignature, global::Omnius.Axus.Interactors.Models.BarkMessage[] messages)
    {
        if (digitalSignature is null) throw new global::System.ArgumentNullException("digitalSignature");
        if (messages is null) throw new global::System.ArgumentNullException("messages");
        if (messages.Length > 8192) throw new global::System.ArgumentOutOfRangeException("messages");
        foreach (var n in messages)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.DigitalSignature = digitalSignature;
        this.Messages = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Interactors.Models.BarkMessage>(messages);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (digitalSignature != default) ___h.Add(digitalSignature.GetHashCode());
            foreach (var n in messages)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniDigitalSignature DigitalSignature { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Interactors.Models.BarkMessage> Messages { get; }

    public static global::Omnius.Axus.Interactors.Models.BarkPublisherConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.BarkPublisherConfig? left, global::Omnius.Axus.Interactors.Models.BarkPublisherConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.BarkPublisherConfig? left, global::Omnius.Axus.Interactors.Models.BarkPublisherConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.BarkPublisherConfig) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.BarkPublisherConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.BarkPublisherConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.DigitalSignature != target.DigitalSignature) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Messages, target.Messages)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.BarkPublisherConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axus.Interactors.Models.BarkPublisherConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.DigitalSignature != global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniDigitalSignature.Formatter.Serialize(ref w, value.DigitalSignature, rank + 1);
            }
            if (value.Messages.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.Messages.Count);
                foreach (var n in value.Messages)
                {
                    global::Omnius.Axus.Interactors.Models.BarkMessage.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.BarkPublisherConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniDigitalSignature p_digitalSignature = global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty;
            global::Omnius.Axus.Interactors.Models.BarkMessage[] p_messages = global::System.Array.Empty<global::Omnius.Axus.Interactors.Models.BarkMessage>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_digitalSignature = global::Omnius.Core.Cryptography.OmniDigitalSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_messages = new global::Omnius.Axus.Interactors.Models.BarkMessage[length];
                            for (int i = 0; i < p_messages.Length; i++)
                            {
                                p_messages[i] = global::Omnius.Axus.Interactors.Models.BarkMessage.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.BarkPublisherConfig(p_digitalSignature, p_messages);
        }
    }
}
public sealed partial class BarkSubscriberConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig>.Empty;

    static BarkSubscriberConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig>.Empty = new global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig(global::System.Array.Empty<global::Omnius.Core.RocketPack.Utf8String>(), 0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxTagsCount = 256;

    public BarkSubscriberConfig(global::Omnius.Core.RocketPack.Utf8String[] tags, uint maxBarkMessageCount)
    {
        if (tags is null) throw new global::System.ArgumentNullException("tags");
        if (tags.Length > 256) throw new global::System.ArgumentOutOfRangeException("tags");
        foreach (var n in tags)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
            if (n.Length > 256) throw new global::System.ArgumentOutOfRangeException("n");
        }
        this.Tags = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.RocketPack.Utf8String>(tags);
        this.MaxBarkMessageCount = maxBarkMessageCount;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in tags)
            {
                if (!n.IsEmpty) ___h.Add(n.GetHashCode());
            }
            if (maxBarkMessageCount != default) ___h.Add(maxBarkMessageCount.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.RocketPack.Utf8String> Tags { get; }
    public uint MaxBarkMessageCount { get; }

    public static global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig? left, global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig? left, global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Tags, target.Tags)) return false;
        if (this.MaxBarkMessageCount != target.MaxBarkMessageCount) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Tags.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Tags.Count);
                foreach (var n in value.Tags)
                {
                    w.Write(n);
                }
            }
            if (value.MaxBarkMessageCount != 0)
            {
                w.Write((uint)2);
                w.Write(value.MaxBarkMessageCount);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String[] p_tags = global::System.Array.Empty<global::Omnius.Core.RocketPack.Utf8String>();
            uint p_maxBarkMessageCount = 0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_tags = new global::Omnius.Core.RocketPack.Utf8String[length];
                            for (int i = 0; i < p_tags.Length; i++)
                            {
                                p_tags[i] = r.GetString(256);
                            }
                            break;
                        }
                    case 2:
                        {
                            p_maxBarkMessageCount = r.GetUInt32();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.BarkSubscriberConfig(p_tags, p_maxBarkMessageCount);
        }
    }
}
public sealed partial class BarkMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.BarkMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkMessage>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.BarkMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkMessage>.Empty;

    static BarkMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.BarkMessage>.Empty = new global::Omnius.Axus.Interactors.Models.BarkMessage(global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.RocketPack.Timestamp64.Zero, global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.Cryptography.OmniHash.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxTagLength = 256;
    public static readonly int MaxCommentLength = 1024;

    public BarkMessage(global::Omnius.Core.RocketPack.Utf8String tag, global::Omnius.Core.RocketPack.Timestamp64 createdTime, global::Omnius.Core.RocketPack.Utf8String comment, global::Omnius.Core.Cryptography.OmniHash anchorHash)
    {
        if (tag is null) throw new global::System.ArgumentNullException("tag");
        if (tag.Length > 256) throw new global::System.ArgumentOutOfRangeException("tag");
        if (comment is null) throw new global::System.ArgumentNullException("comment");
        if (comment.Length > 1024) throw new global::System.ArgumentOutOfRangeException("comment");
        this.Tag = tag;
        this.CreatedTime = createdTime;
        this.Comment = comment;
        this.AnchorHash = anchorHash;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!tag.IsEmpty) ___h.Add(tag.GetHashCode());
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            if (!comment.IsEmpty) ___h.Add(comment.GetHashCode());
            if (anchorHash != default) ___h.Add(anchorHash.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String Tag { get; }
    public global::Omnius.Core.RocketPack.Timestamp64 CreatedTime { get; }
    public global::Omnius.Core.RocketPack.Utf8String Comment { get; }
    public global::Omnius.Core.Cryptography.OmniHash AnchorHash { get; }

    public static global::Omnius.Axus.Interactors.Models.BarkMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.BarkMessage? left, global::Omnius.Axus.Interactors.Models.BarkMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.BarkMessage? left, global::Omnius.Axus.Interactors.Models.BarkMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.BarkMessage) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.BarkMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.BarkMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Tag != target.Tag) return false;
        if (this.CreatedTime != target.CreatedTime) return false;
        if (this.Comment != target.Comment) return false;
        if (this.AnchorHash != target.AnchorHash) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.BarkMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axus.Interactors.Models.BarkMessage value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Tag != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Tag);
            }
            if (value.CreatedTime != global::Omnius.Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)2);
                w.Write(value.CreatedTime);
            }
            if (value.Comment != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)3);
                w.Write(value.Comment);
            }
            if (value.AnchorHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)4);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.AnchorHash, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.BarkMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_tag = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.RocketPack.Timestamp64 p_createdTime = global::Omnius.Core.RocketPack.Timestamp64.Zero;
            global::Omnius.Core.RocketPack.Utf8String p_comment = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.Cryptography.OmniHash p_anchorHash = global::Omnius.Core.Cryptography.OmniHash.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_tag = r.GetString(256);
                            break;
                        }
                    case 2:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                    case 3:
                        {
                            p_comment = r.GetString(1024);
                            break;
                        }
                    case 4:
                        {
                            p_anchorHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.BarkMessage(p_tag, p_createdTime, p_comment, p_anchorHash);
        }
    }
}
public sealed partial class FileSeed : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileSeed>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.FileSeed> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileSeed>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.FileSeed Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileSeed>.Empty;

    static FileSeed()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileSeed>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileSeed>.Empty = new global::Omnius.Axus.Interactors.Models.FileSeed(global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty, 0, global::Omnius.Core.RocketPack.Timestamp64.Zero);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNameLength = 256;

    public FileSeed(global::Omnius.Core.Cryptography.OmniHash rootHash, global::Omnius.Core.RocketPack.Utf8String name, ulong size, global::Omnius.Core.RocketPack.Timestamp64 createdTime)
    {
        if (name is null) throw new global::System.ArgumentNullException("name");
        if (name.Length > 256) throw new global::System.ArgumentOutOfRangeException("name");
        this.RootHash = rootHash;
        this.Name = name;
        this.Size = size;
        this.CreatedTime = createdTime;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            if (!name.IsEmpty) ___h.Add(name.GetHashCode());
            if (size != default) ___h.Add(size.GetHashCode());
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public global::Omnius.Core.RocketPack.Utf8String Name { get; }
    public ulong Size { get; }
    public global::Omnius.Core.RocketPack.Timestamp64 CreatedTime { get; }

    public static global::Omnius.Axus.Interactors.Models.FileSeed Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.FileSeed? left, global::Omnius.Axus.Interactors.Models.FileSeed? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.FileSeed? left, global::Omnius.Axus.Interactors.Models.FileSeed? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.FileSeed) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.FileSeed)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.FileSeed? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (this.Name != target.Name) return false;
        if (this.Size != target.Size) return false;
        if (this.CreatedTime != target.CreatedTime) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.FileSeed>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axus.Interactors.Models.FileSeed value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.Name != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Name);
            }
            if (value.Size != 0)
            {
                w.Write((uint)3);
                w.Write(value.Size);
            }
            if (value.CreatedTime != global::Omnius.Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)4);
                w.Write(value.CreatedTime);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.FileSeed Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_name = global::Omnius.Core.RocketPack.Utf8String.Empty;
            ulong p_size = 0;
            global::Omnius.Core.RocketPack.Timestamp64 p_createdTime = global::Omnius.Core.RocketPack.Timestamp64.Zero;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_name = r.GetString(256);
                            break;
                        }
                    case 3:
                        {
                            p_size = r.GetUInt64();
                            break;
                        }
                    case 4:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.FileSeed(p_rootHash, p_name, p_size, p_createdTime);
        }
    }
}
public sealed partial class FileDownloaderConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.FileDownloaderConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig>.Empty;

    static FileDownloaderConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig>.Empty = new global::Omnius.Axus.Interactors.Models.FileDownloaderConfig(global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxDestinationDirectoryLength = 2147483647;

    public FileDownloaderConfig(global::Omnius.Core.RocketPack.Utf8String destinationDirectory)
    {
        if (destinationDirectory is null) throw new global::System.ArgumentNullException("destinationDirectory");
        if (destinationDirectory.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("destinationDirectory");

        this.DestinationDirectory = destinationDirectory;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!destinationDirectory.IsEmpty) ___h.Add(destinationDirectory.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String DestinationDirectory { get; }

    public static global::Omnius.Axus.Interactors.Models.FileDownloaderConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.FileDownloaderConfig? left, global::Omnius.Axus.Interactors.Models.FileDownloaderConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.FileDownloaderConfig? left, global::Omnius.Axus.Interactors.Models.FileDownloaderConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.FileDownloaderConfig) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.FileDownloaderConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.FileDownloaderConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.DestinationDirectory != target.DestinationDirectory) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axus.Interactors.Models.FileDownloaderConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.DestinationDirectory != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.DestinationDirectory);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.FileDownloaderConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_destinationDirectory = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_destinationDirectory = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.FileDownloaderConfig(p_destinationDirectory);
        }
    }
}
