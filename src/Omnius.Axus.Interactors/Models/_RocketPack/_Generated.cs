// <auto-generated/>
#nullable enable

namespace Omnius.Axus.Interactors.Models;

public sealed partial class Profile : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Profile>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.Profile> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Profile>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.Profile Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Profile>.Empty;

    static Profile()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Profile>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Profile>.Empty = new global::Omnius.Axus.Interactors.Models.Profile(global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxTrustedSignaturesCount = 1024;
    public static readonly int MaxBlockedSignaturesCount = 1024;

    public Profile(global::Omnius.Core.Cryptography.OmniSignature[] trustedSignatures, global::Omnius.Core.Cryptography.OmniSignature[] blockedSignatures)
    {
        if (trustedSignatures is null) throw new global::System.ArgumentNullException("trustedSignatures");
        if (trustedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("trustedSignatures");
        foreach (var n in trustedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (blockedSignatures is null) throw new global::System.ArgumentNullException("blockedSignatures");
        if (blockedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("blockedSignatures");
        foreach (var n in blockedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.TrustedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(trustedSignatures);
        this.BlockedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(blockedSignatures);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in trustedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in blockedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> TrustedSignatures { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> BlockedSignatures { get; }

    public static global::Omnius.Axus.Interactors.Models.Profile Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.Profile? left, global::Omnius.Axus.Interactors.Models.Profile? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.Profile? left, global::Omnius.Axus.Interactors.Models.Profile? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.Profile) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.Profile)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.Profile? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.TrustedSignatures, target.TrustedSignatures)) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.BlockedSignatures, target.BlockedSignatures)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.Profile>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Models.Profile value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.TrustedSignatures.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.TrustedSignatures.Count);
                foreach (var n in value.TrustedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.BlockedSignatures.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.BlockedSignatures.Count);
                foreach (var n in value.BlockedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.Profile Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature[] p_trustedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
            global::Omnius.Core.Cryptography.OmniSignature[] p_blockedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_trustedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_trustedSignatures.Length; i++)
                            {
                                p_trustedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_blockedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_blockedSignatures.Length; i++)
                            {
                                p_blockedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.Profile(p_trustedSignatures, p_blockedSignatures);
        }
    }
}
public sealed partial class Seed : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Seed>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.Seed> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Seed>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.Seed Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Seed>.Empty;

    static Seed()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Seed>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Seed>.Empty = new global::Omnius.Axus.Interactors.Models.Seed(global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty, 0, global::Omnius.Core.RocketPack.Timestamp64.Zero);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNameLength = 256;

    public Seed(global::Omnius.Core.Cryptography.OmniHash rootHash, global::Omnius.Core.RocketPack.Utf8String name, ulong size, global::Omnius.Core.RocketPack.Timestamp64 createdTime)
    {
        if (name is null) throw new global::System.ArgumentNullException("name");
        if (name.Length > 256) throw new global::System.ArgumentOutOfRangeException("name");
        this.RootHash = rootHash;
        this.Name = name;
        this.Size = size;
        this.CreatedTime = createdTime;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            if (!name.IsEmpty) ___h.Add(name.GetHashCode());
            if (size != default) ___h.Add(size.GetHashCode());
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public global::Omnius.Core.RocketPack.Utf8String Name { get; }
    public ulong Size { get; }
    public global::Omnius.Core.RocketPack.Timestamp64 CreatedTime { get; }

    public static global::Omnius.Axus.Interactors.Models.Seed Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.Seed? left, global::Omnius.Axus.Interactors.Models.Seed? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.Seed? left, global::Omnius.Axus.Interactors.Models.Seed? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.Seed) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.Seed)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.Seed? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (this.Name != target.Name) return false;
        if (this.Size != target.Size) return false;
        if (this.CreatedTime != target.CreatedTime) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.Seed>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Models.Seed value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.Name != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Name);
            }
            if (value.Size != 0)
            {
                w.Write((uint)3);
                w.Write(value.Size);
            }
            if (value.CreatedTime != global::Omnius.Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)4);
                w.Write(value.CreatedTime);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.Seed Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_name = global::Omnius.Core.RocketPack.Utf8String.Empty;
            ulong p_size = 0;
            global::Omnius.Core.RocketPack.Timestamp64 p_createdTime = global::Omnius.Core.RocketPack.Timestamp64.Zero;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_name = r.GetString(256);
                            break;
                        }
                    case 3:
                        {
                            p_size = r.GetUInt64();
                            break;
                        }
                    case 4:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.Seed(p_rootHash, p_name, p_size, p_createdTime);
        }
    }
}
public sealed partial class Note : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Note>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.Note> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Note>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.Note Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Note>.Empty;

    static Note()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Note>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.Note>.Empty = new global::Omnius.Axus.Interactors.Models.Note(global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Core.RocketPack.Timestamp64.Zero);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxValueLength = 1024;
    public static readonly int MaxTagLength = 256;

    public Note(global::Omnius.Core.RocketPack.Utf8String value, global::Omnius.Core.RocketPack.Utf8String tag, global::Omnius.Core.Cryptography.OmniHash anchorHash, global::Omnius.Core.RocketPack.Timestamp64 createdTime)
    {
        if (value is null) throw new global::System.ArgumentNullException("value");
        if (value.Length > 1024) throw new global::System.ArgumentOutOfRangeException("value");
        if (tag is null) throw new global::System.ArgumentNullException("tag");
        if (tag.Length > 256) throw new global::System.ArgumentOutOfRangeException("tag");
        this.Value = value;
        this.Tag = tag;
        this.AnchorHash = anchorHash;
        this.CreatedTime = createdTime;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!value.IsEmpty) ___h.Add(value.GetHashCode());
            if (!tag.IsEmpty) ___h.Add(tag.GetHashCode());
            if (anchorHash != default) ___h.Add(anchorHash.GetHashCode());
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String Value { get; }
    public global::Omnius.Core.RocketPack.Utf8String Tag { get; }
    public global::Omnius.Core.Cryptography.OmniHash AnchorHash { get; }
    public global::Omnius.Core.RocketPack.Timestamp64 CreatedTime { get; }

    public static global::Omnius.Axus.Interactors.Models.Note Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.Note? left, global::Omnius.Axus.Interactors.Models.Note? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.Note? left, global::Omnius.Axus.Interactors.Models.Note? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.Note) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.Note)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.Note? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Value != target.Value) return false;
        if (this.Tag != target.Tag) return false;
        if (this.AnchorHash != target.AnchorHash) return false;
        if (this.CreatedTime != target.CreatedTime) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.Note>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Models.Note value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Value != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Value);
            }
            if (value.Tag != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Tag);
            }
            if (value.AnchorHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)3);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.AnchorHash, rank + 1);
            }
            if (value.CreatedTime != global::Omnius.Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)4);
                w.Write(value.CreatedTime);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.Note Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_value = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_tag = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.Cryptography.OmniHash p_anchorHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::Omnius.Core.RocketPack.Timestamp64 p_createdTime = global::Omnius.Core.RocketPack.Timestamp64.Zero;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_value = r.GetString(1024);
                            break;
                        }
                    case 2:
                        {
                            p_tag = r.GetString(256);
                            break;
                        }
                    case 3:
                        {
                            p_anchorHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 4:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.Note(p_value, p_tag, p_anchorHash, p_createdTime);
        }
    }
}
public sealed partial class ProfileUploaderConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig>.Empty;

    static ProfileUploaderConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig>.Empty = new global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig(global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty, global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxTrustedSignaturesCount = 1024;
    public static readonly int MaxBlockedSignaturesCount = 1024;

    public ProfileUploaderConfig(global::Omnius.Core.Cryptography.OmniDigitalSignature digitalSignature, global::Omnius.Core.Cryptography.OmniSignature[] trustedSignatures, global::Omnius.Core.Cryptography.OmniSignature[] blockedSignatures)
    {
        if (digitalSignature is null) throw new global::System.ArgumentNullException("digitalSignature");
        if (trustedSignatures is null) throw new global::System.ArgumentNullException("trustedSignatures");
        if (trustedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("trustedSignatures");
        foreach (var n in trustedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (blockedSignatures is null) throw new global::System.ArgumentNullException("blockedSignatures");
        if (blockedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("blockedSignatures");
        foreach (var n in blockedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.DigitalSignature = digitalSignature;
        this.TrustedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(trustedSignatures);
        this.BlockedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(blockedSignatures);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (digitalSignature != default) ___h.Add(digitalSignature.GetHashCode());
            foreach (var n in trustedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in blockedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniDigitalSignature DigitalSignature { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> TrustedSignatures { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> BlockedSignatures { get; }

    public static global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig? left, global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig? left, global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.DigitalSignature != target.DigitalSignature) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.TrustedSignatures, target.TrustedSignatures)) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.BlockedSignatures, target.BlockedSignatures)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.DigitalSignature != global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniDigitalSignature.Formatter.Serialize(ref w, value.DigitalSignature, rank + 1);
            }
            if (value.TrustedSignatures.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.TrustedSignatures.Count);
                foreach (var n in value.TrustedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.BlockedSignatures.Count != 0)
            {
                w.Write((uint)3);
                w.Write((uint)value.BlockedSignatures.Count);
                foreach (var n in value.BlockedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniDigitalSignature p_digitalSignature = global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty;
            global::Omnius.Core.Cryptography.OmniSignature[] p_trustedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
            global::Omnius.Core.Cryptography.OmniSignature[] p_blockedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_digitalSignature = global::Omnius.Core.Cryptography.OmniDigitalSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_trustedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_trustedSignatures.Length; i++)
                            {
                                p_trustedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 3:
                        {
                            var length = r.GetUInt32();
                            p_blockedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_blockedSignatures.Length; i++)
                            {
                                p_blockedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.ProfileUploaderConfig(p_digitalSignature, p_trustedSignatures, p_blockedSignatures);
        }
    }
}
public sealed partial class ProfileDownloaderConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig>.Empty;

    static ProfileDownloaderConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig>.Empty = new global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig(global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxTrustedSignaturesCount = 1024;
    public static readonly int MaxBlockedSignaturesCount = 1024;

    public ProfileDownloaderConfig(global::Omnius.Core.Cryptography.OmniSignature[] trustedSignatures, global::Omnius.Core.Cryptography.OmniSignature[] blockedSignatures)
    {
        if (trustedSignatures is null) throw new global::System.ArgumentNullException("trustedSignatures");
        if (trustedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("trustedSignatures");
        foreach (var n in trustedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (blockedSignatures is null) throw new global::System.ArgumentNullException("blockedSignatures");
        if (blockedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("blockedSignatures");
        foreach (var n in blockedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.TrustedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(trustedSignatures);
        this.BlockedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(blockedSignatures);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in trustedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in blockedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> TrustedSignatures { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> BlockedSignatures { get; }

    public static global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig? left, global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig? left, global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.TrustedSignatures, target.TrustedSignatures)) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.BlockedSignatures, target.BlockedSignatures)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.TrustedSignatures.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.TrustedSignatures.Count);
                foreach (var n in value.TrustedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.BlockedSignatures.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.BlockedSignatures.Count);
                foreach (var n in value.BlockedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature[] p_trustedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
            global::Omnius.Core.Cryptography.OmniSignature[] p_blockedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_trustedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_trustedSignatures.Length; i++)
                            {
                                p_trustedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_blockedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_blockedSignatures.Length; i++)
                            {
                                p_blockedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.ProfileDownloaderConfig(p_trustedSignatures, p_blockedSignatures);
        }
    }
}
public sealed partial class NoteUploaderConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.NoteUploaderConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.NoteUploaderConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.NoteUploaderConfig>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.NoteUploaderConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.NoteUploaderConfig>.Empty;

    static NoteUploaderConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.NoteUploaderConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.NoteUploaderConfig>.Empty = new global::Omnius.Axus.Interactors.Models.NoteUploaderConfig(global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty, global::System.Array.Empty<global::Omnius.Axus.Interactors.Models.Note>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNotesCount = 8192;

    public NoteUploaderConfig(global::Omnius.Core.Cryptography.OmniDigitalSignature digitalSignature, global::Omnius.Axus.Interactors.Models.Note[] notes)
    {
        if (digitalSignature is null) throw new global::System.ArgumentNullException("digitalSignature");
        if (notes is null) throw new global::System.ArgumentNullException("notes");
        if (notes.Length > 8192) throw new global::System.ArgumentOutOfRangeException("notes");
        foreach (var n in notes)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.DigitalSignature = digitalSignature;
        this.Notes = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Interactors.Models.Note>(notes);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (digitalSignature != default) ___h.Add(digitalSignature.GetHashCode());
            foreach (var n in notes)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniDigitalSignature DigitalSignature { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Interactors.Models.Note> Notes { get; }

    public static global::Omnius.Axus.Interactors.Models.NoteUploaderConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.NoteUploaderConfig? left, global::Omnius.Axus.Interactors.Models.NoteUploaderConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.NoteUploaderConfig? left, global::Omnius.Axus.Interactors.Models.NoteUploaderConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.NoteUploaderConfig) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.NoteUploaderConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.NoteUploaderConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.DigitalSignature != target.DigitalSignature) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Notes, target.Notes)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.NoteUploaderConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Models.NoteUploaderConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.DigitalSignature != global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniDigitalSignature.Formatter.Serialize(ref w, value.DigitalSignature, rank + 1);
            }
            if (value.Notes.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.Notes.Count);
                foreach (var n in value.Notes)
                {
                    global::Omnius.Axus.Interactors.Models.Note.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.NoteUploaderConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniDigitalSignature p_digitalSignature = global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty;
            global::Omnius.Axus.Interactors.Models.Note[] p_notes = global::System.Array.Empty<global::Omnius.Axus.Interactors.Models.Note>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_digitalSignature = global::Omnius.Core.Cryptography.OmniDigitalSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_notes = new global::Omnius.Axus.Interactors.Models.Note[length];
                            for (int i = 0; i < p_notes.Length; i++)
                            {
                                p_notes[i] = global::Omnius.Axus.Interactors.Models.Note.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.NoteUploaderConfig(p_digitalSignature, p_notes);
        }
    }
}
public sealed partial class NoteDownloaderConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig>.Empty;

    static NoteDownloaderConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig>.Empty = new global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig(global::System.Array.Empty<global::Omnius.Core.RocketPack.Utf8String>(), 0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxTagsCount = 256;

    public NoteDownloaderConfig(global::Omnius.Core.RocketPack.Utf8String[] tags, uint maxNoteCount)
    {
        if (tags is null) throw new global::System.ArgumentNullException("tags");
        if (tags.Length > 256) throw new global::System.ArgumentOutOfRangeException("tags");
        foreach (var n in tags)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
            if (n.Length > 256) throw new global::System.ArgumentOutOfRangeException("n");
        }
        this.Tags = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.RocketPack.Utf8String>(tags);
        this.MaxNoteCount = maxNoteCount;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in tags)
            {
                if (!n.IsEmpty) ___h.Add(n.GetHashCode());
            }
            if (maxNoteCount != default) ___h.Add(maxNoteCount.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.RocketPack.Utf8String> Tags { get; }
    public uint MaxNoteCount { get; }

    public static global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig? left, global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig? left, global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Tags, target.Tags)) return false;
        if (this.MaxNoteCount != target.MaxNoteCount) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Tags.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Tags.Count);
                foreach (var n in value.Tags)
                {
                    w.Write(n);
                }
            }
            if (value.MaxNoteCount != 0)
            {
                w.Write((uint)2);
                w.Write(value.MaxNoteCount);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String[] p_tags = global::System.Array.Empty<global::Omnius.Core.RocketPack.Utf8String>();
            uint p_maxNoteCount = 0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_tags = new global::Omnius.Core.RocketPack.Utf8String[length];
                            for (int i = 0; i < p_tags.Length; i++)
                            {
                                p_tags[i] = r.GetString(256);
                            }
                            break;
                        }
                    case 2:
                        {
                            p_maxNoteCount = r.GetUInt32();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.NoteDownloaderConfig(p_tags, p_maxNoteCount);
        }
    }
}
public sealed partial class SeedUploaderConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.SeedUploaderConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.SeedUploaderConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.SeedUploaderConfig>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.SeedUploaderConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.SeedUploaderConfig>.Empty;

    static SeedUploaderConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.SeedUploaderConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.SeedUploaderConfig>.Empty = new global::Omnius.Axus.Interactors.Models.SeedUploaderConfig(global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public SeedUploaderConfig(global::Omnius.Core.Cryptography.OmniDigitalSignature digitalSignature)
    {
        if (digitalSignature is null) throw new global::System.ArgumentNullException("digitalSignature");

        this.DigitalSignature = digitalSignature;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (digitalSignature != default) ___h.Add(digitalSignature.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniDigitalSignature DigitalSignature { get; }

    public static global::Omnius.Axus.Interactors.Models.SeedUploaderConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.SeedUploaderConfig? left, global::Omnius.Axus.Interactors.Models.SeedUploaderConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.SeedUploaderConfig? left, global::Omnius.Axus.Interactors.Models.SeedUploaderConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.SeedUploaderConfig) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.SeedUploaderConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.SeedUploaderConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.DigitalSignature != target.DigitalSignature) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.SeedUploaderConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Models.SeedUploaderConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.DigitalSignature != global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniDigitalSignature.Formatter.Serialize(ref w, value.DigitalSignature, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.SeedUploaderConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniDigitalSignature p_digitalSignature = global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_digitalSignature = global::Omnius.Core.Cryptography.OmniDigitalSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.SeedUploaderConfig(p_digitalSignature);
        }
    }
}
public sealed partial class SeedDownloaderConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig>.Empty;

    static SeedDownloaderConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig>.Empty = new global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig(0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public SeedDownloaderConfig(uint maxSeedBoxCount)
    {
        this.MaxSeedBoxCount = maxSeedBoxCount;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (maxSeedBoxCount != default) ___h.Add(maxSeedBoxCount.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public uint MaxSeedBoxCount { get; }

    public static global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig? left, global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig? left, global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.MaxSeedBoxCount != target.MaxSeedBoxCount) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.MaxSeedBoxCount != 0)
            {
                w.Write((uint)1);
                w.Write(value.MaxSeedBoxCount);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            uint p_maxSeedBoxCount = 0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_maxSeedBoxCount = r.GetUInt32();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.SeedDownloaderConfig(p_maxSeedBoxCount);
        }
    }
}
public sealed partial class FileDownloaderConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig>.Formatter;
    public static global::Omnius.Axus.Interactors.Models.FileDownloaderConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig>.Empty;

    static FileDownloaderConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig>.Empty = new global::Omnius.Axus.Interactors.Models.FileDownloaderConfig(global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxDestinationDirectoryLength = 2147483647;

    public FileDownloaderConfig(global::Omnius.Core.RocketPack.Utf8String destinationDirectory)
    {
        if (destinationDirectory is null) throw new global::System.ArgumentNullException("destinationDirectory");
        if (destinationDirectory.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("destinationDirectory");

        this.DestinationDirectory = destinationDirectory;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!destinationDirectory.IsEmpty) ___h.Add(destinationDirectory.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String DestinationDirectory { get; }

    public static global::Omnius.Axus.Interactors.Models.FileDownloaderConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Models.FileDownloaderConfig? left, global::Omnius.Axus.Interactors.Models.FileDownloaderConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Models.FileDownloaderConfig? left, global::Omnius.Axus.Interactors.Models.FileDownloaderConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Models.FileDownloaderConfig) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Models.FileDownloaderConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Models.FileDownloaderConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.DestinationDirectory != target.DestinationDirectory) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Models.FileDownloaderConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Models.FileDownloaderConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.DestinationDirectory != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.DestinationDirectory);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Models.FileDownloaderConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_destinationDirectory = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_destinationDirectory = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Models.FileDownloaderConfig(p_destinationDirectory);
        }
    }
}
