// <auto-generated/>
#nullable enable

namespace Omnius.Axus.Interactors.Internal.Models;

public sealed partial class CachedProfile : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedProfile>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.CachedProfile> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedProfile>.Formatter;
    public static global::Omnius.Axus.Interactors.Internal.Models.CachedProfile Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedProfile>.Empty;

    static CachedProfile()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedProfile>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedProfile>.Empty = new global::Omnius.Axus.Interactors.Internal.Models.CachedProfile(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Timestamp64.Zero, global::Omnius.Axus.Interactors.Models.Profile.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public CachedProfile(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Timestamp64 shoutUpdatedTime, global::Omnius.Axus.Interactors.Models.Profile value)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (value is null) throw new global::System.ArgumentNullException("value");

        this.Signature = signature;
        this.ShoutUpdatedTime = shoutUpdatedTime;
        this.Value = value;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (shoutUpdatedTime != default) ___h.Add(shoutUpdatedTime.GetHashCode());
            if (value != default) ___h.Add(value.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Timestamp64 ShoutUpdatedTime { get; }
    public global::Omnius.Axus.Interactors.Models.Profile Value { get; }

    public static global::Omnius.Axus.Interactors.Internal.Models.CachedProfile Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Internal.Models.CachedProfile? left, global::Omnius.Axus.Interactors.Internal.Models.CachedProfile? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Internal.Models.CachedProfile? left, global::Omnius.Axus.Interactors.Internal.Models.CachedProfile? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Internal.Models.CachedProfile) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Internal.Models.CachedProfile)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Internal.Models.CachedProfile? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.ShoutUpdatedTime != target.ShoutUpdatedTime) return false;
        if (this.Value != target.Value) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.CachedProfile>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Internal.Models.CachedProfile value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.ShoutUpdatedTime != global::Omnius.Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)2);
                w.Write(value.ShoutUpdatedTime);
            }
            if (value.Value != global::Omnius.Axus.Interactors.Models.Profile.Empty)
            {
                w.Write((uint)3);
                global::Omnius.Axus.Interactors.Models.Profile.Formatter.Serialize(ref w, value.Value, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Internal.Models.CachedProfile Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Timestamp64 p_shoutUpdatedTime = global::Omnius.Core.RocketPack.Timestamp64.Zero;
            global::Omnius.Axus.Interactors.Models.Profile p_value = global::Omnius.Axus.Interactors.Models.Profile.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_shoutUpdatedTime = r.GetTimestamp64();
                            break;
                        }
                    case 3:
                        {
                            p_value = global::Omnius.Axus.Interactors.Models.Profile.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Internal.Models.CachedProfile(p_signature, p_shoutUpdatedTime, p_value);
        }
    }
}
public sealed partial class CachedNoteContent : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent>.Formatter;
    public static global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent>.Empty;

    static CachedNoteContent()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent>.Empty = new global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Timestamp64.Zero, global::Omnius.Axus.Interactors.Internal.Models.NoteContent.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public CachedNoteContent(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Timestamp64 shoutUpdatedTime, global::Omnius.Axus.Interactors.Internal.Models.NoteContent value)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (value is null) throw new global::System.ArgumentNullException("value");

        this.Signature = signature;
        this.ShoutUpdatedTime = shoutUpdatedTime;
        this.Value = value;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (shoutUpdatedTime != default) ___h.Add(shoutUpdatedTime.GetHashCode());
            if (value != default) ___h.Add(value.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Timestamp64 ShoutUpdatedTime { get; }
    public global::Omnius.Axus.Interactors.Internal.Models.NoteContent Value { get; }

    public static global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent? left, global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent? left, global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.ShoutUpdatedTime != target.ShoutUpdatedTime) return false;
        if (this.Value != target.Value) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.ShoutUpdatedTime != global::Omnius.Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)2);
                w.Write(value.ShoutUpdatedTime);
            }
            if (value.Value != global::Omnius.Axus.Interactors.Internal.Models.NoteContent.Empty)
            {
                w.Write((uint)3);
                global::Omnius.Axus.Interactors.Internal.Models.NoteContent.Formatter.Serialize(ref w, value.Value, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Timestamp64 p_shoutUpdatedTime = global::Omnius.Core.RocketPack.Timestamp64.Zero;
            global::Omnius.Axus.Interactors.Internal.Models.NoteContent p_value = global::Omnius.Axus.Interactors.Internal.Models.NoteContent.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_shoutUpdatedTime = r.GetTimestamp64();
                            break;
                        }
                    case 3:
                        {
                            p_value = global::Omnius.Axus.Interactors.Internal.Models.NoteContent.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Internal.Models.CachedNoteContent(p_signature, p_shoutUpdatedTime, p_value);
        }
    }
}
public sealed partial class NoteContent : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.NoteContent>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.NoteContent> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.NoteContent>.Formatter;
    public static global::Omnius.Axus.Interactors.Internal.Models.NoteContent Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.NoteContent>.Empty;

    static NoteContent()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.NoteContent>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.NoteContent>.Empty = new global::Omnius.Axus.Interactors.Internal.Models.NoteContent(global::System.Array.Empty<global::Omnius.Axus.Interactors.Models.Memo>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxMemosCount = 8192;

    public NoteContent(global::Omnius.Axus.Interactors.Models.Memo[] memos)
    {
        if (memos is null) throw new global::System.ArgumentNullException("memos");
        if (memos.Length > 8192) throw new global::System.ArgumentOutOfRangeException("memos");
        foreach (var n in memos)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.Memos = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Interactors.Models.Memo>(memos);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in memos)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Interactors.Models.Memo> Memos { get; }

    public static global::Omnius.Axus.Interactors.Internal.Models.NoteContent Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Internal.Models.NoteContent? left, global::Omnius.Axus.Interactors.Internal.Models.NoteContent? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Internal.Models.NoteContent? left, global::Omnius.Axus.Interactors.Internal.Models.NoteContent? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Internal.Models.NoteContent) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Internal.Models.NoteContent)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Internal.Models.NoteContent? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Memos, target.Memos)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.NoteContent>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Internal.Models.NoteContent value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Memos.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Memos.Count);
                foreach (var n in value.Memos)
                {
                    global::Omnius.Axus.Interactors.Models.Memo.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Internal.Models.NoteContent Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Interactors.Models.Memo[] p_memos = global::System.Array.Empty<global::Omnius.Axus.Interactors.Models.Memo>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_memos = new global::Omnius.Axus.Interactors.Models.Memo[length];
                            for (int i = 0; i < p_memos.Length; i++)
                            {
                                p_memos[i] = global::Omnius.Axus.Interactors.Models.Memo.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Internal.Models.NoteContent(p_memos);
        }
    }
}
public sealed partial class CachedMemo : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedMemo>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.CachedMemo> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedMemo>.Formatter;
    public static global::Omnius.Axus.Interactors.Internal.Models.CachedMemo Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedMemo>.Empty;

    static CachedMemo()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedMemo>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedMemo>.Empty = new global::Omnius.Axus.Interactors.Internal.Models.CachedMemo(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Axus.Interactors.Models.Memo.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public CachedMemo(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Axus.Interactors.Models.Memo value)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (value is null) throw new global::System.ArgumentNullException("value");

        this.Signature = signature;
        this.Value = value;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (value != default) ___h.Add(value.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Axus.Interactors.Models.Memo Value { get; }

    public static global::Omnius.Axus.Interactors.Internal.Models.CachedMemo Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Internal.Models.CachedMemo? left, global::Omnius.Axus.Interactors.Internal.Models.CachedMemo? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Internal.Models.CachedMemo? left, global::Omnius.Axus.Interactors.Internal.Models.CachedMemo? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Internal.Models.CachedMemo) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Internal.Models.CachedMemo)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Internal.Models.CachedMemo? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Value != target.Value) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.CachedMemo>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Internal.Models.CachedMemo value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Value != global::Omnius.Axus.Interactors.Models.Memo.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Axus.Interactors.Models.Memo.Formatter.Serialize(ref w, value.Value, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Internal.Models.CachedMemo Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Axus.Interactors.Models.Memo p_value = global::Omnius.Axus.Interactors.Models.Memo.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_value = global::Omnius.Axus.Interactors.Models.Memo.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Internal.Models.CachedMemo(p_signature, p_value);
        }
    }
}
public sealed partial class CachedCaskContent : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent>.Formatter;
    public static global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent>.Empty;

    static CachedCaskContent()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent>.Empty = new global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Timestamp64.Zero, global::Omnius.Axus.Interactors.Internal.Models.CaskContent.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public CachedCaskContent(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Timestamp64 shoutUpdatedTime, global::Omnius.Axus.Interactors.Internal.Models.CaskContent value)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (value is null) throw new global::System.ArgumentNullException("value");

        this.Signature = signature;
        this.ShoutUpdatedTime = shoutUpdatedTime;
        this.Value = value;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (shoutUpdatedTime != default) ___h.Add(shoutUpdatedTime.GetHashCode());
            if (value != default) ___h.Add(value.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Timestamp64 ShoutUpdatedTime { get; }
    public global::Omnius.Axus.Interactors.Internal.Models.CaskContent Value { get; }

    public static global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent? left, global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent? left, global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.ShoutUpdatedTime != target.ShoutUpdatedTime) return false;
        if (this.Value != target.Value) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.ShoutUpdatedTime != global::Omnius.Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)2);
                w.Write(value.ShoutUpdatedTime);
            }
            if (value.Value != global::Omnius.Axus.Interactors.Internal.Models.CaskContent.Empty)
            {
                w.Write((uint)3);
                global::Omnius.Axus.Interactors.Internal.Models.CaskContent.Formatter.Serialize(ref w, value.Value, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Timestamp64 p_shoutUpdatedTime = global::Omnius.Core.RocketPack.Timestamp64.Zero;
            global::Omnius.Axus.Interactors.Internal.Models.CaskContent p_value = global::Omnius.Axus.Interactors.Internal.Models.CaskContent.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_shoutUpdatedTime = r.GetTimestamp64();
                            break;
                        }
                    case 3:
                        {
                            p_value = global::Omnius.Axus.Interactors.Internal.Models.CaskContent.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Internal.Models.CachedCaskContent(p_signature, p_shoutUpdatedTime, p_value);
        }
    }
}
public sealed partial class CaskContent : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CaskContent>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.CaskContent> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CaskContent>.Formatter;
    public static global::Omnius.Axus.Interactors.Internal.Models.CaskContent Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CaskContent>.Empty;

    static CaskContent()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CaskContent>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CaskContent>.Empty = new global::Omnius.Axus.Interactors.Internal.Models.CaskContent(global::System.Array.Empty<global::Omnius.Axus.Interactors.Models.Seed>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSeedsCount = 32768;

    public CaskContent(global::Omnius.Axus.Interactors.Models.Seed[] seeds)
    {
        if (seeds is null) throw new global::System.ArgumentNullException("seeds");
        if (seeds.Length > 32768) throw new global::System.ArgumentOutOfRangeException("seeds");
        foreach (var n in seeds)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.Seeds = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Interactors.Models.Seed>(seeds);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in seeds)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Interactors.Models.Seed> Seeds { get; }

    public static global::Omnius.Axus.Interactors.Internal.Models.CaskContent Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Internal.Models.CaskContent? left, global::Omnius.Axus.Interactors.Internal.Models.CaskContent? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Internal.Models.CaskContent? left, global::Omnius.Axus.Interactors.Internal.Models.CaskContent? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Internal.Models.CaskContent) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Internal.Models.CaskContent)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Internal.Models.CaskContent? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Seeds, target.Seeds)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.CaskContent>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Internal.Models.CaskContent value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Seeds.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Seeds.Count);
                foreach (var n in value.Seeds)
                {
                    global::Omnius.Axus.Interactors.Models.Seed.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Internal.Models.CaskContent Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Interactors.Models.Seed[] p_seeds = global::System.Array.Empty<global::Omnius.Axus.Interactors.Models.Seed>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_seeds = new global::Omnius.Axus.Interactors.Models.Seed[length];
                            for (int i = 0; i < p_seeds.Length; i++)
                            {
                                p_seeds[i] = global::Omnius.Axus.Interactors.Models.Seed.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Internal.Models.CaskContent(p_seeds);
        }
    }
}
public sealed partial class CachedSeed : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedSeed>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.CachedSeed> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedSeed>.Formatter;
    public static global::Omnius.Axus.Interactors.Internal.Models.CachedSeed Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedSeed>.Empty;

    static CachedSeed()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedSeed>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Interactors.Internal.Models.CachedSeed>.Empty = new global::Omnius.Axus.Interactors.Internal.Models.CachedSeed(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Axus.Interactors.Models.Seed.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public CachedSeed(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Axus.Interactors.Models.Seed value)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (value is null) throw new global::System.ArgumentNullException("value");

        this.Signature = signature;
        this.Value = value;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (value != default) ___h.Add(value.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Axus.Interactors.Models.Seed Value { get; }

    public static global::Omnius.Axus.Interactors.Internal.Models.CachedSeed Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Interactors.Internal.Models.CachedSeed? left, global::Omnius.Axus.Interactors.Internal.Models.CachedSeed? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Interactors.Internal.Models.CachedSeed? left, global::Omnius.Axus.Interactors.Internal.Models.CachedSeed? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Interactors.Internal.Models.CachedSeed) return false;
        return this.Equals((global::Omnius.Axus.Interactors.Internal.Models.CachedSeed)other);
    }
    public bool Equals(global::Omnius.Axus.Interactors.Internal.Models.CachedSeed? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Value != target.Value) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Interactors.Internal.Models.CachedSeed>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Interactors.Internal.Models.CachedSeed value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Value != global::Omnius.Axus.Interactors.Models.Seed.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Axus.Interactors.Models.Seed.Formatter.Serialize(ref w, value.Value, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Interactors.Internal.Models.CachedSeed Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Axus.Interactors.Models.Seed p_value = global::Omnius.Axus.Interactors.Models.Seed.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_value = global::Omnius.Axus.Interactors.Models.Seed.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Interactors.Internal.Models.CachedSeed(p_signature, p_value);
        }
    }
}
