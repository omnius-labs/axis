// <auto-generated/>
#nullable enable

namespace Omnius.Axus.Remoting;

public enum TcpProxyType : byte
{
    None = 0,
    HttpProxy = 1,
    Socks5Proxy = 2,
}
public sealed partial class GetConfigResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetConfigResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetConfigResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetConfigResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetConfigResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetConfigResult>.Empty;

    static GetConfigResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetConfigResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetConfigResult>.Empty = new global::Omnius.Axus.Remoting.GetConfigResult(global::Omnius.Axus.Remoting.ServiceConfig.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public GetConfigResult(global::Omnius.Axus.Remoting.ServiceConfig config)
    {
        if (config is null) throw new global::System.ArgumentNullException("config");

        this.Config = config;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (config != default) ___h.Add(config.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Remoting.ServiceConfig Config { get; }

    public static global::Omnius.Axus.Remoting.GetConfigResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetConfigResult? left, global::Omnius.Axus.Remoting.GetConfigResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetConfigResult? left, global::Omnius.Axus.Remoting.GetConfigResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetConfigResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetConfigResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetConfigResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Config != target.Config) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetConfigResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetConfigResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Config != global::Omnius.Axus.Remoting.ServiceConfig.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Axus.Remoting.ServiceConfig.Formatter.Serialize(ref w, value.Config, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetConfigResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Remoting.ServiceConfig p_config = global::Omnius.Axus.Remoting.ServiceConfig.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_config = global::Omnius.Axus.Remoting.ServiceConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetConfigResult(p_config);
        }
    }
}
public sealed partial class SetConfigParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SetConfigParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.SetConfigParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SetConfigParam>.Formatter;
    public static global::Omnius.Axus.Remoting.SetConfigParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SetConfigParam>.Empty;

    static SetConfigParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SetConfigParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SetConfigParam>.Empty = new global::Omnius.Axus.Remoting.SetConfigParam(global::Omnius.Axus.Remoting.ServiceConfig.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public SetConfigParam(global::Omnius.Axus.Remoting.ServiceConfig config)
    {
        if (config is null) throw new global::System.ArgumentNullException("config");

        this.Config = config;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (config != default) ___h.Add(config.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Remoting.ServiceConfig Config { get; }

    public static global::Omnius.Axus.Remoting.SetConfigParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.SetConfigParam? left, global::Omnius.Axus.Remoting.SetConfigParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.SetConfigParam? left, global::Omnius.Axus.Remoting.SetConfigParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.SetConfigParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.SetConfigParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.SetConfigParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Config != target.Config) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.SetConfigParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.SetConfigParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Config != global::Omnius.Axus.Remoting.ServiceConfig.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Axus.Remoting.ServiceConfig.Formatter.Serialize(ref w, value.Config, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.SetConfigParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Remoting.ServiceConfig p_config = global::Omnius.Axus.Remoting.ServiceConfig.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_config = global::Omnius.Axus.Remoting.ServiceConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.SetConfigParam(p_config);
        }
    }
}
public sealed partial class GetSessionsReportResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSessionsReportResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSessionsReportResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSessionsReportResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetSessionsReportResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSessionsReportResult>.Empty;

    static GetSessionsReportResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSessionsReportResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSessionsReportResult>.Empty = new global::Omnius.Axus.Remoting.GetSessionsReportResult(global::System.Array.Empty<global::Omnius.Axus.Messages.SessionReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSessionsCount = 8192;

    public GetSessionsReportResult(global::Omnius.Axus.Messages.SessionReport[] sessions)
    {
        if (sessions is null) throw new global::System.ArgumentNullException("sessions");
        if (sessions.Length > 8192) throw new global::System.ArgumentOutOfRangeException("sessions");
        foreach (var n in sessions)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.Sessions = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.SessionReport>(sessions);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in sessions)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.SessionReport> Sessions { get; }

    public static global::Omnius.Axus.Remoting.GetSessionsReportResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetSessionsReportResult? left, global::Omnius.Axus.Remoting.GetSessionsReportResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetSessionsReportResult? left, global::Omnius.Axus.Remoting.GetSessionsReportResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetSessionsReportResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetSessionsReportResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetSessionsReportResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Sessions, target.Sessions)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSessionsReportResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetSessionsReportResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Sessions.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Sessions.Count);
                foreach (var n in value.Sessions)
                {
                    global::Omnius.Axus.Messages.SessionReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetSessionsReportResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.SessionReport[] p_sessions = global::System.Array.Empty<global::Omnius.Axus.Messages.SessionReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_sessions = new global::Omnius.Axus.Messages.SessionReport[length];
                            for (int i = 0; i < p_sessions.Length; i++)
                            {
                                p_sessions[i] = global::Omnius.Axus.Messages.SessionReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetSessionsReportResult(p_sessions);
        }
    }
}
public sealed partial class GetMyNodeLocationResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetMyNodeLocationResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetMyNodeLocationResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>.Empty;

    static GetMyNodeLocationResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>.Empty = new global::Omnius.Axus.Remoting.GetMyNodeLocationResult(global::Omnius.Axus.Messages.NodeLocation.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public GetMyNodeLocationResult(global::Omnius.Axus.Messages.NodeLocation nodeLocation)
    {
        if (nodeLocation is null) throw new global::System.ArgumentNullException("nodeLocation");

        this.NodeLocation = nodeLocation;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (nodeLocation != default) ___h.Add(nodeLocation.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Messages.NodeLocation NodeLocation { get; }

    public static global::Omnius.Axus.Remoting.GetMyNodeLocationResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetMyNodeLocationResult? left, global::Omnius.Axus.Remoting.GetMyNodeLocationResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetMyNodeLocationResult? left, global::Omnius.Axus.Remoting.GetMyNodeLocationResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetMyNodeLocationResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetMyNodeLocationResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetMyNodeLocationResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.NodeLocation != target.NodeLocation) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetMyNodeLocationResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.NodeLocation != global::Omnius.Axus.Messages.NodeLocation.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Axus.Messages.NodeLocation.Formatter.Serialize(ref w, value.NodeLocation, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetMyNodeLocationResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.NodeLocation p_nodeLocation = global::Omnius.Axus.Messages.NodeLocation.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_nodeLocation = global::Omnius.Axus.Messages.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetMyNodeLocationResult(p_nodeLocation);
        }
    }
}
public sealed partial class GetCloudNodeLocationsResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>.Empty;

    static GetCloudNodeLocationsResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>.Empty = new global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult(global::System.Array.Empty<global::Omnius.Axus.Messages.NodeLocation>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNodeLocationsCount = 8192;

    public GetCloudNodeLocationsResult(global::Omnius.Axus.Messages.NodeLocation[] nodeLocations)
    {
        if (nodeLocations is null) throw new global::System.ArgumentNullException("nodeLocations");
        if (nodeLocations.Length > 8192) throw new global::System.ArgumentOutOfRangeException("nodeLocations");
        foreach (var n in nodeLocations)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.NodeLocations = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.NodeLocation>(nodeLocations);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in nodeLocations)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.NodeLocation> NodeLocations { get; }

    public static global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult? left, global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult? left, global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.NodeLocations, target.NodeLocations)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.NodeLocations.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.NodeLocations.Count);
                foreach (var n in value.NodeLocations)
                {
                    global::Omnius.Axus.Messages.NodeLocation.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.NodeLocation[] p_nodeLocations = global::System.Array.Empty<global::Omnius.Axus.Messages.NodeLocation>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_nodeLocations = new global::Omnius.Axus.Messages.NodeLocation[length];
                            for (int i = 0; i < p_nodeLocations.Length; i++)
                            {
                                p_nodeLocations[i] = global::Omnius.Axus.Messages.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult(p_nodeLocations);
        }
    }
}
public sealed partial class AddCloudNodeLocationsParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>.Formatter;
    public static global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>.Empty;

    static AddCloudNodeLocationsParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>.Empty = new global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam(global::System.Array.Empty<global::Omnius.Axus.Messages.NodeLocation>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNodeLocationsCount = 8192;

    public AddCloudNodeLocationsParam(global::Omnius.Axus.Messages.NodeLocation[] nodeLocations)
    {
        if (nodeLocations is null) throw new global::System.ArgumentNullException("nodeLocations");
        if (nodeLocations.Length > 8192) throw new global::System.ArgumentOutOfRangeException("nodeLocations");
        foreach (var n in nodeLocations)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.NodeLocations = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.NodeLocation>(nodeLocations);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in nodeLocations)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.NodeLocation> NodeLocations { get; }

    public static global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam? left, global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam? left, global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.NodeLocations, target.NodeLocations)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.NodeLocations.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.NodeLocations.Count);
                foreach (var n in value.NodeLocations)
                {
                    global::Omnius.Axus.Messages.NodeLocation.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.NodeLocation[] p_nodeLocations = global::System.Array.Empty<global::Omnius.Axus.Messages.NodeLocation>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_nodeLocations = new global::Omnius.Axus.Messages.NodeLocation[length];
                            for (int i = 0; i < p_nodeLocations.Length; i++)
                            {
                                p_nodeLocations[i] = global::Omnius.Axus.Messages.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam(p_nodeLocations);
        }
    }
}
public sealed partial class GetPublishedFilesReportParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesReportParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetPublishedFilesReportParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesReportParam>.Formatter;
    public static global::Omnius.Axus.Remoting.GetPublishedFilesReportParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesReportParam>.Empty;

    static GetPublishedFilesReportParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesReportParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesReportParam>.Empty = new global::Omnius.Axus.Remoting.GetPublishedFilesReportParam(global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxZoneLength = 2147483647;

    public GetPublishedFilesReportParam(global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.GetPublishedFilesReportParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetPublishedFilesReportParam? left, global::Omnius.Axus.Remoting.GetPublishedFilesReportParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetPublishedFilesReportParam? left, global::Omnius.Axus.Remoting.GetPublishedFilesReportParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetPublishedFilesReportParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetPublishedFilesReportParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetPublishedFilesReportParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetPublishedFilesReportParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetPublishedFilesReportParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetPublishedFilesReportParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetPublishedFilesReportParam(p_zone);
        }
    }
}
public sealed partial class GetPublishedFilesReportResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesReportResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetPublishedFilesReportResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesReportResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetPublishedFilesReportResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesReportResult>.Empty;

    static GetPublishedFilesReportResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesReportResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesReportResult>.Empty = new global::Omnius.Axus.Remoting.GetPublishedFilesReportResult(global::System.Array.Empty<global::Omnius.Axus.Messages.PublishedFileReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxPublishedFilesCount = 2147483647;

    public GetPublishedFilesReportResult(global::Omnius.Axus.Messages.PublishedFileReport[] publishedFiles)
    {
        if (publishedFiles is null) throw new global::System.ArgumentNullException("publishedFiles");
        if (publishedFiles.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("publishedFiles");
        foreach (var n in publishedFiles)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.PublishedFiles = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.PublishedFileReport>(publishedFiles);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in publishedFiles)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.PublishedFileReport> PublishedFiles { get; }

    public static global::Omnius.Axus.Remoting.GetPublishedFilesReportResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetPublishedFilesReportResult? left, global::Omnius.Axus.Remoting.GetPublishedFilesReportResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetPublishedFilesReportResult? left, global::Omnius.Axus.Remoting.GetPublishedFilesReportResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetPublishedFilesReportResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetPublishedFilesReportResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetPublishedFilesReportResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.PublishedFiles, target.PublishedFiles)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetPublishedFilesReportResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetPublishedFilesReportResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.PublishedFiles.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.PublishedFiles.Count);
                foreach (var n in value.PublishedFiles)
                {
                    global::Omnius.Axus.Messages.PublishedFileReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetPublishedFilesReportResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.PublishedFileReport[] p_publishedFiles = global::System.Array.Empty<global::Omnius.Axus.Messages.PublishedFileReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_publishedFiles = new global::Omnius.Axus.Messages.PublishedFileReport[length];
                            for (int i = 0; i < p_publishedFiles.Length; i++)
                            {
                                p_publishedFiles[i] = global::Omnius.Axus.Messages.PublishedFileReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetPublishedFilesReportResult(p_publishedFiles);
        }
    }
}
public sealed partial class PublishFileFromStorageParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromStorageParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.PublishFileFromStorageParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromStorageParam>.Formatter;
    public static global::Omnius.Axus.Remoting.PublishFileFromStorageParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromStorageParam>.Empty;

    static PublishFileFromStorageParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromStorageParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromStorageParam>.Empty = new global::Omnius.Axus.Remoting.PublishFileFromStorageParam(global::Omnius.Core.RocketPack.Utf8String.Empty, 0, global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>(), global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxFilePathLength = 2147483647;
    public static readonly int MaxPropertiesCount = 256;
    public static readonly int MaxZoneLength = 2147483647;

    public PublishFileFromStorageParam(global::Omnius.Core.RocketPack.Utf8String filePath, int maxBlockSize, global::Omnius.Axus.Messages.AttachedProperty[] properties, global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (filePath is null) throw new global::System.ArgumentNullException("filePath");
        if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
        if (properties is null) throw new global::System.ArgumentNullException("properties");
        if (properties.Length > 256) throw new global::System.ArgumentOutOfRangeException("properties");
        foreach (var n in properties)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.FilePath = filePath;
        this.MaxBlockSize = maxBlockSize;
        this.Properties = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty>(properties);
        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!filePath.IsEmpty) ___h.Add(filePath.GetHashCode());
            if (maxBlockSize != default) ___h.Add(maxBlockSize.GetHashCode());
            foreach (var n in properties)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String FilePath { get; }
    public int MaxBlockSize { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty> Properties { get; }
    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.PublishFileFromStorageParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.PublishFileFromStorageParam? left, global::Omnius.Axus.Remoting.PublishFileFromStorageParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.PublishFileFromStorageParam? left, global::Omnius.Axus.Remoting.PublishFileFromStorageParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.PublishFileFromStorageParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.PublishFileFromStorageParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.PublishFileFromStorageParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.FilePath != target.FilePath) return false;
        if (this.MaxBlockSize != target.MaxBlockSize) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Properties, target.Properties)) return false;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.PublishFileFromStorageParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.PublishFileFromStorageParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.FilePath != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.FilePath);
            }
            if (value.MaxBlockSize != 0)
            {
                w.Write((uint)2);
                w.Write(value.MaxBlockSize);
            }
            if (value.Properties.Count != 0)
            {
                w.Write((uint)3);
                w.Write((uint)value.Properties.Count);
                foreach (var n in value.Properties)
                {
                    global::Omnius.Axus.Messages.AttachedProperty.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)4);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.PublishFileFromStorageParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_filePath = global::Omnius.Core.RocketPack.Utf8String.Empty;
            int p_maxBlockSize = 0;
            global::Omnius.Axus.Messages.AttachedProperty[] p_properties = global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>();
            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_filePath = r.GetString(2147483647);
                            break;
                        }
                    case 2:
                        {
                            p_maxBlockSize = r.GetInt32();
                            break;
                        }
                    case 3:
                        {
                            var length = r.GetUInt32();
                            p_properties = new global::Omnius.Axus.Messages.AttachedProperty[length];
                            for (int i = 0; i < p_properties.Length; i++)
                            {
                                p_properties[i] = global::Omnius.Axus.Messages.AttachedProperty.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 4:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.PublishFileFromStorageParam(p_filePath, p_maxBlockSize, p_properties, p_zone);
        }
    }
}
public sealed partial class PublishFileFromStorageResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromStorageResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.PublishFileFromStorageResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromStorageResult>.Formatter;
    public static global::Omnius.Axus.Remoting.PublishFileFromStorageResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromStorageResult>.Empty;

    static PublishFileFromStorageResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromStorageResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromStorageResult>.Empty = new global::Omnius.Axus.Remoting.PublishFileFromStorageResult(global::Omnius.Core.Cryptography.OmniHash.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public PublishFileFromStorageResult(global::Omnius.Core.Cryptography.OmniHash hash)
    {
        this.Hash = hash;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (hash != default) ___h.Add(hash.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash Hash { get; }

    public static global::Omnius.Axus.Remoting.PublishFileFromStorageResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.PublishFileFromStorageResult? left, global::Omnius.Axus.Remoting.PublishFileFromStorageResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.PublishFileFromStorageResult? left, global::Omnius.Axus.Remoting.PublishFileFromStorageResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.PublishFileFromStorageResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.PublishFileFromStorageResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.PublishFileFromStorageResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Hash != target.Hash) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.PublishFileFromStorageResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.PublishFileFromStorageResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Hash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.Hash, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.PublishFileFromStorageResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_hash = global::Omnius.Core.Cryptography.OmniHash.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_hash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.PublishFileFromStorageResult(p_hash);
        }
    }
}
public sealed partial class PublishFileFromMemoryParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromMemoryParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.PublishFileFromMemoryParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromMemoryParam>.Formatter;
    public static global::Omnius.Axus.Remoting.PublishFileFromMemoryParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromMemoryParam>.Empty;

    static PublishFileFromMemoryParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromMemoryParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromMemoryParam>.Empty = new global::Omnius.Axus.Remoting.PublishFileFromMemoryParam(global::System.ReadOnlyMemory<byte>.Empty, 0, global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>(), global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxMemoryLength = 33554432;
    public static readonly int MaxPropertiesCount = 256;
    public static readonly int MaxZoneLength = 2147483647;

    public PublishFileFromMemoryParam(global::System.ReadOnlyMemory<byte> memory, int maxBlockSize, global::Omnius.Axus.Messages.AttachedProperty[] properties, global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("memory");
        if (properties is null) throw new global::System.ArgumentNullException("properties");
        if (properties.Length > 256) throw new global::System.ArgumentOutOfRangeException("properties");
        foreach (var n in properties)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.Memory = memory;
        this.MaxBlockSize = maxBlockSize;
        this.Properties = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty>(properties);
        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(memory.Span));
            if (maxBlockSize != default) ___h.Add(maxBlockSize.GetHashCode());
            foreach (var n in properties)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::System.ReadOnlyMemory<byte> Memory { get; }
    public int MaxBlockSize { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty> Properties { get; }
    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.PublishFileFromMemoryParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.PublishFileFromMemoryParam? left, global::Omnius.Axus.Remoting.PublishFileFromMemoryParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.PublishFileFromMemoryParam? left, global::Omnius.Axus.Remoting.PublishFileFromMemoryParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.PublishFileFromMemoryParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.PublishFileFromMemoryParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.PublishFileFromMemoryParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.BytesOperations.Equals(this.Memory.Span, target.Memory.Span)) return false;
        if (this.MaxBlockSize != target.MaxBlockSize) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Properties, target.Properties)) return false;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.PublishFileFromMemoryParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.PublishFileFromMemoryParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (!value.Memory.IsEmpty)
            {
                w.Write((uint)1);
                w.Write(value.Memory.Span);
            }
            if (value.MaxBlockSize != 0)
            {
                w.Write((uint)2);
                w.Write(value.MaxBlockSize);
            }
            if (value.Properties.Count != 0)
            {
                w.Write((uint)3);
                w.Write((uint)value.Properties.Count);
                foreach (var n in value.Properties)
                {
                    global::Omnius.Axus.Messages.AttachedProperty.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)4);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.PublishFileFromMemoryParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::System.ReadOnlyMemory<byte> p_memory = global::System.ReadOnlyMemory<byte>.Empty;
            int p_maxBlockSize = 0;
            global::Omnius.Axus.Messages.AttachedProperty[] p_properties = global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>();
            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_memory = r.GetMemory(33554432);
                            break;
                        }
                    case 2:
                        {
                            p_maxBlockSize = r.GetInt32();
                            break;
                        }
                    case 3:
                        {
                            var length = r.GetUInt32();
                            p_properties = new global::Omnius.Axus.Messages.AttachedProperty[length];
                            for (int i = 0; i < p_properties.Length; i++)
                            {
                                p_properties[i] = global::Omnius.Axus.Messages.AttachedProperty.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 4:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.PublishFileFromMemoryParam(p_memory, p_maxBlockSize, p_properties, p_zone);
        }
    }
}
public sealed partial class PublishFileFromMemoryResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromMemoryResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.PublishFileFromMemoryResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromMemoryResult>.Formatter;
    public static global::Omnius.Axus.Remoting.PublishFileFromMemoryResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromMemoryResult>.Empty;

    static PublishFileFromMemoryResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromMemoryResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFileFromMemoryResult>.Empty = new global::Omnius.Axus.Remoting.PublishFileFromMemoryResult(global::Omnius.Core.Cryptography.OmniHash.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public PublishFileFromMemoryResult(global::Omnius.Core.Cryptography.OmniHash hash)
    {
        this.Hash = hash;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (hash != default) ___h.Add(hash.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash Hash { get; }

    public static global::Omnius.Axus.Remoting.PublishFileFromMemoryResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.PublishFileFromMemoryResult? left, global::Omnius.Axus.Remoting.PublishFileFromMemoryResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.PublishFileFromMemoryResult? left, global::Omnius.Axus.Remoting.PublishFileFromMemoryResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.PublishFileFromMemoryResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.PublishFileFromMemoryResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.PublishFileFromMemoryResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Hash != target.Hash) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.PublishFileFromMemoryResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.PublishFileFromMemoryResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Hash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.Hash, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.PublishFileFromMemoryResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_hash = global::Omnius.Core.Cryptography.OmniHash.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_hash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.PublishFileFromMemoryResult(p_hash);
        }
    }
}
public sealed partial class UnpublishFileFromStorageParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam>.Formatter;
    public static global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam>.Empty;

    static UnpublishFileFromStorageParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam>.Empty = new global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam(global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxFilePathLength = 2147483647;
    public static readonly int MaxZoneLength = 2147483647;

    public UnpublishFileFromStorageParam(global::Omnius.Core.RocketPack.Utf8String filePath, global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (filePath is null) throw new global::System.ArgumentNullException("filePath");
        if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.FilePath = filePath;
        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!filePath.IsEmpty) ___h.Add(filePath.GetHashCode());
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String FilePath { get; }
    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam? left, global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam? left, global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.FilePath != target.FilePath) return false;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.FilePath != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.FilePath);
            }
            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_filePath = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_filePath = r.GetString(2147483647);
                            break;
                        }
                    case 2:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam(p_filePath, p_zone);
        }
    }
}
public sealed partial class UnpublishFileFromMemoryParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam>.Formatter;
    public static global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam>.Empty;

    static UnpublishFileFromMemoryParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam>.Empty = new global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam(global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxZoneLength = 2147483647;

    public UnpublishFileFromMemoryParam(global::Omnius.Core.Cryptography.OmniHash rootHash, global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.RootHash = rootHash;
        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam? left, global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam? left, global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam(p_rootHash, p_zone);
        }
    }
}
public sealed partial class GetSubscribedFilesReportParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam>.Formatter;
    public static global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam>.Empty;

    static GetSubscribedFilesReportParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam>.Empty = new global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam(global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxZoneLength = 2147483647;

    public GetSubscribedFilesReportParam(global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam? left, global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam? left, global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam(p_zone);
        }
    }
}
public sealed partial class GetSubscribedFilesReportResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult>.Empty;

    static GetSubscribedFilesReportResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult>.Empty = new global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult(global::System.Array.Empty<global::Omnius.Axus.Messages.SubscribedFileReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSubscribedFilesCount = 2147483647;

    public GetSubscribedFilesReportResult(global::Omnius.Axus.Messages.SubscribedFileReport[] subscribedFiles)
    {
        if (subscribedFiles is null) throw new global::System.ArgumentNullException("subscribedFiles");
        if (subscribedFiles.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("subscribedFiles");
        foreach (var n in subscribedFiles)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.SubscribedFiles = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.SubscribedFileReport>(subscribedFiles);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in subscribedFiles)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.SubscribedFileReport> SubscribedFiles { get; }

    public static global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult? left, global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult? left, global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.SubscribedFiles, target.SubscribedFiles)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.SubscribedFiles.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.SubscribedFiles.Count);
                foreach (var n in value.SubscribedFiles)
                {
                    global::Omnius.Axus.Messages.SubscribedFileReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.SubscribedFileReport[] p_subscribedFiles = global::System.Array.Empty<global::Omnius.Axus.Messages.SubscribedFileReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_subscribedFiles = new global::Omnius.Axus.Messages.SubscribedFileReport[length];
                            for (int i = 0; i < p_subscribedFiles.Length; i++)
                            {
                                p_subscribedFiles[i] = global::Omnius.Axus.Messages.SubscribedFileReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult(p_subscribedFiles);
        }
    }
}
public sealed partial class SubscribeFileParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeFileParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.SubscribeFileParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeFileParam>.Formatter;
    public static global::Omnius.Axus.Remoting.SubscribeFileParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeFileParam>.Empty;

    static SubscribeFileParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeFileParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeFileParam>.Empty = new global::Omnius.Axus.Remoting.SubscribeFileParam(global::Omnius.Core.Cryptography.OmniHash.Empty, global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>(), global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxPropertiesCount = 256;
    public static readonly int MaxZoneLength = 2147483647;

    public SubscribeFileParam(global::Omnius.Core.Cryptography.OmniHash rootHash, global::Omnius.Axus.Messages.AttachedProperty[] properties, global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (properties is null) throw new global::System.ArgumentNullException("properties");
        if (properties.Length > 256) throw new global::System.ArgumentOutOfRangeException("properties");
        foreach (var n in properties)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.RootHash = rootHash;
        this.Properties = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty>(properties);
        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            foreach (var n in properties)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty> Properties { get; }
    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.SubscribeFileParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.SubscribeFileParam? left, global::Omnius.Axus.Remoting.SubscribeFileParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.SubscribeFileParam? left, global::Omnius.Axus.Remoting.SubscribeFileParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.SubscribeFileParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.SubscribeFileParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.SubscribeFileParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Properties, target.Properties)) return false;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.SubscribeFileParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.SubscribeFileParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.Properties.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.Properties.Count);
                foreach (var n in value.Properties)
                {
                    global::Omnius.Axus.Messages.AttachedProperty.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)3);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.SubscribeFileParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::Omnius.Axus.Messages.AttachedProperty[] p_properties = global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>();
            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_properties = new global::Omnius.Axus.Messages.AttachedProperty[length];
                            for (int i = 0; i < p_properties.Length; i++)
                            {
                                p_properties[i] = global::Omnius.Axus.Messages.AttachedProperty.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 3:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.SubscribeFileParam(p_rootHash, p_properties, p_zone);
        }
    }
}
public sealed partial class UnsubscribeFileParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeFileParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnsubscribeFileParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeFileParam>.Formatter;
    public static global::Omnius.Axus.Remoting.UnsubscribeFileParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeFileParam>.Empty;

    static UnsubscribeFileParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeFileParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeFileParam>.Empty = new global::Omnius.Axus.Remoting.UnsubscribeFileParam(global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxZoneLength = 2147483647;

    public UnsubscribeFileParam(global::Omnius.Core.Cryptography.OmniHash rootHash, global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.RootHash = rootHash;
        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.UnsubscribeFileParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.UnsubscribeFileParam? left, global::Omnius.Axus.Remoting.UnsubscribeFileParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.UnsubscribeFileParam? left, global::Omnius.Axus.Remoting.UnsubscribeFileParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.UnsubscribeFileParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.UnsubscribeFileParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.UnsubscribeFileParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnsubscribeFileParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.UnsubscribeFileParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.UnsubscribeFileParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.UnsubscribeFileParam(p_rootHash, p_zone);
        }
    }
}
public sealed partial class TryExportFileToStorageParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToStorageParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TryExportFileToStorageParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToStorageParam>.Formatter;
    public static global::Omnius.Axus.Remoting.TryExportFileToStorageParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToStorageParam>.Empty;

    static TryExportFileToStorageParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToStorageParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToStorageParam>.Empty = new global::Omnius.Axus.Remoting.TryExportFileToStorageParam(global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxFilePathLength = 2147483647;

    public TryExportFileToStorageParam(global::Omnius.Core.Cryptography.OmniHash rootHash, global::Omnius.Core.RocketPack.Utf8String filePath)
    {
        if (filePath is null) throw new global::System.ArgumentNullException("filePath");
        if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");

        this.RootHash = rootHash;
        this.FilePath = filePath;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            if (!filePath.IsEmpty) ___h.Add(filePath.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public global::Omnius.Core.RocketPack.Utf8String FilePath { get; }

    public static global::Omnius.Axus.Remoting.TryExportFileToStorageParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.TryExportFileToStorageParam? left, global::Omnius.Axus.Remoting.TryExportFileToStorageParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.TryExportFileToStorageParam? left, global::Omnius.Axus.Remoting.TryExportFileToStorageParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.TryExportFileToStorageParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.TryExportFileToStorageParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.TryExportFileToStorageParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (this.FilePath != target.FilePath) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TryExportFileToStorageParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.TryExportFileToStorageParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.FilePath != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.FilePath);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.TryExportFileToStorageParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_filePath = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_filePath = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.TryExportFileToStorageParam(p_rootHash, p_filePath);
        }
    }
}
public sealed partial class TryExportFileToStorageResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToStorageResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TryExportFileToStorageResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToStorageResult>.Formatter;
    public static global::Omnius.Axus.Remoting.TryExportFileToStorageResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToStorageResult>.Empty;

    static TryExportFileToStorageResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToStorageResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToStorageResult>.Empty = new global::Omnius.Axus.Remoting.TryExportFileToStorageResult(false);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TryExportFileToStorageResult(bool success)
    {
        this.Success = success;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (success != default) ___h.Add(success.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public bool Success { get; }

    public static global::Omnius.Axus.Remoting.TryExportFileToStorageResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.TryExportFileToStorageResult? left, global::Omnius.Axus.Remoting.TryExportFileToStorageResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.TryExportFileToStorageResult? left, global::Omnius.Axus.Remoting.TryExportFileToStorageResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.TryExportFileToStorageResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.TryExportFileToStorageResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.TryExportFileToStorageResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Success != target.Success) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TryExportFileToStorageResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.TryExportFileToStorageResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Success != false)
            {
                w.Write((uint)1);
                w.Write(value.Success);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.TryExportFileToStorageResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            bool p_success = false;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_success = r.GetBoolean();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.TryExportFileToStorageResult(p_success);
        }
    }
}
public sealed partial class TryExportFileToMemoryParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToMemoryParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TryExportFileToMemoryParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToMemoryParam>.Formatter;
    public static global::Omnius.Axus.Remoting.TryExportFileToMemoryParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToMemoryParam>.Empty;

    static TryExportFileToMemoryParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToMemoryParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToMemoryParam>.Empty = new global::Omnius.Axus.Remoting.TryExportFileToMemoryParam(global::Omnius.Core.Cryptography.OmniHash.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TryExportFileToMemoryParam(global::Omnius.Core.Cryptography.OmniHash rootHash)
    {
        this.RootHash = rootHash;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }

    public static global::Omnius.Axus.Remoting.TryExportFileToMemoryParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.TryExportFileToMemoryParam? left, global::Omnius.Axus.Remoting.TryExportFileToMemoryParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.TryExportFileToMemoryParam? left, global::Omnius.Axus.Remoting.TryExportFileToMemoryParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.TryExportFileToMemoryParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.TryExportFileToMemoryParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.TryExportFileToMemoryParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TryExportFileToMemoryParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.TryExportFileToMemoryParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.TryExportFileToMemoryParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.TryExportFileToMemoryParam(p_rootHash);
        }
    }
}
public sealed partial class TryExportFileToMemoryResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToMemoryResult>, global::System.IDisposable
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TryExportFileToMemoryResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToMemoryResult>.Formatter;
    public static global::Omnius.Axus.Remoting.TryExportFileToMemoryResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToMemoryResult>.Empty;

    static TryExportFileToMemoryResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToMemoryResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportFileToMemoryResult>.Empty = new global::Omnius.Axus.Remoting.TryExportFileToMemoryResult(null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxMemoryLength = 33554432;

    public TryExportFileToMemoryResult(global::System.Buffers.IMemoryOwner<byte>? memory)
    {
        if (memory is not null && memory.Memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("memory");

        this.Memory = memory;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (memory is not null && !memory.Memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(memory.Memory.Span));
            return ___h.ToHashCode();
        });
    }

    public void Dispose()
    {
        if (this.Memory is not null) this.Memory.Dispose();
    }

    public global::System.Buffers.IMemoryOwner<byte>? Memory { get; }

    public static global::Omnius.Axus.Remoting.TryExportFileToMemoryResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.TryExportFileToMemoryResult? left, global::Omnius.Axus.Remoting.TryExportFileToMemoryResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.TryExportFileToMemoryResult? left, global::Omnius.Axus.Remoting.TryExportFileToMemoryResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.TryExportFileToMemoryResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.TryExportFileToMemoryResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.TryExportFileToMemoryResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if ((this.Memory is null) != (target.Memory is null)) return false;
        if ((this.Memory is not null) && (target.Memory is not null) && !global::Omnius.Core.BytesOperations.Equals(this.Memory.Memory.Span, target.Memory.Memory.Span)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TryExportFileToMemoryResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.TryExportFileToMemoryResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Memory != null)
            {
                w.Write((uint)1);
                w.Write(value.Memory.Memory.Span);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.TryExportFileToMemoryResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::System.Buffers.IMemoryOwner<byte>? p_memory = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_memory = r.GetRecyclableMemory(33554432);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.TryExportFileToMemoryResult(p_memory);
        }
    }
}
public sealed partial class GetPublishedShoutsReportParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam>.Formatter;
    public static global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam>.Empty;

    static GetPublishedShoutsReportParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam>.Empty = new global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam(global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxZoneLength = 2147483647;

    public GetPublishedShoutsReportParam(global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam? left, global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam? left, global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam(p_zone);
        }
    }
}
public sealed partial class GetPublishedShoutsReportResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult>.Empty;

    static GetPublishedShoutsReportResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult>.Empty = new global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult(global::System.Array.Empty<global::Omnius.Axus.Messages.PublishedShoutReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxPublishedShoutsCount = 2147483647;

    public GetPublishedShoutsReportResult(global::Omnius.Axus.Messages.PublishedShoutReport[] publishedShouts)
    {
        if (publishedShouts is null) throw new global::System.ArgumentNullException("publishedShouts");
        if (publishedShouts.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("publishedShouts");
        foreach (var n in publishedShouts)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.PublishedShouts = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.PublishedShoutReport>(publishedShouts);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in publishedShouts)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.PublishedShoutReport> PublishedShouts { get; }

    public static global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult? left, global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult? left, global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.PublishedShouts, target.PublishedShouts)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.PublishedShouts.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.PublishedShouts.Count);
                foreach (var n in value.PublishedShouts)
                {
                    global::Omnius.Axus.Messages.PublishedShoutReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.PublishedShoutReport[] p_publishedShouts = global::System.Array.Empty<global::Omnius.Axus.Messages.PublishedShoutReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_publishedShouts = new global::Omnius.Axus.Messages.PublishedShoutReport[length];
                            for (int i = 0; i < p_publishedShouts.Length; i++)
                            {
                                p_publishedShouts[i] = global::Omnius.Axus.Messages.PublishedShoutReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult(p_publishedShouts);
        }
    }
}
public sealed partial class PublishShoutParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishShoutParam>, global::System.IDisposable
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.PublishShoutParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishShoutParam>.Formatter;
    public static global::Omnius.Axus.Remoting.PublishShoutParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishShoutParam>.Empty;

    static PublishShoutParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishShoutParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishShoutParam>.Empty = new global::Omnius.Axus.Remoting.PublishShoutParam(global::Omnius.Axus.Messages.Shout.Empty, global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>(), global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxPropertiesCount = 256;
    public static readonly int MaxZoneLength = 2147483647;

    public PublishShoutParam(global::Omnius.Axus.Messages.Shout shout, global::Omnius.Axus.Messages.AttachedProperty[] properties, global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (shout is null) throw new global::System.ArgumentNullException("shout");
        if (properties is null) throw new global::System.ArgumentNullException("properties");
        if (properties.Length > 256) throw new global::System.ArgumentOutOfRangeException("properties");
        foreach (var n in properties)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.Shout = shout;
        this.Properties = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty>(properties);
        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (shout != default) ___h.Add(shout.GetHashCode());
            foreach (var n in properties)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public void Dispose()
    {
        this.Shout.Dispose();
    }

    public global::Omnius.Axus.Messages.Shout Shout { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty> Properties { get; }
    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.PublishShoutParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.PublishShoutParam? left, global::Omnius.Axus.Remoting.PublishShoutParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.PublishShoutParam? left, global::Omnius.Axus.Remoting.PublishShoutParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.PublishShoutParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.PublishShoutParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.PublishShoutParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Shout != target.Shout) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Properties, target.Properties)) return false;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.PublishShoutParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.PublishShoutParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Shout != global::Omnius.Axus.Messages.Shout.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Axus.Messages.Shout.Formatter.Serialize(ref w, value.Shout, rank + 1);
            }
            if (value.Properties.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.Properties.Count);
                foreach (var n in value.Properties)
                {
                    global::Omnius.Axus.Messages.AttachedProperty.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)3);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.PublishShoutParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.Shout p_shout = global::Omnius.Axus.Messages.Shout.Empty;
            global::Omnius.Axus.Messages.AttachedProperty[] p_properties = global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>();
            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_shout = global::Omnius.Axus.Messages.Shout.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_properties = new global::Omnius.Axus.Messages.AttachedProperty[length];
                            for (int i = 0; i < p_properties.Length; i++)
                            {
                                p_properties[i] = global::Omnius.Axus.Messages.AttachedProperty.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 3:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.PublishShoutParam(p_shout, p_properties, p_zone);
        }
    }
}
public sealed partial class UnpublishShoutParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishShoutParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnpublishShoutParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishShoutParam>.Formatter;
    public static global::Omnius.Axus.Remoting.UnpublishShoutParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishShoutParam>.Empty;

    static UnpublishShoutParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishShoutParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishShoutParam>.Empty = new global::Omnius.Axus.Remoting.UnpublishShoutParam(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxChannelLength = 2147483647;
    public static readonly int MaxZoneLength = 2147483647;

    public UnpublishShoutParam(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Utf8String channel, global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (channel is null) throw new global::System.ArgumentNullException("channel");
        if (channel.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("channel");
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.Signature = signature;
        this.Channel = channel;
        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (!channel.IsEmpty) ___h.Add(channel.GetHashCode());
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Utf8String Channel { get; }
    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.UnpublishShoutParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.UnpublishShoutParam? left, global::Omnius.Axus.Remoting.UnpublishShoutParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.UnpublishShoutParam? left, global::Omnius.Axus.Remoting.UnpublishShoutParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.UnpublishShoutParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.UnpublishShoutParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.UnpublishShoutParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Channel != target.Channel) return false;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnpublishShoutParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.UnpublishShoutParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Channel != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Channel);
            }
            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)3);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.UnpublishShoutParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_channel = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_channel = r.GetString(2147483647);
                            break;
                        }
                    case 3:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.UnpublishShoutParam(p_signature, p_channel, p_zone);
        }
    }
}
public sealed partial class GetSubscribedShoutsReportParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam>.Formatter;
    public static global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam>.Empty;

    static GetSubscribedShoutsReportParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam>.Empty = new global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam(global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxZoneLength = 2147483647;

    public GetSubscribedShoutsReportParam(global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam? left, global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam? left, global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam(p_zone);
        }
    }
}
public sealed partial class GetSubscribedShoutsReportResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult>.Empty;

    static GetSubscribedShoutsReportResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult>.Empty = new global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult(global::System.Array.Empty<global::Omnius.Axus.Messages.SubscribedShoutReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSubscribedShoutsCount = 2147483647;

    public GetSubscribedShoutsReportResult(global::Omnius.Axus.Messages.SubscribedShoutReport[] subscribedShouts)
    {
        if (subscribedShouts is null) throw new global::System.ArgumentNullException("subscribedShouts");
        if (subscribedShouts.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("subscribedShouts");
        foreach (var n in subscribedShouts)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.SubscribedShouts = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.SubscribedShoutReport>(subscribedShouts);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in subscribedShouts)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.SubscribedShoutReport> SubscribedShouts { get; }

    public static global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult? left, global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult? left, global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.SubscribedShouts, target.SubscribedShouts)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.SubscribedShouts.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.SubscribedShouts.Count);
                foreach (var n in value.SubscribedShouts)
                {
                    global::Omnius.Axus.Messages.SubscribedShoutReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.SubscribedShoutReport[] p_subscribedShouts = global::System.Array.Empty<global::Omnius.Axus.Messages.SubscribedShoutReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_subscribedShouts = new global::Omnius.Axus.Messages.SubscribedShoutReport[length];
                            for (int i = 0; i < p_subscribedShouts.Length; i++)
                            {
                                p_subscribedShouts[i] = global::Omnius.Axus.Messages.SubscribedShoutReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult(p_subscribedShouts);
        }
    }
}
public sealed partial class SubscribeShoutParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeShoutParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.SubscribeShoutParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeShoutParam>.Formatter;
    public static global::Omnius.Axus.Remoting.SubscribeShoutParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeShoutParam>.Empty;

    static SubscribeShoutParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeShoutParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeShoutParam>.Empty = new global::Omnius.Axus.Remoting.SubscribeShoutParam(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty, global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>(), global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxChannelLength = 2147483647;
    public static readonly int MaxPropertiesCount = 256;
    public static readonly int MaxZoneLength = 2147483647;

    public SubscribeShoutParam(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Utf8String channel, global::Omnius.Axus.Messages.AttachedProperty[] properties, global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (channel is null) throw new global::System.ArgumentNullException("channel");
        if (channel.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("channel");
        if (properties is null) throw new global::System.ArgumentNullException("properties");
        if (properties.Length > 256) throw new global::System.ArgumentOutOfRangeException("properties");
        foreach (var n in properties)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.Signature = signature;
        this.Channel = channel;
        this.Properties = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty>(properties);
        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (!channel.IsEmpty) ___h.Add(channel.GetHashCode());
            foreach (var n in properties)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Utf8String Channel { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty> Properties { get; }
    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.SubscribeShoutParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.SubscribeShoutParam? left, global::Omnius.Axus.Remoting.SubscribeShoutParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.SubscribeShoutParam? left, global::Omnius.Axus.Remoting.SubscribeShoutParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.SubscribeShoutParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.SubscribeShoutParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.SubscribeShoutParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Channel != target.Channel) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Properties, target.Properties)) return false;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.SubscribeShoutParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.SubscribeShoutParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Channel != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Channel);
            }
            if (value.Properties.Count != 0)
            {
                w.Write((uint)3);
                w.Write((uint)value.Properties.Count);
                foreach (var n in value.Properties)
                {
                    global::Omnius.Axus.Messages.AttachedProperty.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)4);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.SubscribeShoutParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_channel = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Axus.Messages.AttachedProperty[] p_properties = global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>();
            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_channel = r.GetString(2147483647);
                            break;
                        }
                    case 3:
                        {
                            var length = r.GetUInt32();
                            p_properties = new global::Omnius.Axus.Messages.AttachedProperty[length];
                            for (int i = 0; i < p_properties.Length; i++)
                            {
                                p_properties[i] = global::Omnius.Axus.Messages.AttachedProperty.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 4:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.SubscribeShoutParam(p_signature, p_channel, p_properties, p_zone);
        }
    }
}
public sealed partial class UnsubscribeShoutParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeShoutParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnsubscribeShoutParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeShoutParam>.Formatter;
    public static global::Omnius.Axus.Remoting.UnsubscribeShoutParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeShoutParam>.Empty;

    static UnsubscribeShoutParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeShoutParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeShoutParam>.Empty = new global::Omnius.Axus.Remoting.UnsubscribeShoutParam(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxChannelLength = 2147483647;
    public static readonly int MaxZoneLength = 2147483647;

    public UnsubscribeShoutParam(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Utf8String channel, global::Omnius.Core.RocketPack.Utf8String zone)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (channel is null) throw new global::System.ArgumentNullException("channel");
        if (channel.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("channel");
        if (zone is null) throw new global::System.ArgumentNullException("zone");
        if (zone.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("zone");

        this.Signature = signature;
        this.Channel = channel;
        this.Zone = zone;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (!channel.IsEmpty) ___h.Add(channel.GetHashCode());
            if (!zone.IsEmpty) ___h.Add(zone.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Utf8String Channel { get; }
    public global::Omnius.Core.RocketPack.Utf8String Zone { get; }

    public static global::Omnius.Axus.Remoting.UnsubscribeShoutParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.UnsubscribeShoutParam? left, global::Omnius.Axus.Remoting.UnsubscribeShoutParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.UnsubscribeShoutParam? left, global::Omnius.Axus.Remoting.UnsubscribeShoutParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.UnsubscribeShoutParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.UnsubscribeShoutParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.UnsubscribeShoutParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Channel != target.Channel) return false;
        if (this.Zone != target.Zone) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnsubscribeShoutParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.UnsubscribeShoutParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Channel != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Channel);
            }
            if (value.Zone != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)3);
                w.Write(value.Zone);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.UnsubscribeShoutParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_channel = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_zone = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_channel = r.GetString(2147483647);
                            break;
                        }
                    case 3:
                        {
                            p_zone = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.UnsubscribeShoutParam(p_signature, p_channel, p_zone);
        }
    }
}
public sealed partial class TryExportShoutParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportShoutParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TryExportShoutParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportShoutParam>.Formatter;
    public static global::Omnius.Axus.Remoting.TryExportShoutParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportShoutParam>.Empty;

    static TryExportShoutParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportShoutParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportShoutParam>.Empty = new global::Omnius.Axus.Remoting.TryExportShoutParam(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.RocketPack.Timestamp64.Zero);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxChannelLength = 2147483647;

    public TryExportShoutParam(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Utf8String channel, global::Omnius.Core.RocketPack.Timestamp64 createdTime)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (channel is null) throw new global::System.ArgumentNullException("channel");
        if (channel.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("channel");
        this.Signature = signature;
        this.Channel = channel;
        this.CreatedTime = createdTime;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (!channel.IsEmpty) ___h.Add(channel.GetHashCode());
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Utf8String Channel { get; }
    public global::Omnius.Core.RocketPack.Timestamp64 CreatedTime { get; }

    public static global::Omnius.Axus.Remoting.TryExportShoutParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.TryExportShoutParam? left, global::Omnius.Axus.Remoting.TryExportShoutParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.TryExportShoutParam? left, global::Omnius.Axus.Remoting.TryExportShoutParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.TryExportShoutParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.TryExportShoutParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.TryExportShoutParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Channel != target.Channel) return false;
        if (this.CreatedTime != target.CreatedTime) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TryExportShoutParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.TryExportShoutParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Channel != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Channel);
            }
            if (value.CreatedTime != global::Omnius.Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)3);
                w.Write(value.CreatedTime);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.TryExportShoutParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_channel = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.RocketPack.Timestamp64 p_createdTime = global::Omnius.Core.RocketPack.Timestamp64.Zero;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_channel = r.GetString(2147483647);
                            break;
                        }
                    case 3:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.TryExportShoutParam(p_signature, p_channel, p_createdTime);
        }
    }
}
public sealed partial class TryExportShoutResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportShoutResult>, global::System.IDisposable
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TryExportShoutResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportShoutResult>.Formatter;
    public static global::Omnius.Axus.Remoting.TryExportShoutResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportShoutResult>.Empty;

    static TryExportShoutResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportShoutResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TryExportShoutResult>.Empty = new global::Omnius.Axus.Remoting.TryExportShoutResult(null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TryExportShoutResult(global::Omnius.Axus.Messages.Shout? shout)
    {
        this.Shout = shout;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (shout != default) ___h.Add(shout.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public void Dispose()
    {
        if (this.Shout is not null) this.Shout.Dispose();
    }

    public global::Omnius.Axus.Messages.Shout? Shout { get; }

    public static global::Omnius.Axus.Remoting.TryExportShoutResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.TryExportShoutResult? left, global::Omnius.Axus.Remoting.TryExportShoutResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.TryExportShoutResult? left, global::Omnius.Axus.Remoting.TryExportShoutResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.TryExportShoutResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.TryExportShoutResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.TryExportShoutResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if ((this.Shout is null) != (target.Shout is null)) return false;
        if ((this.Shout is not null) && (target.Shout is not null) && this.Shout != target.Shout) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TryExportShoutResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.TryExportShoutResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Shout != null)
            {
                w.Write((uint)1);
                global::Omnius.Axus.Messages.Shout.Formatter.Serialize(ref w, value.Shout, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.TryExportShoutResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.Shout? p_shout = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_shout = global::Omnius.Axus.Messages.Shout.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.TryExportShoutResult(p_shout);
        }
    }
}
public sealed partial class ServiceConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.ServiceConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.ServiceConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.ServiceConfig>.Formatter;
    public static global::Omnius.Axus.Remoting.ServiceConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.ServiceConfig>.Empty;

    static ServiceConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.ServiceConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.ServiceConfig>.Empty = new global::Omnius.Axus.Remoting.ServiceConfig(null, null, null, null, null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public ServiceConfig(global::Omnius.Axus.Remoting.BandwidthConfig? bandwidth, global::Omnius.Axus.Remoting.I2pConnectorConfig? i2pConnector, global::Omnius.Axus.Remoting.I2pAccepterConfig? i2pAccepter, global::Omnius.Axus.Remoting.TcpConnectorConfig? tcpConnector, global::Omnius.Axus.Remoting.TcpAccepterConfig? tcpAccepter)
    {
        this.Bandwidth = bandwidth;
        this.I2pConnector = i2pConnector;
        this.I2pAccepter = i2pAccepter;
        this.TcpConnector = tcpConnector;
        this.TcpAccepter = tcpAccepter;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (bandwidth != default) ___h.Add(bandwidth.GetHashCode());
            if (i2pConnector != default) ___h.Add(i2pConnector.GetHashCode());
            if (i2pAccepter != default) ___h.Add(i2pAccepter.GetHashCode());
            if (tcpConnector != default) ___h.Add(tcpConnector.GetHashCode());
            if (tcpAccepter != default) ___h.Add(tcpAccepter.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Remoting.BandwidthConfig? Bandwidth { get; }
    public global::Omnius.Axus.Remoting.I2pConnectorConfig? I2pConnector { get; }
    public global::Omnius.Axus.Remoting.I2pAccepterConfig? I2pAccepter { get; }
    public global::Omnius.Axus.Remoting.TcpConnectorConfig? TcpConnector { get; }
    public global::Omnius.Axus.Remoting.TcpAccepterConfig? TcpAccepter { get; }

    public static global::Omnius.Axus.Remoting.ServiceConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.ServiceConfig? left, global::Omnius.Axus.Remoting.ServiceConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.ServiceConfig? left, global::Omnius.Axus.Remoting.ServiceConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.ServiceConfig) return false;
        return this.Equals((global::Omnius.Axus.Remoting.ServiceConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.ServiceConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if ((this.Bandwidth is null) != (target.Bandwidth is null)) return false;
        if ((this.Bandwidth is not null) && (target.Bandwidth is not null) && this.Bandwidth != target.Bandwidth) return false;
        if ((this.I2pConnector is null) != (target.I2pConnector is null)) return false;
        if ((this.I2pConnector is not null) && (target.I2pConnector is not null) && this.I2pConnector != target.I2pConnector) return false;
        if ((this.I2pAccepter is null) != (target.I2pAccepter is null)) return false;
        if ((this.I2pAccepter is not null) && (target.I2pAccepter is not null) && this.I2pAccepter != target.I2pAccepter) return false;
        if ((this.TcpConnector is null) != (target.TcpConnector is null)) return false;
        if ((this.TcpConnector is not null) && (target.TcpConnector is not null) && this.TcpConnector != target.TcpConnector) return false;
        if ((this.TcpAccepter is null) != (target.TcpAccepter is null)) return false;
        if ((this.TcpAccepter is not null) && (target.TcpAccepter is not null) && this.TcpAccepter != target.TcpAccepter) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.ServiceConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.ServiceConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Bandwidth != null)
            {
                w.Write((uint)1);
                global::Omnius.Axus.Remoting.BandwidthConfig.Formatter.Serialize(ref w, value.Bandwidth, rank + 1);
            }
            if (value.I2pConnector != null)
            {
                w.Write((uint)2);
                global::Omnius.Axus.Remoting.I2pConnectorConfig.Formatter.Serialize(ref w, value.I2pConnector, rank + 1);
            }
            if (value.I2pAccepter != null)
            {
                w.Write((uint)3);
                global::Omnius.Axus.Remoting.I2pAccepterConfig.Formatter.Serialize(ref w, value.I2pAccepter, rank + 1);
            }
            if (value.TcpConnector != null)
            {
                w.Write((uint)4);
                global::Omnius.Axus.Remoting.TcpConnectorConfig.Formatter.Serialize(ref w, value.TcpConnector, rank + 1);
            }
            if (value.TcpAccepter != null)
            {
                w.Write((uint)5);
                global::Omnius.Axus.Remoting.TcpAccepterConfig.Formatter.Serialize(ref w, value.TcpAccepter, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.ServiceConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Remoting.BandwidthConfig? p_bandwidth = null;
            global::Omnius.Axus.Remoting.I2pConnectorConfig? p_i2pConnector = null;
            global::Omnius.Axus.Remoting.I2pAccepterConfig? p_i2pAccepter = null;
            global::Omnius.Axus.Remoting.TcpConnectorConfig? p_tcpConnector = null;
            global::Omnius.Axus.Remoting.TcpAccepterConfig? p_tcpAccepter = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_bandwidth = global::Omnius.Axus.Remoting.BandwidthConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_i2pConnector = global::Omnius.Axus.Remoting.I2pConnectorConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 3:
                        {
                            p_i2pAccepter = global::Omnius.Axus.Remoting.I2pAccepterConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 4:
                        {
                            p_tcpConnector = global::Omnius.Axus.Remoting.TcpConnectorConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 5:
                        {
                            p_tcpAccepter = global::Omnius.Axus.Remoting.TcpAccepterConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.ServiceConfig(p_bandwidth, p_i2pConnector, p_i2pAccepter, p_tcpConnector, p_tcpAccepter);
        }
    }
}
public sealed partial class BandwidthConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.BandwidthConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.BandwidthConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.BandwidthConfig>.Formatter;
    public static global::Omnius.Axus.Remoting.BandwidthConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.BandwidthConfig>.Empty;

    static BandwidthConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.BandwidthConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.BandwidthConfig>.Empty = new global::Omnius.Axus.Remoting.BandwidthConfig(0, 0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public BandwidthConfig(int maxSendBytesPerSeconds, int maxReceiveBytesPerSeconds)
    {
        this.MaxSendBytesPerSeconds = maxSendBytesPerSeconds;
        this.MaxReceiveBytesPerSeconds = maxReceiveBytesPerSeconds;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (maxSendBytesPerSeconds != default) ___h.Add(maxSendBytesPerSeconds.GetHashCode());
            if (maxReceiveBytesPerSeconds != default) ___h.Add(maxReceiveBytesPerSeconds.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public int MaxSendBytesPerSeconds { get; }
    public int MaxReceiveBytesPerSeconds { get; }

    public static global::Omnius.Axus.Remoting.BandwidthConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.BandwidthConfig? left, global::Omnius.Axus.Remoting.BandwidthConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.BandwidthConfig? left, global::Omnius.Axus.Remoting.BandwidthConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.BandwidthConfig) return false;
        return this.Equals((global::Omnius.Axus.Remoting.BandwidthConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.BandwidthConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.MaxSendBytesPerSeconds != target.MaxSendBytesPerSeconds) return false;
        if (this.MaxReceiveBytesPerSeconds != target.MaxReceiveBytesPerSeconds) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.BandwidthConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.BandwidthConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.MaxSendBytesPerSeconds != 0)
            {
                w.Write((uint)1);
                w.Write(value.MaxSendBytesPerSeconds);
            }
            if (value.MaxReceiveBytesPerSeconds != 0)
            {
                w.Write((uint)2);
                w.Write(value.MaxReceiveBytesPerSeconds);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.BandwidthConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            int p_maxSendBytesPerSeconds = 0;
            int p_maxReceiveBytesPerSeconds = 0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_maxSendBytesPerSeconds = r.GetInt32();
                            break;
                        }
                    case 2:
                        {
                            p_maxReceiveBytesPerSeconds = r.GetInt32();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.BandwidthConfig(p_maxSendBytesPerSeconds, p_maxReceiveBytesPerSeconds);
        }
    }
}
public sealed partial class I2pConnectorConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.I2pConnectorConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.I2pConnectorConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.I2pConnectorConfig>.Formatter;
    public static global::Omnius.Axus.Remoting.I2pConnectorConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.I2pConnectorConfig>.Empty;

    static I2pConnectorConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.I2pConnectorConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.I2pConnectorConfig>.Empty = new global::Omnius.Axus.Remoting.I2pConnectorConfig(false, global::Omnius.Core.Net.OmniAddress.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public I2pConnectorConfig(bool isEnabled, global::Omnius.Core.Net.OmniAddress samBridgeAddress)
    {
        if (samBridgeAddress is null) throw new global::System.ArgumentNullException("samBridgeAddress");

        this.IsEnabled = isEnabled;
        this.SamBridgeAddress = samBridgeAddress;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (isEnabled != default) ___h.Add(isEnabled.GetHashCode());
            if (samBridgeAddress != default) ___h.Add(samBridgeAddress.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public bool IsEnabled { get; }
    public global::Omnius.Core.Net.OmniAddress SamBridgeAddress { get; }

    public static global::Omnius.Axus.Remoting.I2pConnectorConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.I2pConnectorConfig? left, global::Omnius.Axus.Remoting.I2pConnectorConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.I2pConnectorConfig? left, global::Omnius.Axus.Remoting.I2pConnectorConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.I2pConnectorConfig) return false;
        return this.Equals((global::Omnius.Axus.Remoting.I2pConnectorConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.I2pConnectorConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.IsEnabled != target.IsEnabled) return false;
        if (this.SamBridgeAddress != target.SamBridgeAddress) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.I2pConnectorConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.I2pConnectorConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.IsEnabled != false)
            {
                w.Write((uint)1);
                w.Write(value.IsEnabled);
            }
            if (value.SamBridgeAddress != global::Omnius.Core.Net.OmniAddress.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, value.SamBridgeAddress, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.I2pConnectorConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            bool p_isEnabled = false;
            global::Omnius.Core.Net.OmniAddress p_samBridgeAddress = global::Omnius.Core.Net.OmniAddress.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_isEnabled = r.GetBoolean();
                            break;
                        }
                    case 2:
                        {
                            p_samBridgeAddress = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.I2pConnectorConfig(p_isEnabled, p_samBridgeAddress);
        }
    }
}
public sealed partial class I2pAccepterConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.I2pAccepterConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.I2pAccepterConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.I2pAccepterConfig>.Formatter;
    public static global::Omnius.Axus.Remoting.I2pAccepterConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.I2pAccepterConfig>.Empty;

    static I2pAccepterConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.I2pAccepterConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.I2pAccepterConfig>.Empty = new global::Omnius.Axus.Remoting.I2pAccepterConfig(false, global::Omnius.Core.Net.OmniAddress.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public I2pAccepterConfig(bool isEnabled, global::Omnius.Core.Net.OmniAddress samBridgeAddress)
    {
        if (samBridgeAddress is null) throw new global::System.ArgumentNullException("samBridgeAddress");

        this.IsEnabled = isEnabled;
        this.SamBridgeAddress = samBridgeAddress;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (isEnabled != default) ___h.Add(isEnabled.GetHashCode());
            if (samBridgeAddress != default) ___h.Add(samBridgeAddress.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public bool IsEnabled { get; }
    public global::Omnius.Core.Net.OmniAddress SamBridgeAddress { get; }

    public static global::Omnius.Axus.Remoting.I2pAccepterConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.I2pAccepterConfig? left, global::Omnius.Axus.Remoting.I2pAccepterConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.I2pAccepterConfig? left, global::Omnius.Axus.Remoting.I2pAccepterConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.I2pAccepterConfig) return false;
        return this.Equals((global::Omnius.Axus.Remoting.I2pAccepterConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.I2pAccepterConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.IsEnabled != target.IsEnabled) return false;
        if (this.SamBridgeAddress != target.SamBridgeAddress) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.I2pAccepterConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.I2pAccepterConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.IsEnabled != false)
            {
                w.Write((uint)1);
                w.Write(value.IsEnabled);
            }
            if (value.SamBridgeAddress != global::Omnius.Core.Net.OmniAddress.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, value.SamBridgeAddress, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.I2pAccepterConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            bool p_isEnabled = false;
            global::Omnius.Core.Net.OmniAddress p_samBridgeAddress = global::Omnius.Core.Net.OmniAddress.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_isEnabled = r.GetBoolean();
                            break;
                        }
                    case 2:
                        {
                            p_samBridgeAddress = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.I2pAccepterConfig(p_isEnabled, p_samBridgeAddress);
        }
    }
}
public sealed partial class TcpConnectorConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpConnectorConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TcpConnectorConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpConnectorConfig>.Formatter;
    public static global::Omnius.Axus.Remoting.TcpConnectorConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpConnectorConfig>.Empty;

    static TcpConnectorConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpConnectorConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpConnectorConfig>.Empty = new global::Omnius.Axus.Remoting.TcpConnectorConfig(false, null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TcpConnectorConfig(bool isEnabled, global::Omnius.Axus.Remoting.TcpProxyConfig? proxy)
    {
        this.IsEnabled = isEnabled;
        this.Proxy = proxy;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (isEnabled != default) ___h.Add(isEnabled.GetHashCode());
            if (proxy != default) ___h.Add(proxy.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public bool IsEnabled { get; }
    public global::Omnius.Axus.Remoting.TcpProxyConfig? Proxy { get; }

    public static global::Omnius.Axus.Remoting.TcpConnectorConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.TcpConnectorConfig? left, global::Omnius.Axus.Remoting.TcpConnectorConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.TcpConnectorConfig? left, global::Omnius.Axus.Remoting.TcpConnectorConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.TcpConnectorConfig) return false;
        return this.Equals((global::Omnius.Axus.Remoting.TcpConnectorConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.TcpConnectorConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.IsEnabled != target.IsEnabled) return false;
        if ((this.Proxy is null) != (target.Proxy is null)) return false;
        if ((this.Proxy is not null) && (target.Proxy is not null) && this.Proxy != target.Proxy) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TcpConnectorConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.TcpConnectorConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.IsEnabled != false)
            {
                w.Write((uint)1);
                w.Write(value.IsEnabled);
            }
            if (value.Proxy != null)
            {
                w.Write((uint)2);
                global::Omnius.Axus.Remoting.TcpProxyConfig.Formatter.Serialize(ref w, value.Proxy, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.TcpConnectorConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            bool p_isEnabled = false;
            global::Omnius.Axus.Remoting.TcpProxyConfig? p_proxy = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_isEnabled = r.GetBoolean();
                            break;
                        }
                    case 2:
                        {
                            p_proxy = global::Omnius.Axus.Remoting.TcpProxyConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.TcpConnectorConfig(p_isEnabled, p_proxy);
        }
    }
}
public sealed partial class TcpProxyConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpProxyConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TcpProxyConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpProxyConfig>.Formatter;
    public static global::Omnius.Axus.Remoting.TcpProxyConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpProxyConfig>.Empty;

    static TcpProxyConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpProxyConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpProxyConfig>.Empty = new global::Omnius.Axus.Remoting.TcpProxyConfig((global::Omnius.Axus.Remoting.TcpProxyType)0, global::Omnius.Core.Net.OmniAddress.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TcpProxyConfig(global::Omnius.Axus.Remoting.TcpProxyType type, global::Omnius.Core.Net.OmniAddress address)
    {
        if (address is null) throw new global::System.ArgumentNullException("address");

        this.Type = type;
        this.Address = address;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (type != default) ___h.Add(type.GetHashCode());
            if (address != default) ___h.Add(address.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Remoting.TcpProxyType Type { get; }
    public global::Omnius.Core.Net.OmniAddress Address { get; }

    public static global::Omnius.Axus.Remoting.TcpProxyConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.TcpProxyConfig? left, global::Omnius.Axus.Remoting.TcpProxyConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.TcpProxyConfig? left, global::Omnius.Axus.Remoting.TcpProxyConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.TcpProxyConfig) return false;
        return this.Equals((global::Omnius.Axus.Remoting.TcpProxyConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.TcpProxyConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Type != target.Type) return false;
        if (this.Address != target.Address) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TcpProxyConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.TcpProxyConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Type != (global::Omnius.Axus.Remoting.TcpProxyType)0)
            {
                w.Write((uint)1);
                w.Write((ulong)value.Type);
            }
            if (value.Address != global::Omnius.Core.Net.OmniAddress.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, value.Address, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.TcpProxyConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Remoting.TcpProxyType p_type = (global::Omnius.Axus.Remoting.TcpProxyType)0;
            global::Omnius.Core.Net.OmniAddress p_address = global::Omnius.Core.Net.OmniAddress.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_type = (global::Omnius.Axus.Remoting.TcpProxyType)r.GetUInt64();
                            break;
                        }
                    case 2:
                        {
                            p_address = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.TcpProxyConfig(p_type, p_address);
        }
    }
}
public sealed partial class TcpAccepterConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpAccepterConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TcpAccepterConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpAccepterConfig>.Formatter;
    public static global::Omnius.Axus.Remoting.TcpAccepterConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpAccepterConfig>.Empty;

    static TcpAccepterConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpAccepterConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.TcpAccepterConfig>.Empty = new global::Omnius.Axus.Remoting.TcpAccepterConfig(false, false, global::Omnius.Core.Net.OmniAddress.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TcpAccepterConfig(bool isEnabled, bool useUpnp, global::Omnius.Core.Net.OmniAddress listenAddress)
    {
        if (listenAddress is null) throw new global::System.ArgumentNullException("listenAddress");

        this.IsEnabled = isEnabled;
        this.UseUpnp = useUpnp;
        this.ListenAddress = listenAddress;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (isEnabled != default) ___h.Add(isEnabled.GetHashCode());
            if (useUpnp != default) ___h.Add(useUpnp.GetHashCode());
            if (listenAddress != default) ___h.Add(listenAddress.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public bool IsEnabled { get; }
    public bool UseUpnp { get; }
    public global::Omnius.Core.Net.OmniAddress ListenAddress { get; }

    public static global::Omnius.Axus.Remoting.TcpAccepterConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.TcpAccepterConfig? left, global::Omnius.Axus.Remoting.TcpAccepterConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.TcpAccepterConfig? left, global::Omnius.Axus.Remoting.TcpAccepterConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.TcpAccepterConfig) return false;
        return this.Equals((global::Omnius.Axus.Remoting.TcpAccepterConfig)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.TcpAccepterConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.IsEnabled != target.IsEnabled) return false;
        if (this.UseUpnp != target.UseUpnp) return false;
        if (this.ListenAddress != target.ListenAddress) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.TcpAccepterConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.TcpAccepterConfig value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.IsEnabled != false)
            {
                w.Write((uint)1);
                w.Write(value.IsEnabled);
            }
            if (value.UseUpnp != false)
            {
                w.Write((uint)2);
                w.Write(value.UseUpnp);
            }
            if (value.ListenAddress != global::Omnius.Core.Net.OmniAddress.Empty)
            {
                w.Write((uint)3);
                global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, value.ListenAddress, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.TcpAccepterConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            bool p_isEnabled = false;
            bool p_useUpnp = false;
            global::Omnius.Core.Net.OmniAddress p_listenAddress = global::Omnius.Core.Net.OmniAddress.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_isEnabled = r.GetBoolean();
                            break;
                        }
                    case 2:
                        {
                            p_useUpnp = r.GetBoolean();
                            break;
                        }
                    case 3:
                        {
                            p_listenAddress = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.TcpAccepterConfig(p_isEnabled, p_useUpnp, p_listenAddress);
        }
    }
}
public interface IAxusService
{
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetConfigResult> GetConfigAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask SetConfigAsync(global::Omnius.Axus.Remoting.SetConfigParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetSessionsReportResult> GetSessionsReportAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetMyNodeLocationResult> GetMyNodeLocationAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult> GetCloudNodeLocationsAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask AddCloudNodeLocationsAsync(global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetPublishedFilesReportResult> GetPublishedFilesReportAsync(global::Omnius.Axus.Remoting.GetPublishedFilesReportParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.PublishFileFromStorageResult> PublishFileFromStorageAsync(global::Omnius.Axus.Remoting.PublishFileFromStorageParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.PublishFileFromMemoryResult> PublishFileFromMemoryAsync(global::Omnius.Axus.Remoting.PublishFileFromMemoryParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask UnpublishFileFromStorageAsync(global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask UnpublishFileFromMemoryAsync(global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult> GetSubscribedFilesReportAsync(global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask SubscribeFileAsync(global::Omnius.Axus.Remoting.SubscribeFileParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask UnsubscribeFileAsync(global::Omnius.Axus.Remoting.UnsubscribeFileParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.TryExportFileToStorageResult> TryExportFileToStorageAsync(global::Omnius.Axus.Remoting.TryExportFileToStorageParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.TryExportFileToMemoryResult> TryExportFileToMemoryAsync(global::Omnius.Axus.Remoting.TryExportFileToMemoryParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult> GetPublishedShoutsReportAsync(global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask PublishShoutAsync(global::Omnius.Axus.Remoting.PublishShoutParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask UnpublishShoutAsync(global::Omnius.Axus.Remoting.UnpublishShoutParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult> GetSubscribedShoutsReportAsync(global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask SubscribeShoutAsync(global::Omnius.Axus.Remoting.SubscribeShoutParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask UnsubscribeShoutAsync(global::Omnius.Axus.Remoting.UnsubscribeShoutParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.TryExportShoutResult> TryExportShoutAsync(global::Omnius.Axus.Remoting.TryExportShoutParam param, global::System.Threading.CancellationToken cancellationToken = default);
}
public class AxusServiceRemoting
{
    public class Client<TError> : global::Omnius.Axus.Remoting.IAxusService
        where TError : global::Omnius.Core.RocketPack.IRocketMessage<TError>
    {
        private readonly global::Omnius.Core.RocketPack.Remoting.IRocketRemotingCallerFactory<TError> _callerFactory;
        private readonly global::Omnius.Core.IBytesPool _bytesPool;
        public Client(global::Omnius.Core.RocketPack.Remoting.IRocketRemotingCallerFactory<TError> callerFactory, global::Omnius.Core.IBytesPool bytesPool)
        {
            _callerFactory = callerFactory;
            _bytesPool = bytesPool;
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetConfigResult> GetConfigAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(1, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetConfigResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask SetConfigAsync(global::Omnius.Axus.Remoting.SetConfigParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(2, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.SetConfigParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetSessionsReportResult> GetSessionsReportAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(3, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetSessionsReportResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetMyNodeLocationResult> GetMyNodeLocationAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(4, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult> GetCloudNodeLocationsAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(5, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask AddCloudNodeLocationsAsync(global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(6, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetPublishedFilesReportResult> GetPublishedFilesReportAsync(global::Omnius.Axus.Remoting.GetPublishedFilesReportParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(7, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetPublishedFilesReportParam, global::Omnius.Axus.Remoting.GetPublishedFilesReportResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.PublishFileFromStorageResult> PublishFileFromStorageAsync(global::Omnius.Axus.Remoting.PublishFileFromStorageParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(8, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.PublishFileFromStorageParam, global::Omnius.Axus.Remoting.PublishFileFromStorageResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.PublishFileFromMemoryResult> PublishFileFromMemoryAsync(global::Omnius.Axus.Remoting.PublishFileFromMemoryParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(9, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.PublishFileFromMemoryParam, global::Omnius.Axus.Remoting.PublishFileFromMemoryResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask UnpublishFileFromStorageAsync(global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(10, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask UnpublishFileFromMemoryAsync(global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(11, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult> GetSubscribedFilesReportAsync(global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(12, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam, global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask SubscribeFileAsync(global::Omnius.Axus.Remoting.SubscribeFileParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(13, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.SubscribeFileParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask UnsubscribeFileAsync(global::Omnius.Axus.Remoting.UnsubscribeFileParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(14, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.UnsubscribeFileParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.TryExportFileToStorageResult> TryExportFileToStorageAsync(global::Omnius.Axus.Remoting.TryExportFileToStorageParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(15, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.TryExportFileToStorageParam, global::Omnius.Axus.Remoting.TryExportFileToStorageResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.TryExportFileToMemoryResult> TryExportFileToMemoryAsync(global::Omnius.Axus.Remoting.TryExportFileToMemoryParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(16, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.TryExportFileToMemoryParam, global::Omnius.Axus.Remoting.TryExportFileToMemoryResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult> GetPublishedShoutsReportAsync(global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(17, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam, global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask PublishShoutAsync(global::Omnius.Axus.Remoting.PublishShoutParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(18, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.PublishShoutParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask UnpublishShoutAsync(global::Omnius.Axus.Remoting.UnpublishShoutParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(19, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.UnpublishShoutParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult> GetSubscribedShoutsReportAsync(global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(20, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam, global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask SubscribeShoutAsync(global::Omnius.Axus.Remoting.SubscribeShoutParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(21, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.SubscribeShoutParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask UnsubscribeShoutAsync(global::Omnius.Axus.Remoting.UnsubscribeShoutParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(22, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.UnsubscribeShoutParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.TryExportShoutResult> TryExportShoutAsync(global::Omnius.Axus.Remoting.TryExportShoutParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(23, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.TryExportShoutParam, global::Omnius.Axus.Remoting.TryExportShoutResult>(param, cancellationToken);
        }
    }
    public class Server<TError>
        where TError : global::Omnius.Core.RocketPack.IRocketMessage<TError>
    {
        private readonly global::Omnius.Axus.Remoting.IAxusService _service;
        private readonly global::Omnius.Core.RocketPack.Remoting.IRocketRemotingListenerFactory<TError> _listenerFactory;
        private readonly global::Omnius.Core.IBytesPool _bytesPool;
        public Server(global::Omnius.Axus.Remoting.IAxusService service, global::Omnius.Core.RocketPack.Remoting.IRocketRemotingListenerFactory<TError> listenerFactory, global::Omnius.Core.IBytesPool bytesPool)
        {
            _service = service;
            _listenerFactory = listenerFactory;
            _bytesPool = bytesPool;
        }
        public async global::System.Threading.Tasks.Task EventLoopAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await using var listener = await _listenerFactory.CreateAsync(cancellationToken);
                switch (listener.FunctionId)
                {
                    case 1:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetConfigResult>(_service.GetConfigAsync, cancellationToken);
                        }
                        break;
                    case 2:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.SetConfigParam>(_service.SetConfigAsync, cancellationToken);
                        }
                        break;
                    case 3:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetSessionsReportResult>(_service.GetSessionsReportAsync, cancellationToken);
                        }
                        break;
                    case 4:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>(_service.GetMyNodeLocationAsync, cancellationToken);
                        }
                        break;
                    case 5:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>(_service.GetCloudNodeLocationsAsync, cancellationToken);
                        }
                        break;
                    case 6:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>(_service.AddCloudNodeLocationsAsync, cancellationToken);
                        }
                        break;
                    case 7:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetPublishedFilesReportParam, global::Omnius.Axus.Remoting.GetPublishedFilesReportResult>(_service.GetPublishedFilesReportAsync, cancellationToken);
                        }
                        break;
                    case 8:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.PublishFileFromStorageParam, global::Omnius.Axus.Remoting.PublishFileFromStorageResult>(_service.PublishFileFromStorageAsync, cancellationToken);
                        }
                        break;
                    case 9:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.PublishFileFromMemoryParam, global::Omnius.Axus.Remoting.PublishFileFromMemoryResult>(_service.PublishFileFromMemoryAsync, cancellationToken);
                        }
                        break;
                    case 10:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.UnpublishFileFromStorageParam>(_service.UnpublishFileFromStorageAsync, cancellationToken);
                        }
                        break;
                    case 11:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.UnpublishFileFromMemoryParam>(_service.UnpublishFileFromMemoryAsync, cancellationToken);
                        }
                        break;
                    case 12:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetSubscribedFilesReportParam, global::Omnius.Axus.Remoting.GetSubscribedFilesReportResult>(_service.GetSubscribedFilesReportAsync, cancellationToken);
                        }
                        break;
                    case 13:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.SubscribeFileParam>(_service.SubscribeFileAsync, cancellationToken);
                        }
                        break;
                    case 14:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.UnsubscribeFileParam>(_service.UnsubscribeFileAsync, cancellationToken);
                        }
                        break;
                    case 15:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.TryExportFileToStorageParam, global::Omnius.Axus.Remoting.TryExportFileToStorageResult>(_service.TryExportFileToStorageAsync, cancellationToken);
                        }
                        break;
                    case 16:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.TryExportFileToMemoryParam, global::Omnius.Axus.Remoting.TryExportFileToMemoryResult>(_service.TryExportFileToMemoryAsync, cancellationToken);
                        }
                        break;
                    case 17:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetPublishedShoutsReportParam, global::Omnius.Axus.Remoting.GetPublishedShoutsReportResult>(_service.GetPublishedShoutsReportAsync, cancellationToken);
                        }
                        break;
                    case 18:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.PublishShoutParam>(_service.PublishShoutAsync, cancellationToken);
                        }
                        break;
                    case 19:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.UnpublishShoutParam>(_service.UnpublishShoutAsync, cancellationToken);
                        }
                        break;
                    case 20:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetSubscribedShoutsReportParam, global::Omnius.Axus.Remoting.GetSubscribedShoutsReportResult>(_service.GetSubscribedShoutsReportAsync, cancellationToken);
                        }
                        break;
                    case 21:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.SubscribeShoutParam>(_service.SubscribeShoutAsync, cancellationToken);
                        }
                        break;
                    case 22:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.UnsubscribeShoutParam>(_service.UnsubscribeShoutAsync, cancellationToken);
                        }
                        break;
                    case 23:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.TryExportShoutParam, global::Omnius.Axus.Remoting.TryExportShoutResult>(_service.TryExportShoutAsync, cancellationToken);
                        }
                        break;
                }
            }
        }
    }
}
