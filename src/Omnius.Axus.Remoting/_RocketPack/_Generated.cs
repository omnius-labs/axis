// <auto-generated/>
#nullable enable

namespace Omnius.Axus.Remoting;

public sealed partial class GetConfigResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetConfigResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetConfigResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetConfigResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetConfigResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetConfigResult>.Empty;

    static GetConfigResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetConfigResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetConfigResult>.Empty = new global::Omnius.Axus.Remoting.GetConfigResult(global::Omnius.Axus.Messages.ServiceConfig.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public GetConfigResult(global::Omnius.Axus.Messages.ServiceConfig config)
    {
        if (config is null) throw new global::System.ArgumentNullException("config");

        this.Config = config;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (config != default) ___h.Add(config.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Messages.ServiceConfig Config { get; }

    public static global::Omnius.Axus.Remoting.GetConfigResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetConfigResult? left, global::Omnius.Axus.Remoting.GetConfigResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetConfigResult? left, global::Omnius.Axus.Remoting.GetConfigResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetConfigResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetConfigResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetConfigResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Config != target.Config) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetConfigResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetConfigResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Config != global::Omnius.Axus.Messages.ServiceConfig.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Axus.Messages.ServiceConfig.Formatter.Serialize(ref w, value.Config, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetConfigResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.ServiceConfig p_config = global::Omnius.Axus.Messages.ServiceConfig.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_config = global::Omnius.Axus.Messages.ServiceConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetConfigResult(p_config);
        }
    }
}
public sealed partial class SetConfigParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SetConfigParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.SetConfigParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SetConfigParam>.Formatter;
    public static global::Omnius.Axus.Remoting.SetConfigParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SetConfigParam>.Empty;

    static SetConfigParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SetConfigParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SetConfigParam>.Empty = new global::Omnius.Axus.Remoting.SetConfigParam(global::Omnius.Axus.Messages.ServiceConfig.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public SetConfigParam(global::Omnius.Axus.Messages.ServiceConfig config)
    {
        if (config is null) throw new global::System.ArgumentNullException("config");

        this.Config = config;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (config != default) ___h.Add(config.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Messages.ServiceConfig Config { get; }

    public static global::Omnius.Axus.Remoting.SetConfigParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.SetConfigParam? left, global::Omnius.Axus.Remoting.SetConfigParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.SetConfigParam? left, global::Omnius.Axus.Remoting.SetConfigParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.SetConfigParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.SetConfigParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.SetConfigParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Config != target.Config) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.SetConfigParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.SetConfigParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Config != global::Omnius.Axus.Messages.ServiceConfig.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Axus.Messages.ServiceConfig.Formatter.Serialize(ref w, value.Config, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.SetConfigParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.ServiceConfig p_config = global::Omnius.Axus.Messages.ServiceConfig.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_config = global::Omnius.Axus.Messages.ServiceConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.SetConfigParam(p_config);
        }
    }
}
public sealed partial class GetSessionsResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSessionsResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSessionsResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSessionsResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetSessionsResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSessionsResult>.Empty;

    static GetSessionsResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSessionsResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSessionsResult>.Empty = new global::Omnius.Axus.Remoting.GetSessionsResult(global::System.Array.Empty<global::Omnius.Axus.Messages.SessionReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSessionsCount = 2147483647;

    public GetSessionsResult(global::Omnius.Axus.Messages.SessionReport[] sessions)
    {
        if (sessions is null) throw new global::System.ArgumentNullException("sessions");
        if (sessions.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("sessions");
        foreach (var n in sessions)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.Sessions = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.SessionReport>(sessions);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in sessions)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.SessionReport> Sessions { get; }

    public static global::Omnius.Axus.Remoting.GetSessionsResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetSessionsResult? left, global::Omnius.Axus.Remoting.GetSessionsResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetSessionsResult? left, global::Omnius.Axus.Remoting.GetSessionsResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetSessionsResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetSessionsResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetSessionsResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Sessions, target.Sessions)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSessionsResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetSessionsResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Sessions.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Sessions.Count);
                foreach (var n in value.Sessions)
                {
                    global::Omnius.Axus.Messages.SessionReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetSessionsResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.SessionReport[] p_sessions = global::System.Array.Empty<global::Omnius.Axus.Messages.SessionReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_sessions = new global::Omnius.Axus.Messages.SessionReport[length];
                            for (int i = 0; i < p_sessions.Length; i++)
                            {
                                p_sessions[i] = global::Omnius.Axus.Messages.SessionReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetSessionsResult(p_sessions);
        }
    }
}
public sealed partial class GetMyNodeLocationResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetMyNodeLocationResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetMyNodeLocationResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>.Empty;

    static GetMyNodeLocationResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>.Empty = new global::Omnius.Axus.Remoting.GetMyNodeLocationResult(global::Omnius.Axus.Messages.NodeLocation.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public GetMyNodeLocationResult(global::Omnius.Axus.Messages.NodeLocation nodeLocation)
    {
        if (nodeLocation is null) throw new global::System.ArgumentNullException("nodeLocation");

        this.NodeLocation = nodeLocation;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (nodeLocation != default) ___h.Add(nodeLocation.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Messages.NodeLocation NodeLocation { get; }

    public static global::Omnius.Axus.Remoting.GetMyNodeLocationResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetMyNodeLocationResult? left, global::Omnius.Axus.Remoting.GetMyNodeLocationResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetMyNodeLocationResult? left, global::Omnius.Axus.Remoting.GetMyNodeLocationResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetMyNodeLocationResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetMyNodeLocationResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetMyNodeLocationResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.NodeLocation != target.NodeLocation) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetMyNodeLocationResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.NodeLocation != global::Omnius.Axus.Messages.NodeLocation.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Axus.Messages.NodeLocation.Formatter.Serialize(ref w, value.NodeLocation, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetMyNodeLocationResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.NodeLocation p_nodeLocation = global::Omnius.Axus.Messages.NodeLocation.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_nodeLocation = global::Omnius.Axus.Messages.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetMyNodeLocationResult(p_nodeLocation);
        }
    }
}
public sealed partial class GetCloudNodeLocationsResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>.Empty;

    static GetCloudNodeLocationsResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>.Empty = new global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult(global::System.Array.Empty<global::Omnius.Axus.Messages.NodeLocation>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNodeLocationsCount = 2147483647;

    public GetCloudNodeLocationsResult(global::Omnius.Axus.Messages.NodeLocation[] nodeLocations)
    {
        if (nodeLocations is null) throw new global::System.ArgumentNullException("nodeLocations");
        if (nodeLocations.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("nodeLocations");
        foreach (var n in nodeLocations)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.NodeLocations = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.NodeLocation>(nodeLocations);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in nodeLocations)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.NodeLocation> NodeLocations { get; }

    public static global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult? left, global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult? left, global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.NodeLocations, target.NodeLocations)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.NodeLocations.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.NodeLocations.Count);
                foreach (var n in value.NodeLocations)
                {
                    global::Omnius.Axus.Messages.NodeLocation.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.NodeLocation[] p_nodeLocations = global::System.Array.Empty<global::Omnius.Axus.Messages.NodeLocation>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_nodeLocations = new global::Omnius.Axus.Messages.NodeLocation[length];
                            for (int i = 0; i < p_nodeLocations.Length; i++)
                            {
                                p_nodeLocations[i] = global::Omnius.Axus.Messages.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult(p_nodeLocations);
        }
    }
}
public sealed partial class AddCloudNodeLocationsParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>.Formatter;
    public static global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>.Empty;

    static AddCloudNodeLocationsParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>.Empty = new global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam(global::System.Array.Empty<global::Omnius.Axus.Messages.NodeLocation>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNodeLocationsCount = 2147483647;

    public AddCloudNodeLocationsParam(global::Omnius.Axus.Messages.NodeLocation[] nodeLocations)
    {
        if (nodeLocations is null) throw new global::System.ArgumentNullException("nodeLocations");
        if (nodeLocations.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("nodeLocations");
        foreach (var n in nodeLocations)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.NodeLocations = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.NodeLocation>(nodeLocations);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in nodeLocations)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.NodeLocation> NodeLocations { get; }

    public static global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam? left, global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam? left, global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.NodeLocations, target.NodeLocations)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.NodeLocations.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.NodeLocations.Count);
                foreach (var n in value.NodeLocations)
                {
                    global::Omnius.Axus.Messages.NodeLocation.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.NodeLocation[] p_nodeLocations = global::System.Array.Empty<global::Omnius.Axus.Messages.NodeLocation>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_nodeLocations = new global::Omnius.Axus.Messages.NodeLocation[length];
                            for (int i = 0; i < p_nodeLocations.Length; i++)
                            {
                                p_nodeLocations[i] = global::Omnius.Axus.Messages.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam(p_nodeLocations);
        }
    }
}
public sealed partial class GetPublishedFilesParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetPublishedFilesParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesParam>.Formatter;
    public static global::Omnius.Axus.Remoting.GetPublishedFilesParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesParam>.Empty;

    static GetPublishedFilesParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesParam>.Empty = new global::Omnius.Axus.Remoting.GetPublishedFilesParam(null, null, null, null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public GetPublishedFilesParam(global::Omnius.Axus.Messages.GetPublishedFilesMatcher? matcher, global::Omnius.Axus.Messages.GetPublishedFilesDirection? direction, long? offset, long? limit)
    {
        this.Matcher = matcher;
        this.Direction = direction;
        this.Offset = offset;
        this.Limit = limit;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (matcher != default) ___h.Add(matcher.GetHashCode());
            if (direction != default) ___h.Add(direction.GetHashCode());
            if (offset != default) ___h.Add(offset.GetHashCode());
            if (limit != default) ___h.Add(limit.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Messages.GetPublishedFilesMatcher? Matcher { get; }
    public global::Omnius.Axus.Messages.GetPublishedFilesDirection? Direction { get; }
    public long? Offset { get; }
    public long? Limit { get; }

    public static global::Omnius.Axus.Remoting.GetPublishedFilesParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetPublishedFilesParam? left, global::Omnius.Axus.Remoting.GetPublishedFilesParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetPublishedFilesParam? left, global::Omnius.Axus.Remoting.GetPublishedFilesParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetPublishedFilesParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetPublishedFilesParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetPublishedFilesParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if ((this.Matcher is null) != (target.Matcher is null)) return false;
        if ((this.Matcher is not null) && (target.Matcher is not null) && this.Matcher != target.Matcher) return false;
        if ((this.Direction is null) != (target.Direction is null)) return false;
        if ((this.Direction is not null) && (target.Direction is not null) && this.Direction != target.Direction) return false;
        if (this.Offset != target.Offset) return false;
        if (this.Limit != target.Limit) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetPublishedFilesParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetPublishedFilesParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Matcher != null)
            {
                w.Write((uint)1);
                global::Omnius.Axus.Messages.GetPublishedFilesMatcher.Formatter.Serialize(ref w, value.Matcher, rank + 1);
            }
            if (value.Direction != null)
            {
                w.Write((uint)2);
                global::Omnius.Axus.Messages.GetPublishedFilesDirection.Formatter.Serialize(ref w, value.Direction, rank + 1);
            }
            if (value.Offset != null)
            {
                w.Write((uint)3);
                w.Write(value.Offset.Value);
            }
            if (value.Limit != null)
            {
                w.Write((uint)4);
                w.Write(value.Limit.Value);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetPublishedFilesParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.GetPublishedFilesMatcher? p_matcher = null;
            global::Omnius.Axus.Messages.GetPublishedFilesDirection? p_direction = null;
            long? p_offset = null;
            long? p_limit = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_matcher = global::Omnius.Axus.Messages.GetPublishedFilesMatcher.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_direction = global::Omnius.Axus.Messages.GetPublishedFilesDirection.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 3:
                        {
                            p_offset = r.GetInt64();
                            break;
                        }
                    case 4:
                        {
                            p_limit = r.GetInt64();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetPublishedFilesParam(p_matcher, p_direction, p_offset, p_limit);
        }
    }
}
public sealed partial class GetPublishedFilesResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetPublishedFilesResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetPublishedFilesResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesResult>.Empty;

    static GetPublishedFilesResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetPublishedFilesResult>.Empty = new global::Omnius.Axus.Remoting.GetPublishedFilesResult(global::System.Array.Empty<global::Omnius.Axus.Messages.PublishedFileReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxPublishedFilesCount = 2147483647;

    public GetPublishedFilesResult(global::Omnius.Axus.Messages.PublishedFileReport[] publishedFiles)
    {
        if (publishedFiles is null) throw new global::System.ArgumentNullException("publishedFiles");
        if (publishedFiles.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("publishedFiles");
        foreach (var n in publishedFiles)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.PublishedFiles = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.PublishedFileReport>(publishedFiles);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in publishedFiles)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.PublishedFileReport> PublishedFiles { get; }

    public static global::Omnius.Axus.Remoting.GetPublishedFilesResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetPublishedFilesResult? left, global::Omnius.Axus.Remoting.GetPublishedFilesResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetPublishedFilesResult? left, global::Omnius.Axus.Remoting.GetPublishedFilesResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetPublishedFilesResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetPublishedFilesResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetPublishedFilesResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.PublishedFiles, target.PublishedFiles)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetPublishedFilesResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetPublishedFilesResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.PublishedFiles.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.PublishedFiles.Count);
                foreach (var n in value.PublishedFiles)
                {
                    global::Omnius.Axus.Messages.PublishedFileReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetPublishedFilesResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.PublishedFileReport[] p_publishedFiles = global::System.Array.Empty<global::Omnius.Axus.Messages.PublishedFileReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_publishedFiles = new global::Omnius.Axus.Messages.PublishedFileReport[length];
                            for (int i = 0; i < p_publishedFiles.Length; i++)
                            {
                                p_publishedFiles[i] = global::Omnius.Axus.Messages.PublishedFileReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetPublishedFilesResult(p_publishedFiles);
        }
    }
}
public sealed partial class PublishFilesParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFilesParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.PublishFilesParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFilesParam>.Formatter;
    public static global::Omnius.Axus.Remoting.PublishFilesParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFilesParam>.Empty;

    static PublishFilesParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFilesParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.PublishFilesParam>.Empty = new global::Omnius.Axus.Remoting.PublishFilesParam(global::System.Array.Empty<global::Omnius.Core.RocketPack.Utf8String>(), 0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxFilePathCount = 2147483647;

    public PublishFilesParam(global::Omnius.Core.RocketPack.Utf8String[] filePath, int maxBlockSize)
    {
        if (filePath is null) throw new global::System.ArgumentNullException("filePath");
        if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
        foreach (var n in filePath)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
            if (n.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("n");
        }
        this.FilePath = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.RocketPack.Utf8String>(filePath);
        this.MaxBlockSize = maxBlockSize;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in filePath)
            {
                if (!n.IsEmpty) ___h.Add(n.GetHashCode());
            }
            if (maxBlockSize != default) ___h.Add(maxBlockSize.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.RocketPack.Utf8String> FilePath { get; }
    public int MaxBlockSize { get; }

    public static global::Omnius.Axus.Remoting.PublishFilesParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.PublishFilesParam? left, global::Omnius.Axus.Remoting.PublishFilesParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.PublishFilesParam? left, global::Omnius.Axus.Remoting.PublishFilesParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.PublishFilesParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.PublishFilesParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.PublishFilesParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.FilePath, target.FilePath)) return false;
        if (this.MaxBlockSize != target.MaxBlockSize) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.PublishFilesParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.PublishFilesParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.FilePath.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.FilePath.Count);
                foreach (var n in value.FilePath)
                {
                    w.Write(n);
                }
            }
            if (value.MaxBlockSize != 0)
            {
                w.Write((uint)2);
                w.Write(value.MaxBlockSize);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.PublishFilesParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String[] p_filePath = global::System.Array.Empty<global::Omnius.Core.RocketPack.Utf8String>();
            int p_maxBlockSize = 0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_filePath = new global::Omnius.Core.RocketPack.Utf8String[length];
                            for (int i = 0; i < p_filePath.Length; i++)
                            {
                                p_filePath[i] = r.GetString(2147483647);
                            }
                            break;
                        }
                    case 2:
                        {
                            p_maxBlockSize = r.GetInt32();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.PublishFilesParam(p_filePath, p_maxBlockSize);
        }
    }
}
public sealed partial class UnpublishFilesParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFilesParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnpublishFilesParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFilesParam>.Formatter;
    public static global::Omnius.Axus.Remoting.UnpublishFilesParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFilesParam>.Empty;

    static UnpublishFilesParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFilesParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnpublishFilesParam>.Empty = new global::Omnius.Axus.Remoting.UnpublishFilesParam(global::System.Array.Empty<global::Omnius.Core.RocketPack.Utf8String>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxFilePathCount = 2147483647;

    public UnpublishFilesParam(global::Omnius.Core.RocketPack.Utf8String[] filePath)
    {
        if (filePath is null) throw new global::System.ArgumentNullException("filePath");
        if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
        foreach (var n in filePath)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
            if (n.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("n");
        }

        this.FilePath = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.RocketPack.Utf8String>(filePath);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in filePath)
            {
                if (!n.IsEmpty) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.RocketPack.Utf8String> FilePath { get; }

    public static global::Omnius.Axus.Remoting.UnpublishFilesParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.UnpublishFilesParam? left, global::Omnius.Axus.Remoting.UnpublishFilesParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.UnpublishFilesParam? left, global::Omnius.Axus.Remoting.UnpublishFilesParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.UnpublishFilesParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.UnpublishFilesParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.UnpublishFilesParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.FilePath, target.FilePath)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnpublishFilesParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.UnpublishFilesParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.FilePath.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.FilePath.Count);
                foreach (var n in value.FilePath)
                {
                    w.Write(n);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.UnpublishFilesParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String[] p_filePath = global::System.Array.Empty<global::Omnius.Core.RocketPack.Utf8String>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_filePath = new global::Omnius.Core.RocketPack.Utf8String[length];
                            for (int i = 0; i < p_filePath.Length; i++)
                            {
                                p_filePath[i] = r.GetString(2147483647);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.UnpublishFilesParam(p_filePath);
        }
    }
}
public sealed partial class GetSubscribedFilesParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSubscribedFilesParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesParam>.Formatter;
    public static global::Omnius.Axus.Remoting.GetSubscribedFilesParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesParam>.Empty;

    static GetSubscribedFilesParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesParam>.Empty = new global::Omnius.Axus.Remoting.GetSubscribedFilesParam(null, null, null, null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public GetSubscribedFilesParam(global::Omnius.Axus.Messages.GetSubscribedFilesMatcher? matcher, global::Omnius.Axus.Messages.GetSubscribedFilesDirection? direction, long? offset, long? limit)
    {
        this.Matcher = matcher;
        this.Direction = direction;
        this.Offset = offset;
        this.Limit = limit;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (matcher != default) ___h.Add(matcher.GetHashCode());
            if (direction != default) ___h.Add(direction.GetHashCode());
            if (offset != default) ___h.Add(offset.GetHashCode());
            if (limit != default) ___h.Add(limit.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Messages.GetSubscribedFilesMatcher? Matcher { get; }
    public global::Omnius.Axus.Messages.GetSubscribedFilesDirection? Direction { get; }
    public long? Offset { get; }
    public long? Limit { get; }

    public static global::Omnius.Axus.Remoting.GetSubscribedFilesParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetSubscribedFilesParam? left, global::Omnius.Axus.Remoting.GetSubscribedFilesParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetSubscribedFilesParam? left, global::Omnius.Axus.Remoting.GetSubscribedFilesParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetSubscribedFilesParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetSubscribedFilesParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetSubscribedFilesParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if ((this.Matcher is null) != (target.Matcher is null)) return false;
        if ((this.Matcher is not null) && (target.Matcher is not null) && this.Matcher != target.Matcher) return false;
        if ((this.Direction is null) != (target.Direction is null)) return false;
        if ((this.Direction is not null) && (target.Direction is not null) && this.Direction != target.Direction) return false;
        if (this.Offset != target.Offset) return false;
        if (this.Limit != target.Limit) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSubscribedFilesParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetSubscribedFilesParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Matcher != null)
            {
                w.Write((uint)1);
                global::Omnius.Axus.Messages.GetSubscribedFilesMatcher.Formatter.Serialize(ref w, value.Matcher, rank + 1);
            }
            if (value.Direction != null)
            {
                w.Write((uint)2);
                global::Omnius.Axus.Messages.GetSubscribedFilesDirection.Formatter.Serialize(ref w, value.Direction, rank + 1);
            }
            if (value.Offset != null)
            {
                w.Write((uint)3);
                w.Write(value.Offset.Value);
            }
            if (value.Limit != null)
            {
                w.Write((uint)4);
                w.Write(value.Limit.Value);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetSubscribedFilesParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.GetSubscribedFilesMatcher? p_matcher = null;
            global::Omnius.Axus.Messages.GetSubscribedFilesDirection? p_direction = null;
            long? p_offset = null;
            long? p_limit = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_matcher = global::Omnius.Axus.Messages.GetSubscribedFilesMatcher.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_direction = global::Omnius.Axus.Messages.GetSubscribedFilesDirection.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 3:
                        {
                            p_offset = r.GetInt64();
                            break;
                        }
                    case 4:
                        {
                            p_limit = r.GetInt64();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetSubscribedFilesParam(p_matcher, p_direction, p_offset, p_limit);
        }
    }
}
public sealed partial class GetSubscribedFilesResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSubscribedFilesResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesResult>.Formatter;
    public static global::Omnius.Axus.Remoting.GetSubscribedFilesResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesResult>.Empty;

    static GetSubscribedFilesResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.GetSubscribedFilesResult>.Empty = new global::Omnius.Axus.Remoting.GetSubscribedFilesResult(global::System.Array.Empty<global::Omnius.Axus.Messages.SubscribedFileReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSubscribedFilesCount = 2147483647;

    public GetSubscribedFilesResult(global::Omnius.Axus.Messages.SubscribedFileReport[] subscribedFiles)
    {
        if (subscribedFiles is null) throw new global::System.ArgumentNullException("subscribedFiles");
        if (subscribedFiles.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("subscribedFiles");
        foreach (var n in subscribedFiles)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.SubscribedFiles = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.SubscribedFileReport>(subscribedFiles);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in subscribedFiles)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.SubscribedFileReport> SubscribedFiles { get; }

    public static global::Omnius.Axus.Remoting.GetSubscribedFilesResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.GetSubscribedFilesResult? left, global::Omnius.Axus.Remoting.GetSubscribedFilesResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.GetSubscribedFilesResult? left, global::Omnius.Axus.Remoting.GetSubscribedFilesResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.GetSubscribedFilesResult) return false;
        return this.Equals((global::Omnius.Axus.Remoting.GetSubscribedFilesResult)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.GetSubscribedFilesResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.SubscribedFiles, target.SubscribedFiles)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.GetSubscribedFilesResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.GetSubscribedFilesResult value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.SubscribedFiles.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.SubscribedFiles.Count);
                foreach (var n in value.SubscribedFiles)
                {
                    global::Omnius.Axus.Messages.SubscribedFileReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.GetSubscribedFilesResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.SubscribedFileReport[] p_subscribedFiles = global::System.Array.Empty<global::Omnius.Axus.Messages.SubscribedFileReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_subscribedFiles = new global::Omnius.Axus.Messages.SubscribedFileReport[length];
                            for (int i = 0; i < p_subscribedFiles.Length; i++)
                            {
                                p_subscribedFiles[i] = global::Omnius.Axus.Messages.SubscribedFileReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.GetSubscribedFilesResult(p_subscribedFiles);
        }
    }
}
public sealed partial class SubscribeFilesParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeFilesParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.SubscribeFilesParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeFilesParam>.Formatter;
    public static global::Omnius.Axus.Remoting.SubscribeFilesParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeFilesParam>.Empty;

    static SubscribeFilesParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeFilesParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.SubscribeFilesParam>.Empty = new global::Omnius.Axus.Remoting.SubscribeFilesParam(global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniHash>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxRootHashesCount = 2147483647;

    public SubscribeFilesParam(global::Omnius.Core.Cryptography.OmniHash[] rootHashes)
    {
        if (rootHashes is null) throw new global::System.ArgumentNullException("rootHashes");
        if (rootHashes.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("rootHashes");

        this.RootHashes = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniHash>(rootHashes);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in rootHashes)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniHash> RootHashes { get; }

    public static global::Omnius.Axus.Remoting.SubscribeFilesParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.SubscribeFilesParam? left, global::Omnius.Axus.Remoting.SubscribeFilesParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.SubscribeFilesParam? left, global::Omnius.Axus.Remoting.SubscribeFilesParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.SubscribeFilesParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.SubscribeFilesParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.SubscribeFilesParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.RootHashes, target.RootHashes)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.SubscribeFilesParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.SubscribeFilesParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHashes.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.RootHashes.Count);
                foreach (var n in value.RootHashes)
                {
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.SubscribeFilesParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash[] p_rootHashes = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniHash>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_rootHashes = new global::Omnius.Core.Cryptography.OmniHash[length];
                            for (int i = 0; i < p_rootHashes.Length; i++)
                            {
                                p_rootHashes[i] = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.SubscribeFilesParam(p_rootHashes);
        }
    }
}
public sealed partial class UnsubscribeFileParam : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeFileParam>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnsubscribeFileParam> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeFileParam>.Formatter;
    public static global::Omnius.Axus.Remoting.UnsubscribeFileParam Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeFileParam>.Empty;

    static UnsubscribeFileParam()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeFileParam>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Remoting.UnsubscribeFileParam>.Empty = new global::Omnius.Axus.Remoting.UnsubscribeFileParam(global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniHash>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxRootHashesCount = 2147483647;

    public UnsubscribeFileParam(global::Omnius.Core.Cryptography.OmniHash[] rootHashes)
    {
        if (rootHashes is null) throw new global::System.ArgumentNullException("rootHashes");
        if (rootHashes.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("rootHashes");

        this.RootHashes = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniHash>(rootHashes);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in rootHashes)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniHash> RootHashes { get; }

    public static global::Omnius.Axus.Remoting.UnsubscribeFileParam Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Remoting.UnsubscribeFileParam? left, global::Omnius.Axus.Remoting.UnsubscribeFileParam? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Remoting.UnsubscribeFileParam? left, global::Omnius.Axus.Remoting.UnsubscribeFileParam? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Remoting.UnsubscribeFileParam) return false;
        return this.Equals((global::Omnius.Axus.Remoting.UnsubscribeFileParam)other);
    }
    public bool Equals(global::Omnius.Axus.Remoting.UnsubscribeFileParam? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.RootHashes, target.RootHashes)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Remoting.UnsubscribeFileParam>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Remoting.UnsubscribeFileParam value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHashes.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.RootHashes.Count);
                foreach (var n in value.RootHashes)
                {
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Remoting.UnsubscribeFileParam Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash[] p_rootHashes = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniHash>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_rootHashes = new global::Omnius.Core.Cryptography.OmniHash[length];
                            for (int i = 0; i < p_rootHashes.Length; i++)
                            {
                                p_rootHashes[i] = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Remoting.UnsubscribeFileParam(p_rootHashes);
        }
    }
}
public interface IAxusService
{
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetConfigResult> GetConfigAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask SetConfigAsync(global::Omnius.Axus.Remoting.SetConfigParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetSessionsResult> GetSessionsAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetMyNodeLocationResult> GetMyNodeLocationAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult> GetCloudNodeLocationsAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask AddCloudNodeLocationsAsync(global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetPublishedFilesResult> GetPublishedFilesAsync(global::Omnius.Axus.Remoting.GetPublishedFilesParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask PublishFilesAsync(global::Omnius.Axus.Remoting.PublishFilesParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask UnpublishFilesAsync(global::Omnius.Axus.Remoting.UnpublishFilesParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetSubscribedFilesResult> GetSubscribedFilesAsync(global::Omnius.Axus.Remoting.GetSubscribedFilesParam param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask SubscribeFilesAsync(global::Omnius.Axus.Remoting.SubscribeFilesParam param, global::System.Threading.CancellationToken cancellationToken = default);
}
public class AxusServiceRemoting
{
    public class Client<TError> : global::Omnius.Axus.Remoting.IAxusService
        where TError : global::Omnius.Core.RocketPack.IRocketMessage<TError>
    {
        private readonly global::Omnius.Core.RocketPack.Remoting.IRocketRemotingCallerFactory<TError> _callerFactory;
        private readonly global::Omnius.Core.IBytesPool _bytesPool;
        public Client(global::Omnius.Core.RocketPack.Remoting.IRocketRemotingCallerFactory<TError> callerFactory, global::Omnius.Core.IBytesPool bytesPool)
        {
            _callerFactory = callerFactory;
            _bytesPool = bytesPool;
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetConfigResult> GetConfigAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(1, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetConfigResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask SetConfigAsync(global::Omnius.Axus.Remoting.SetConfigParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(2, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.SetConfigParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetSessionsResult> GetSessionsAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(3, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetSessionsResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetMyNodeLocationResult> GetMyNodeLocationAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(4, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult> GetCloudNodeLocationsAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(5, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask AddCloudNodeLocationsAsync(global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(6, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetPublishedFilesResult> GetPublishedFilesAsync(global::Omnius.Axus.Remoting.GetPublishedFilesParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(7, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetPublishedFilesParam, global::Omnius.Axus.Remoting.GetPublishedFilesResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask PublishFilesAsync(global::Omnius.Axus.Remoting.PublishFilesParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(8, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.PublishFilesParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask UnpublishFilesAsync(global::Omnius.Axus.Remoting.UnpublishFilesParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(9, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.UnpublishFilesParam>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axus.Remoting.GetSubscribedFilesResult> GetSubscribedFilesAsync(global::Omnius.Axus.Remoting.GetSubscribedFilesParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(10, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axus.Remoting.GetSubscribedFilesParam, global::Omnius.Axus.Remoting.GetSubscribedFilesResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask SubscribeFilesAsync(global::Omnius.Axus.Remoting.SubscribeFilesParam param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(11, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axus.Remoting.SubscribeFilesParam>(param, cancellationToken);
        }
    }
    public class Server<TError>
        where TError : global::Omnius.Core.RocketPack.IRocketMessage<TError>
    {
        private readonly global::Omnius.Axus.Remoting.IAxusService _service;
        private readonly global::Omnius.Core.RocketPack.Remoting.IRocketRemotingListenerFactory<TError> _listenerFactory;
        private readonly global::Omnius.Core.IBytesPool _bytesPool;
        public Server(global::Omnius.Axus.Remoting.IAxusService service, global::Omnius.Core.RocketPack.Remoting.IRocketRemotingListenerFactory<TError> listenerFactory, global::Omnius.Core.IBytesPool bytesPool)
        {
            _service = service;
            _listenerFactory = listenerFactory;
            _bytesPool = bytesPool;
        }
        public async global::System.Threading.Tasks.Task EventLoopAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await using var listener = await _listenerFactory.CreateAsync(cancellationToken);
                switch (listener.FunctionId)
                {
                    case 1:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetConfigResult>(_service.GetConfigAsync, cancellationToken);
                        }
                        break;
                    case 2:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.SetConfigParam>(_service.SetConfigAsync, cancellationToken);
                        }
                        break;
                    case 3:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetSessionsResult>(_service.GetSessionsAsync, cancellationToken);
                        }
                        break;
                    case 4:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetMyNodeLocationResult>(_service.GetMyNodeLocationAsync, cancellationToken);
                        }
                        break;
                    case 5:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetCloudNodeLocationsResult>(_service.GetCloudNodeLocationsAsync, cancellationToken);
                        }
                        break;
                    case 6:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.AddCloudNodeLocationsParam>(_service.AddCloudNodeLocationsAsync, cancellationToken);
                        }
                        break;
                    case 7:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetPublishedFilesParam, global::Omnius.Axus.Remoting.GetPublishedFilesResult>(_service.GetPublishedFilesAsync, cancellationToken);
                        }
                        break;
                    case 8:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.PublishFilesParam>(_service.PublishFilesAsync, cancellationToken);
                        }
                        break;
                    case 9:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.UnpublishFilesParam>(_service.UnpublishFilesAsync, cancellationToken);
                        }
                        break;
                    case 10:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axus.Remoting.GetSubscribedFilesParam, global::Omnius.Axus.Remoting.GetSubscribedFilesResult>(_service.GetSubscribedFilesAsync, cancellationToken);
                        }
                        break;
                    case 11:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axus.Remoting.SubscribeFilesParam>(_service.SubscribeFilesAsync, cancellationToken);
                        }
                        break;
                    case 12:
                        {
                        }
                        break;
                }
            }
        }
    }
}
