// <auto-generated/>
#nullable enable

namespace Omnius.Axis.Intaractors.Models;

public enum UploadingFileState : byte
{
    Unknown = 0,
    Waiting = 1,
    Encoding = 2,
    Completed = 3,
}
public enum DownloadingFileState : byte
{
    Unknown = 0,
    Downloading = 1,
    Decoding = 2,
    Completed = 3,
}
public sealed partial class Profile : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.Profile>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Intaractors.Models.Profile> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.Profile>.Formatter;
    public static global::Omnius.Axis.Intaractors.Models.Profile Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.Profile>.Empty;

    static Profile()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.Profile>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.Profile>.Empty = new global::Omnius.Axis.Intaractors.Models.Profile(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Timestamp.Zero, global::Omnius.Axis.Intaractors.Models.ProfileContent.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public Profile(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Timestamp createdTime, global::Omnius.Axis.Intaractors.Models.ProfileContent content)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (content is null) throw new global::System.ArgumentNullException("content");

        this.Signature = signature;
        this.CreatedTime = createdTime;
        this.Content = content;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            if (content != default) ___h.Add(content.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Timestamp CreatedTime { get; }
    public global::Omnius.Axis.Intaractors.Models.ProfileContent Content { get; }

    public static global::Omnius.Axis.Intaractors.Models.Profile Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Intaractors.Models.Profile? left, global::Omnius.Axis.Intaractors.Models.Profile? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Intaractors.Models.Profile? left, global::Omnius.Axis.Intaractors.Models.Profile? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Intaractors.Models.Profile) return false;
        return this.Equals((global::Omnius.Axis.Intaractors.Models.Profile)other);
    }
    public bool Equals(global::Omnius.Axis.Intaractors.Models.Profile? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.CreatedTime != target.CreatedTime) return false;
        if (this.Content != target.Content) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Intaractors.Models.Profile>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Intaractors.Models.Profile value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.CreatedTime != global::Omnius.Core.RocketPack.Timestamp.Zero)
            {
                w.Write((uint)2);
                w.Write(value.CreatedTime);
            }
            if (value.Content != global::Omnius.Axis.Intaractors.Models.ProfileContent.Empty)
            {
                w.Write((uint)3);
                global::Omnius.Axis.Intaractors.Models.ProfileContent.Formatter.Serialize(ref w, value.Content, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Intaractors.Models.Profile Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Timestamp p_createdTime = global::Omnius.Core.RocketPack.Timestamp.Zero;
            global::Omnius.Axis.Intaractors.Models.ProfileContent p_content = global::Omnius.Axis.Intaractors.Models.ProfileContent.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_createdTime = r.GetTimestamp();
                            break;
                        }
                    case 3:
                        {
                            p_content = global::Omnius.Axis.Intaractors.Models.ProfileContent.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Intaractors.Models.Profile(p_signature, p_createdTime, p_content);
        }
    }
}
public sealed partial class ProfileContent : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfileContent>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Intaractors.Models.ProfileContent> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfileContent>.Formatter;
    public static global::Omnius.Axis.Intaractors.Models.ProfileContent Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfileContent>.Empty;

    static ProfileContent()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfileContent>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfileContent>.Empty = new global::Omnius.Axis.Intaractors.Models.ProfileContent(global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), global::System.Array.Empty<global::Omnius.Axis.Intaractors.Models.Seed>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxTrustedSignaturesCount = 1024;
    public static readonly int MaxBlockedSignaturesCount = 1024;
    public static readonly int MaxSeedsCount = 262144;

    public ProfileContent(global::Omnius.Core.Cryptography.OmniSignature[] trustedSignatures, global::Omnius.Core.Cryptography.OmniSignature[] blockedSignatures, global::Omnius.Axis.Intaractors.Models.Seed[] seeds)
    {
        if (trustedSignatures is null) throw new global::System.ArgumentNullException("trustedSignatures");
        if (trustedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("trustedSignatures");
        foreach (var n in trustedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (blockedSignatures is null) throw new global::System.ArgumentNullException("blockedSignatures");
        if (blockedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("blockedSignatures");
        foreach (var n in blockedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (seeds is null) throw new global::System.ArgumentNullException("seeds");
        if (seeds.Length > 262144) throw new global::System.ArgumentOutOfRangeException("seeds");
        foreach (var n in seeds)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.TrustedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(trustedSignatures);
        this.BlockedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(blockedSignatures);
        this.Seeds = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Intaractors.Models.Seed>(seeds);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in trustedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in blockedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in seeds)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> TrustedSignatures { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> BlockedSignatures { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Intaractors.Models.Seed> Seeds { get; }

    public static global::Omnius.Axis.Intaractors.Models.ProfileContent Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Intaractors.Models.ProfileContent? left, global::Omnius.Axis.Intaractors.Models.ProfileContent? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Intaractors.Models.ProfileContent? left, global::Omnius.Axis.Intaractors.Models.ProfileContent? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Intaractors.Models.ProfileContent) return false;
        return this.Equals((global::Omnius.Axis.Intaractors.Models.ProfileContent)other);
    }
    public bool Equals(global::Omnius.Axis.Intaractors.Models.ProfileContent? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.TrustedSignatures, target.TrustedSignatures)) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.BlockedSignatures, target.BlockedSignatures)) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Seeds, target.Seeds)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Intaractors.Models.ProfileContent>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Intaractors.Models.ProfileContent value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.TrustedSignatures.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.TrustedSignatures.Count);
                foreach (var n in value.TrustedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.BlockedSignatures.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.BlockedSignatures.Count);
                foreach (var n in value.BlockedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.Seeds.Count != 0)
            {
                w.Write((uint)3);
                w.Write((uint)value.Seeds.Count);
                foreach (var n in value.Seeds)
                {
                    global::Omnius.Axis.Intaractors.Models.Seed.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Intaractors.Models.ProfileContent Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature[] p_trustedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
            global::Omnius.Core.Cryptography.OmniSignature[] p_blockedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
            global::Omnius.Axis.Intaractors.Models.Seed[] p_seeds = global::System.Array.Empty<global::Omnius.Axis.Intaractors.Models.Seed>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_trustedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_trustedSignatures.Length; i++)
                            {
                                p_trustedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_blockedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_blockedSignatures.Length; i++)
                            {
                                p_blockedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 3:
                        {
                            var length = r.GetUInt32();
                            p_seeds = new global::Omnius.Axis.Intaractors.Models.Seed[length];
                            for (int i = 0; i < p_seeds.Length; i++)
                            {
                                p_seeds[i] = global::Omnius.Axis.Intaractors.Models.Seed.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Intaractors.Models.ProfileContent(p_trustedSignatures, p_blockedSignatures, p_seeds);
        }
    }
}
public sealed partial class Seed : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.Seed>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Intaractors.Models.Seed> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.Seed>.Formatter;
    public static global::Omnius.Axis.Intaractors.Models.Seed Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.Seed>.Empty;

    static Seed()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.Seed>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.Seed>.Empty = new global::Omnius.Axis.Intaractors.Models.Seed(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty, 0, global::Omnius.Core.RocketPack.Timestamp.Zero);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNameLength = 256;

    public Seed(global::Omnius.Core.Cryptography.OmniHash rootHash, string name, ulong size, global::Omnius.Core.RocketPack.Timestamp createdTime)
    {
        if (name is null) throw new global::System.ArgumentNullException("name");
        if (name.Length > 256) throw new global::System.ArgumentOutOfRangeException("name");
        this.RootHash = rootHash;
        this.Name = name;
        this.Size = size;
        this.CreatedTime = createdTime;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            if (name != default) ___h.Add(name.GetHashCode());
            if (size != default) ___h.Add(size.GetHashCode());
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public string Name { get; }
    public ulong Size { get; }
    public global::Omnius.Core.RocketPack.Timestamp CreatedTime { get; }

    public static global::Omnius.Axis.Intaractors.Models.Seed Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Intaractors.Models.Seed? left, global::Omnius.Axis.Intaractors.Models.Seed? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Intaractors.Models.Seed? left, global::Omnius.Axis.Intaractors.Models.Seed? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Intaractors.Models.Seed) return false;
        return this.Equals((global::Omnius.Axis.Intaractors.Models.Seed)other);
    }
    public bool Equals(global::Omnius.Axis.Intaractors.Models.Seed? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (this.Name != target.Name) return false;
        if (this.Size != target.Size) return false;
        if (this.CreatedTime != target.CreatedTime) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Intaractors.Models.Seed>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Intaractors.Models.Seed value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.Name != string.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Name);
            }
            if (value.Size != 0)
            {
                w.Write((uint)3);
                w.Write(value.Size);
            }
            if (value.CreatedTime != global::Omnius.Core.RocketPack.Timestamp.Zero)
            {
                w.Write((uint)4);
                w.Write(value.CreatedTime);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Intaractors.Models.Seed Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            string p_name = string.Empty;
            ulong p_size = 0;
            global::Omnius.Core.RocketPack.Timestamp p_createdTime = global::Omnius.Core.RocketPack.Timestamp.Zero;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_name = r.GetString(256);
                            break;
                        }
                    case 3:
                        {
                            p_size = r.GetUInt64();
                            break;
                        }
                    case 4:
                        {
                            p_createdTime = r.GetTimestamp();
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Intaractors.Models.Seed(p_rootHash, p_name, p_size, p_createdTime);
        }
    }
}
public sealed partial class FileDownloaderConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig>.Formatter;
    public static global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig>.Empty;

    static FileDownloaderConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig>.Empty = new global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig(string.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxDestinationDirectoryLength = 2147483647;

    public FileDownloaderConfig(string destinationDirectory)
    {
        if (destinationDirectory is null) throw new global::System.ArgumentNullException("destinationDirectory");
        if (destinationDirectory.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("destinationDirectory");

        this.DestinationDirectory = destinationDirectory;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (destinationDirectory != default) ___h.Add(destinationDirectory.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public string DestinationDirectory { get; }

    public static global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig? left, global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig? left, global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig) return false;
        return this.Equals((global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig)other);
    }
    public bool Equals(global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.DestinationDirectory != target.DestinationDirectory) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.DestinationDirectory != string.Empty)
            {
                w.Write((uint)1);
                w.Write(value.DestinationDirectory);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            string p_destinationDirectory = string.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_destinationDirectory = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Intaractors.Models.FileDownloaderConfig(p_destinationDirectory);
        }
    }
}
public sealed partial class ProfilePublisherConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig>.Formatter;
    public static global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig>.Empty;

    static ProfilePublisherConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig>.Empty = new global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig(global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public ProfilePublisherConfig(global::Omnius.Core.Cryptography.OmniDigitalSignature digitalSignature)
    {
        if (digitalSignature is null) throw new global::System.ArgumentNullException("digitalSignature");

        this.DigitalSignature = digitalSignature;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (digitalSignature != default) ___h.Add(digitalSignature.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniDigitalSignature DigitalSignature { get; }

    public static global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig? left, global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig? left, global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig) return false;
        return this.Equals((global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig)other);
    }
    public bool Equals(global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.DigitalSignature != target.DigitalSignature) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.DigitalSignature != global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniDigitalSignature.Formatter.Serialize(ref w, value.DigitalSignature, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniDigitalSignature p_digitalSignature = global::Omnius.Core.Cryptography.OmniDigitalSignature.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_digitalSignature = global::Omnius.Core.Cryptography.OmniDigitalSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Intaractors.Models.ProfilePublisherConfig(p_digitalSignature);
        }
    }
}
public sealed partial class ProfileSubscriberConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig>.Formatter;
    public static global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig>.Empty;

    static ProfileSubscriberConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig>.Empty = new global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig(global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), 0, 0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxTrustedSignaturesCount = 1024;
    public static readonly int MaxBlockedSignaturesCount = 1024;

    public ProfileSubscriberConfig(global::Omnius.Core.Cryptography.OmniSignature[] trustedSignatures, global::Omnius.Core.Cryptography.OmniSignature[] blockedSignatures, uint searchDepth, uint maxProfileCount)
    {
        if (trustedSignatures is null) throw new global::System.ArgumentNullException("trustedSignatures");
        if (trustedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("trustedSignatures");
        foreach (var n in trustedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (blockedSignatures is null) throw new global::System.ArgumentNullException("blockedSignatures");
        if (blockedSignatures.Length > 1024) throw new global::System.ArgumentOutOfRangeException("blockedSignatures");
        foreach (var n in blockedSignatures)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        this.TrustedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(trustedSignatures);
        this.BlockedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(blockedSignatures);
        this.SearchDepth = searchDepth;
        this.MaxProfileCount = maxProfileCount;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in trustedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in blockedSignatures)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            if (searchDepth != default) ___h.Add(searchDepth.GetHashCode());
            if (maxProfileCount != default) ___h.Add(maxProfileCount.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> TrustedSignatures { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> BlockedSignatures { get; }
    public uint SearchDepth { get; }
    public uint MaxProfileCount { get; }

    public static global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig? left, global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig? left, global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig) return false;
        return this.Equals((global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig)other);
    }
    public bool Equals(global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.TrustedSignatures, target.TrustedSignatures)) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.BlockedSignatures, target.BlockedSignatures)) return false;
        if (this.SearchDepth != target.SearchDepth) return false;
        if (this.MaxProfileCount != target.MaxProfileCount) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.TrustedSignatures.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.TrustedSignatures.Count);
                foreach (var n in value.TrustedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.BlockedSignatures.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.BlockedSignatures.Count);
                foreach (var n in value.BlockedSignatures)
                {
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.SearchDepth != 0)
            {
                w.Write((uint)3);
                w.Write(value.SearchDepth);
            }
            if (value.MaxProfileCount != 0)
            {
                w.Write((uint)4);
                w.Write(value.MaxProfileCount);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature[] p_trustedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
            global::Omnius.Core.Cryptography.OmniSignature[] p_blockedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
            uint p_searchDepth = 0;
            uint p_maxProfileCount = 0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_trustedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_trustedSignatures.Length; i++)
                            {
                                p_trustedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_blockedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                            for (int i = 0; i < p_blockedSignatures.Length; i++)
                            {
                                p_blockedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 3:
                        {
                            p_searchDepth = r.GetUInt32();
                            break;
                        }
                    case 4:
                        {
                            p_maxProfileCount = r.GetUInt32();
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Intaractors.Models.ProfileSubscriberConfig(p_trustedSignatures, p_blockedSignatures, p_searchDepth, p_maxProfileCount);
        }
    }
}
