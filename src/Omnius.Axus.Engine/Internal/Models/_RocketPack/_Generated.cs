// <auto-generated/>
#nullable enable

namespace Omnius.Axus.Engine.Internal.Models;

internal enum SessionManagerVersion : sbyte
{
    Unknown = 0,
    Version1 = 1,
}
internal enum SessionManagerSessionResultType : byte
{
    Unknown = 0,
    Rejected = 1,
    Accepted = 2,
}
internal enum NodeFinderVersion : sbyte
{
    Unknown = 0,
    Version1 = 1,
}
internal enum FileExchangerVersion : byte
{
    Unknown = 0,
    Version1 = 1,
}
internal enum FileExchangerHandshakeResultType : byte
{
    Unknown = 0,
    Succeeded = 1,
    Rejected = 2,
}
internal enum ShoutExchangerVersion : byte
{
    Unknown = 0,
    Version1 = 1,
}
internal enum ShoutExchangerFetchResultType : byte
{
    Unknown = 0,
    Found = 1,
    NotFound = 2,
    Same = 3,
    Rejected = 4,
}
internal enum ShoutExchangerPostType : byte
{
    Unknown = 0,
    Found = 1,
    NotFound = 2,
}
internal sealed partial class Block : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.Block>, global::System.IDisposable
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.Block> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.Block>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.Block Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.Block>.Empty;

    static Block()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.Block>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.Block>.Empty = new global::Omnius.Axus.Engine.Internal.Models.Block(global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Core.MemoryOwner<byte>.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxValueLength = 33554432;

    public Block(global::Omnius.Core.Cryptography.OmniHash hash, global::System.Buffers.IMemoryOwner<byte> value)
    {
        if (value is null) throw new global::System.ArgumentNullException("value");
        if (value.Memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("value");

        this.Hash = hash;
        this.Value = value;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (hash != default) ___h.Add(hash.GetHashCode());
            if (!value.Memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(value.Memory.Span));
            return ___h.ToHashCode();
        });
    }

    public void Dispose()
    {
        this.Value.Dispose();
    }

    public global::Omnius.Core.Cryptography.OmniHash Hash { get; }
    public global::System.Buffers.IMemoryOwner<byte> Value { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.Block Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.Block? left, global::Omnius.Axus.Engine.Internal.Models.Block? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.Block? left, global::Omnius.Axus.Engine.Internal.Models.Block? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.Block) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.Block)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.Block? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Hash != target.Hash) return false;
        if (!global::Omnius.Core.BytesOperations.Equals(this.Value.Memory.Span, target.Value.Memory.Span)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.Block>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.Block value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Hash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.Hash, rank + 1);
            }
            if (!value.Value.Memory.IsEmpty)
            {
                w.Write((uint)2);
                w.Write(value.Value.Memory.Span);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.Block Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_hash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::System.Buffers.IMemoryOwner<byte> p_value = global::Omnius.Core.MemoryOwner<byte>.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_hash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_value = r.GetRecyclableMemory(33554432);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.Block(p_hash, p_value);
        }
    }
}
internal sealed partial class MerkleTreeSection : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection>.Empty;

    static MerkleTreeSection()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection>.Empty = new global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection(0, global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniHash>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxHashesCount = 1073741824;

    public MerkleTreeSection(int depth, global::Omnius.Core.Cryptography.OmniHash[] hashes)
    {
        if (hashes is null) throw new global::System.ArgumentNullException("hashes");
        if (hashes.Length > 1073741824) throw new global::System.ArgumentOutOfRangeException("hashes");

        this.Depth = depth;
        this.Hashes = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniHash>(hashes);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (depth != default) ___h.Add(depth.GetHashCode());
            foreach (var n in hashes)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public int Depth { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniHash> Hashes { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection? left, global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection? left, global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Depth != target.Depth) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Hashes, target.Hashes)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Depth != 0)
            {
                w.Write((uint)1);
                w.Write(value.Depth);
            }
            if (value.Hashes.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.Hashes.Count);
                foreach (var n in value.Hashes)
                {
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            int p_depth = 0;
            global::Omnius.Core.Cryptography.OmniHash[] p_hashes = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniHash>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_depth = r.GetInt32();
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_hashes = new global::Omnius.Core.Cryptography.OmniHash[length];
                            for (int i = 0; i < p_hashes.Length; i++)
                            {
                                p_hashes[i] = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.MerkleTreeSection(p_depth, p_hashes);
        }
    }
}
internal sealed partial class ContentKey : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ContentKey>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.ContentKey> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ContentKey>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.ContentKey Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ContentKey>.Empty;

    static ContentKey()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ContentKey>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ContentKey>.Empty = new global::Omnius.Axus.Engine.Internal.Models.ContentKey(global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.Cryptography.OmniHash.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSchemeLength = 256;

    public ContentKey(global::Omnius.Core.RocketPack.Utf8String scheme, global::Omnius.Core.Cryptography.OmniHash rootHash)
    {
        if (scheme is null) throw new global::System.ArgumentNullException("scheme");
        if (scheme.Length > 256) throw new global::System.ArgumentOutOfRangeException("scheme");
        this.Scheme = scheme;
        this.RootHash = rootHash;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!scheme.IsEmpty) ___h.Add(scheme.GetHashCode());
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String Scheme { get; }
    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.ContentKey Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.ContentKey? left, global::Omnius.Axus.Engine.Internal.Models.ContentKey? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.ContentKey? left, global::Omnius.Axus.Engine.Internal.Models.ContentKey? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.ContentKey) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.ContentKey)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.ContentKey? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Scheme != target.Scheme) return false;
        if (this.RootHash != target.RootHash) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.ContentKey>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.ContentKey value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Scheme != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Scheme);
            }
            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.ContentKey Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_scheme = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_scheme = r.GetString(256);
                            break;
                        }
                    case 2:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.ContentKey(p_scheme, p_rootHash);
        }
    }
}
internal sealed partial class SessionManagerHelloMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage>.Empty;

    static SessionManagerHelloMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage(global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.SessionManagerVersion>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxVersionsCount = 32;

    public SessionManagerHelloMessage(global::Omnius.Axus.Engine.Internal.Models.SessionManagerVersion[] versions)
    {
        if (versions is null) throw new global::System.ArgumentNullException("versions");
        if (versions.Length > 32) throw new global::System.ArgumentOutOfRangeException("versions");

        this.Versions = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.SessionManagerVersion>(versions);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in versions)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.SessionManagerVersion> Versions { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage? left, global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage? left, global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Versions, target.Versions)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Versions.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Versions.Count);
                foreach (var n in value.Versions)
                {
                    w.Write((long)n);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Engine.Internal.Models.SessionManagerVersion[] p_versions = global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.SessionManagerVersion>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_versions = new global::Omnius.Axus.Engine.Internal.Models.SessionManagerVersion[length];
                            for (int i = 0; i < p_versions.Length; i++)
                            {
                                p_versions[i] = (global::Omnius.Axus.Engine.Internal.Models.SessionManagerVersion)r.GetInt64();
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.SessionManagerHelloMessage(p_versions);
        }
    }
}
internal sealed partial class SessionManagerSessionRequestMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage>.Empty;

    static SessionManagerSessionRequestMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage(global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSchemeLength = 2147483647;

    public SessionManagerSessionRequestMessage(global::Omnius.Core.RocketPack.Utf8String scheme)
    {
        if (scheme is null) throw new global::System.ArgumentNullException("scheme");
        if (scheme.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("scheme");

        this.Scheme = scheme;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!scheme.IsEmpty) ___h.Add(scheme.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String Scheme { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage? left, global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage? left, global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Scheme != target.Scheme) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Scheme != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Scheme);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_scheme = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_scheme = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionRequestMessage(p_scheme);
        }
    }
}
internal sealed partial class SessionManagerSessionResultMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage>.Empty;

    static SessionManagerSessionResultMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage((global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultType)0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public SessionManagerSessionResultMessage(global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultType type)
    {
        this.Type = type;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (type != default) ___h.Add(type.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultType Type { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage? left, global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage? left, global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Type != target.Type) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Type != (global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultType)0)
            {
                w.Write((uint)1);
                w.Write((ulong)value.Type);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultType p_type = (global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultType)0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_type = (global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultType)r.GetUInt64();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.SessionManagerSessionResultMessage(p_type);
        }
    }
}
internal sealed partial class NodeFinderHelloMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage>.Empty;

    static NodeFinderHelloMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage(global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.NodeFinderVersion>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxVersionsCount = 32;

    public NodeFinderHelloMessage(global::Omnius.Axus.Engine.Internal.Models.NodeFinderVersion[] versions)
    {
        if (versions is null) throw new global::System.ArgumentNullException("versions");
        if (versions.Length > 32) throw new global::System.ArgumentOutOfRangeException("versions");

        this.Versions = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.NodeFinderVersion>(versions);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in versions)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.NodeFinderVersion> Versions { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage? left, global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage? left, global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Versions, target.Versions)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Versions.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Versions.Count);
                foreach (var n in value.Versions)
                {
                    w.Write((long)n);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Engine.Internal.Models.NodeFinderVersion[] p_versions = global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.NodeFinderVersion>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_versions = new global::Omnius.Axus.Engine.Internal.Models.NodeFinderVersion[length];
                            for (int i = 0; i < p_versions.Length; i++)
                            {
                                p_versions[i] = (global::Omnius.Axus.Engine.Internal.Models.NodeFinderVersion)r.GetInt64();
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.NodeFinderHelloMessage(p_versions);
        }
    }
}
internal sealed partial class NodeFinderProfileMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage>.Empty;

    static NodeFinderProfileMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage(global::System.ReadOnlyMemory<byte>.Empty, global::Omnius.Axus.Messages.NodeLocation.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxIdLength = 32;

    public NodeFinderProfileMessage(global::System.ReadOnlyMemory<byte> id, global::Omnius.Axus.Messages.NodeLocation nodeLocation)
    {
        if (id.Length > 32) throw new global::System.ArgumentOutOfRangeException("id");
        if (nodeLocation is null) throw new global::System.ArgumentNullException("nodeLocation");

        this.Id = id;
        this.NodeLocation = nodeLocation;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!id.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(id.Span));
            if (nodeLocation != default) ___h.Add(nodeLocation.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::System.ReadOnlyMemory<byte> Id { get; }
    public global::Omnius.Axus.Messages.NodeLocation NodeLocation { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage? left, global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage? left, global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.BytesOperations.Equals(this.Id.Span, target.Id.Span)) return false;
        if (this.NodeLocation != target.NodeLocation) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (!value.Id.IsEmpty)
            {
                w.Write((uint)1);
                w.Write(value.Id.Span);
            }
            if (value.NodeLocation != global::Omnius.Axus.Messages.NodeLocation.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Axus.Messages.NodeLocation.Formatter.Serialize(ref w, value.NodeLocation, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::System.ReadOnlyMemory<byte> p_id = global::System.ReadOnlyMemory<byte>.Empty;
            global::Omnius.Axus.Messages.NodeLocation p_nodeLocation = global::Omnius.Axus.Messages.NodeLocation.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_id = r.GetMemory(32);
                            break;
                        }
                    case 2:
                        {
                            p_nodeLocation = global::Omnius.Axus.Messages.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.NodeFinderProfileMessage(p_id, p_nodeLocation);
        }
    }
}
internal sealed partial class NodeFinderDataMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage>.Empty;

    static NodeFinderDataMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage(global::System.Array.Empty<global::Omnius.Axus.Messages.NodeLocation>(), global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.ContentKey>(), global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.ContentLocation>(), global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.ContentLocation>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxPushCloudNodeLocationsCount = 256;
    public static readonly int MaxWantContentKeysCount = 256;
    public static readonly int MaxGiveContentLocationsCount = 256;
    public static readonly int MaxPushContentLocationsCount = 256;

    public NodeFinderDataMessage(global::Omnius.Axus.Messages.NodeLocation[] pushCloudNodeLocations, global::Omnius.Axus.Engine.Internal.Models.ContentKey[] wantContentKeys, global::Omnius.Axus.Engine.Internal.Models.ContentLocation[] giveContentLocations, global::Omnius.Axus.Engine.Internal.Models.ContentLocation[] pushContentLocations)
    {
        if (pushCloudNodeLocations is null) throw new global::System.ArgumentNullException("pushCloudNodeLocations");
        if (pushCloudNodeLocations.Length > 256) throw new global::System.ArgumentOutOfRangeException("pushCloudNodeLocations");
        foreach (var n in pushCloudNodeLocations)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (wantContentKeys is null) throw new global::System.ArgumentNullException("wantContentKeys");
        if (wantContentKeys.Length > 256) throw new global::System.ArgumentOutOfRangeException("wantContentKeys");
        foreach (var n in wantContentKeys)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (giveContentLocations is null) throw new global::System.ArgumentNullException("giveContentLocations");
        if (giveContentLocations.Length > 256) throw new global::System.ArgumentOutOfRangeException("giveContentLocations");
        foreach (var n in giveContentLocations)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }
        if (pushContentLocations is null) throw new global::System.ArgumentNullException("pushContentLocations");
        if (pushContentLocations.Length > 256) throw new global::System.ArgumentOutOfRangeException("pushContentLocations");
        foreach (var n in pushContentLocations)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.PushCloudNodeLocations = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.NodeLocation>(pushCloudNodeLocations);
        this.WantContentKeys = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.ContentKey>(wantContentKeys);
        this.GiveContentLocations = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.ContentLocation>(giveContentLocations);
        this.PushContentLocations = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.ContentLocation>(pushContentLocations);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in pushCloudNodeLocations)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in wantContentKeys)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in giveContentLocations)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in pushContentLocations)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.NodeLocation> PushCloudNodeLocations { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.ContentKey> WantContentKeys { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.ContentLocation> GiveContentLocations { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.ContentLocation> PushContentLocations { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage? left, global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage? left, global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.PushCloudNodeLocations, target.PushCloudNodeLocations)) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.WantContentKeys, target.WantContentKeys)) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.GiveContentLocations, target.GiveContentLocations)) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.PushContentLocations, target.PushContentLocations)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.PushCloudNodeLocations.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.PushCloudNodeLocations.Count);
                foreach (var n in value.PushCloudNodeLocations)
                {
                    global::Omnius.Axus.Messages.NodeLocation.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.WantContentKeys.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.WantContentKeys.Count);
                foreach (var n in value.WantContentKeys)
                {
                    global::Omnius.Axus.Engine.Internal.Models.ContentKey.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.GiveContentLocations.Count != 0)
            {
                w.Write((uint)3);
                w.Write((uint)value.GiveContentLocations.Count);
                foreach (var n in value.GiveContentLocations)
                {
                    global::Omnius.Axus.Engine.Internal.Models.ContentLocation.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.PushContentLocations.Count != 0)
            {
                w.Write((uint)4);
                w.Write((uint)value.PushContentLocations.Count);
                foreach (var n in value.PushContentLocations)
                {
                    global::Omnius.Axus.Engine.Internal.Models.ContentLocation.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Messages.NodeLocation[] p_pushCloudNodeLocations = global::System.Array.Empty<global::Omnius.Axus.Messages.NodeLocation>();
            global::Omnius.Axus.Engine.Internal.Models.ContentKey[] p_wantContentKeys = global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.ContentKey>();
            global::Omnius.Axus.Engine.Internal.Models.ContentLocation[] p_giveContentLocations = global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.ContentLocation>();
            global::Omnius.Axus.Engine.Internal.Models.ContentLocation[] p_pushContentLocations = global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.ContentLocation>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_pushCloudNodeLocations = new global::Omnius.Axus.Messages.NodeLocation[length];
                            for (int i = 0; i < p_pushCloudNodeLocations.Length; i++)
                            {
                                p_pushCloudNodeLocations[i] = global::Omnius.Axus.Messages.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_wantContentKeys = new global::Omnius.Axus.Engine.Internal.Models.ContentKey[length];
                            for (int i = 0; i < p_wantContentKeys.Length; i++)
                            {
                                p_wantContentKeys[i] = global::Omnius.Axus.Engine.Internal.Models.ContentKey.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 3:
                        {
                            var length = r.GetUInt32();
                            p_giveContentLocations = new global::Omnius.Axus.Engine.Internal.Models.ContentLocation[length];
                            for (int i = 0; i < p_giveContentLocations.Length; i++)
                            {
                                p_giveContentLocations[i] = global::Omnius.Axus.Engine.Internal.Models.ContentLocation.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 4:
                        {
                            var length = r.GetUInt32();
                            p_pushContentLocations = new global::Omnius.Axus.Engine.Internal.Models.ContentLocation[length];
                            for (int i = 0; i < p_pushContentLocations.Length; i++)
                            {
                                p_pushContentLocations[i] = global::Omnius.Axus.Engine.Internal.Models.ContentLocation.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.NodeFinderDataMessage(p_pushCloudNodeLocations, p_wantContentKeys, p_giveContentLocations, p_pushContentLocations);
        }
    }
}
internal sealed partial class ContentLocation : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ContentLocation>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.ContentLocation> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ContentLocation>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.ContentLocation Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ContentLocation>.Empty;

    static ContentLocation()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ContentLocation>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ContentLocation>.Empty = new global::Omnius.Axus.Engine.Internal.Models.ContentLocation(global::Omnius.Axus.Engine.Internal.Models.ContentKey.Empty, global::System.Array.Empty<global::Omnius.Axus.Messages.NodeLocation>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNodeLocationsCount = 8192;

    public ContentLocation(global::Omnius.Axus.Engine.Internal.Models.ContentKey contentKey, global::Omnius.Axus.Messages.NodeLocation[] nodeLocations)
    {
        if (contentKey is null) throw new global::System.ArgumentNullException("contentKey");
        if (nodeLocations is null) throw new global::System.ArgumentNullException("nodeLocations");
        if (nodeLocations.Length > 8192) throw new global::System.ArgumentOutOfRangeException("nodeLocations");
        foreach (var n in nodeLocations)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.ContentKey = contentKey;
        this.NodeLocations = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.NodeLocation>(nodeLocations);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (contentKey != default) ___h.Add(contentKey.GetHashCode());
            foreach (var n in nodeLocations)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Engine.Internal.Models.ContentKey ContentKey { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.NodeLocation> NodeLocations { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.ContentLocation Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.ContentLocation? left, global::Omnius.Axus.Engine.Internal.Models.ContentLocation? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.ContentLocation? left, global::Omnius.Axus.Engine.Internal.Models.ContentLocation? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.ContentLocation) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.ContentLocation)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.ContentLocation? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.ContentKey != target.ContentKey) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.NodeLocations, target.NodeLocations)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.ContentLocation>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.ContentLocation value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.ContentKey != global::Omnius.Axus.Engine.Internal.Models.ContentKey.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Axus.Engine.Internal.Models.ContentKey.Formatter.Serialize(ref w, value.ContentKey, rank + 1);
            }
            if (value.NodeLocations.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.NodeLocations.Count);
                foreach (var n in value.NodeLocations)
                {
                    global::Omnius.Axus.Messages.NodeLocation.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.ContentLocation Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Engine.Internal.Models.ContentKey p_contentKey = global::Omnius.Axus.Engine.Internal.Models.ContentKey.Empty;
            global::Omnius.Axus.Messages.NodeLocation[] p_nodeLocations = global::System.Array.Empty<global::Omnius.Axus.Messages.NodeLocation>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_contentKey = global::Omnius.Axus.Engine.Internal.Models.ContentKey.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_nodeLocations = new global::Omnius.Axus.Messages.NodeLocation[length];
                            for (int i = 0; i < p_nodeLocations.Length; i++)
                            {
                                p_nodeLocations[i] = global::Omnius.Axus.Messages.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.ContentLocation(p_contentKey, p_nodeLocations);
        }
    }
}
internal sealed partial class FileExchangerHelloMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage>.Empty;

    static FileExchangerHelloMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage(global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.FileExchangerVersion>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxVersionsCount = 32;

    public FileExchangerHelloMessage(global::Omnius.Axus.Engine.Internal.Models.FileExchangerVersion[] versions)
    {
        if (versions is null) throw new global::System.ArgumentNullException("versions");
        if (versions.Length > 32) throw new global::System.ArgumentOutOfRangeException("versions");

        this.Versions = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.FileExchangerVersion>(versions);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in versions)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.FileExchangerVersion> Versions { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage? left, global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage? left, global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Versions, target.Versions)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Versions.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Versions.Count);
                foreach (var n in value.Versions)
                {
                    w.Write((ulong)n);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Engine.Internal.Models.FileExchangerVersion[] p_versions = global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.FileExchangerVersion>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_versions = new global::Omnius.Axus.Engine.Internal.Models.FileExchangerVersion[length];
                            for (int i = 0; i < p_versions.Length; i++)
                            {
                                p_versions[i] = (global::Omnius.Axus.Engine.Internal.Models.FileExchangerVersion)r.GetUInt64();
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.FileExchangerHelloMessage(p_versions);
        }
    }
}
internal sealed partial class FileExchangerHandshakeRequestMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage>.Empty;

    static FileExchangerHandshakeRequestMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage(global::Omnius.Core.Cryptography.OmniHash.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public FileExchangerHandshakeRequestMessage(global::Omnius.Core.Cryptography.OmniHash rootHash)
    {
        this.RootHash = rootHash;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage? left, global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage? left, global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeRequestMessage(p_rootHash);
        }
    }
}
internal sealed partial class FileExchangerHandshakeResultMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage>.Empty;

    static FileExchangerHandshakeResultMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage((global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultType)0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public FileExchangerHandshakeResultMessage(global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultType type)
    {
        this.Type = type;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (type != default) ___h.Add(type.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultType Type { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage? left, global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage? left, global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Type != target.Type) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Type != (global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultType)0)
            {
                w.Write((uint)1);
                w.Write((ulong)value.Type);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultType p_type = (global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultType)0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_type = (global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultType)r.GetUInt64();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.FileExchangerHandshakeResultMessage(p_type);
        }
    }
}
internal sealed partial class FileExchangerDataMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage>.Empty;

    static FileExchangerDataMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage(global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniHash>(), global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.Block>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxWantBlockHashesCount = 8192;
    public static readonly int MaxGiveBlocksCount = 8;

    public FileExchangerDataMessage(global::Omnius.Core.Cryptography.OmniHash[] wantBlockHashes, global::Omnius.Axus.Engine.Internal.Models.Block[] giveBlocks)
    {
        if (wantBlockHashes is null) throw new global::System.ArgumentNullException("wantBlockHashes");
        if (wantBlockHashes.Length > 8192) throw new global::System.ArgumentOutOfRangeException("wantBlockHashes");
        if (giveBlocks is null) throw new global::System.ArgumentNullException("giveBlocks");
        if (giveBlocks.Length > 8) throw new global::System.ArgumentOutOfRangeException("giveBlocks");
        foreach (var n in giveBlocks)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.WantBlockHashes = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniHash>(wantBlockHashes);
        this.GiveBlocks = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.Block>(giveBlocks);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in wantBlockHashes)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in giveBlocks)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniHash> WantBlockHashes { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.Block> GiveBlocks { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage? left, global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage? left, global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.WantBlockHashes, target.WantBlockHashes)) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.GiveBlocks, target.GiveBlocks)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.WantBlockHashes.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.WantBlockHashes.Count);
                foreach (var n in value.WantBlockHashes)
                {
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            if (value.GiveBlocks.Count != 0)
            {
                w.Write((uint)2);
                w.Write((uint)value.GiveBlocks.Count);
                foreach (var n in value.GiveBlocks)
                {
                    global::Omnius.Axus.Engine.Internal.Models.Block.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash[] p_wantBlockHashes = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniHash>();
            global::Omnius.Axus.Engine.Internal.Models.Block[] p_giveBlocks = global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.Block>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_wantBlockHashes = new global::Omnius.Core.Cryptography.OmniHash[length];
                            for (int i = 0; i < p_wantBlockHashes.Length; i++)
                            {
                                p_wantBlockHashes[i] = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                    case 2:
                        {
                            var length = r.GetUInt32();
                            p_giveBlocks = new global::Omnius.Axus.Engine.Internal.Models.Block[length];
                            for (int i = 0; i < p_giveBlocks.Length; i++)
                            {
                                p_giveBlocks[i] = global::Omnius.Axus.Engine.Internal.Models.Block.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.FileExchangerDataMessage(p_wantBlockHashes, p_giveBlocks);
        }
    }
}
internal sealed partial class ShoutExchangerHelloMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage>.Empty;

    static ShoutExchangerHelloMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage(global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerVersion>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxVersionsCount = 32;

    public ShoutExchangerHelloMessage(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerVersion[] versions)
    {
        if (versions is null) throw new global::System.ArgumentNullException("versions");
        if (versions.Length > 32) throw new global::System.ArgumentOutOfRangeException("versions");

        this.Versions = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerVersion>(versions);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in versions)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerVersion> Versions { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage? left, global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage? left, global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Versions, target.Versions)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Versions.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Versions.Count);
                foreach (var n in value.Versions)
                {
                    w.Write((ulong)n);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerVersion[] p_versions = global::System.Array.Empty<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerVersion>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_versions = new global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerVersion[length];
                            for (int i = 0; i < p_versions.Length; i++)
                            {
                                p_versions[i] = (global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerVersion)r.GetUInt64();
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerHelloMessage(p_versions);
        }
    }
}
internal sealed partial class ShoutExchangerFetchRequestMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage>.Empty;

    static ShoutExchangerFetchRequestMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.RocketPack.Timestamp64.Zero);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxChannelLength = 256;

    public ShoutExchangerFetchRequestMessage(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Utf8String channel, global::Omnius.Core.RocketPack.Timestamp64 createdTime)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (channel is null) throw new global::System.ArgumentNullException("channel");
        if (channel.Length > 256) throw new global::System.ArgumentOutOfRangeException("channel");
        this.Signature = signature;
        this.Channel = channel;
        this.CreatedTime = createdTime;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (!channel.IsEmpty) ___h.Add(channel.GetHashCode());
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Utf8String Channel { get; }
    public global::Omnius.Core.RocketPack.Timestamp64 CreatedTime { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage? left, global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage? left, global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Channel != target.Channel) return false;
        if (this.CreatedTime != target.CreatedTime) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Channel != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Channel);
            }
            if (value.CreatedTime != global::Omnius.Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)3);
                w.Write(value.CreatedTime);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_channel = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.RocketPack.Timestamp64 p_createdTime = global::Omnius.Core.RocketPack.Timestamp64.Zero;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_channel = r.GetString(256);
                            break;
                        }
                    case 3:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchRequestMessage(p_signature, p_channel, p_createdTime);
        }
    }
}
internal sealed partial class ShoutExchangerFetchResultMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage>, global::System.IDisposable
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage>.Empty;

    static ShoutExchangerFetchResultMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage((global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultType)0, null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public ShoutExchangerFetchResultMessage(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultType type, global::Omnius.Axus.Engine.Models.Shout? shout)
    {
        this.Type = type;
        this.Shout = shout;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (type != default) ___h.Add(type.GetHashCode());
            if (shout != default) ___h.Add(shout.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public void Dispose()
    {
        if (this.Shout is not null) this.Shout.Dispose();
    }

    public global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultType Type { get; }
    public global::Omnius.Axus.Engine.Models.Shout? Shout { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage? left, global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage? left, global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Type != target.Type) return false;
        if ((this.Shout is null) != (target.Shout is null)) return false;
        if ((this.Shout is not null) && (target.Shout is not null) && this.Shout != target.Shout) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Type != (global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultType)0)
            {
                w.Write((uint)1);
                w.Write((ulong)value.Type);
            }
            if (value.Shout != null)
            {
                w.Write((uint)2);
                global::Omnius.Axus.Engine.Models.Shout.Formatter.Serialize(ref w, value.Shout, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultType p_type = (global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultType)0;
            global::Omnius.Axus.Engine.Models.Shout? p_shout = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_type = (global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultType)r.GetUInt64();
                            break;
                        }
                    case 2:
                        {
                            p_shout = global::Omnius.Axus.Engine.Models.Shout.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerFetchResultMessage(p_type, p_shout);
        }
    }
}
internal sealed partial class ShoutExchangerPostMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage>, global::System.IDisposable
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage>.Formatter;
    public static global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage>.Empty;

    static ShoutExchangerPostMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage>.Empty = new global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage((global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostType)0, null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public ShoutExchangerPostMessage(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostType type, global::Omnius.Axus.Engine.Models.Shout? shout)
    {
        this.Type = type;
        this.Shout = shout;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (type != default) ___h.Add(type.GetHashCode());
            if (shout != default) ___h.Add(shout.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public void Dispose()
    {
        if (this.Shout is not null) this.Shout.Dispose();
    }

    public global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostType Type { get; }
    public global::Omnius.Axus.Engine.Models.Shout? Shout { get; }

    public static global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage? left, global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage? left, global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage) return false;
        return this.Equals((global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage)other);
    }
    public bool Equals(global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Type != target.Type) return false;
        if ((this.Shout is null) != (target.Shout is null)) return false;
        if ((this.Shout is not null) && (target.Shout is not null) && this.Shout != target.Shout) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Type != (global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostType)0)
            {
                w.Write((uint)1);
                w.Write((ulong)value.Type);
            }
            if (value.Shout != null)
            {
                w.Write((uint)2);
                global::Omnius.Axus.Engine.Models.Shout.Formatter.Serialize(ref w, value.Shout, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostType p_type = (global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostType)0;
            global::Omnius.Axus.Engine.Models.Shout? p_shout = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_type = (global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostType)r.GetUInt64();
                            break;
                        }
                    case 2:
                        {
                            p_shout = global::Omnius.Axus.Engine.Models.Shout.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engine.Internal.Models.ShoutExchangerPostMessage(p_type, p_shout);
        }
    }
}
