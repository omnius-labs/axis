// <auto-generated/>
#nullable enable

namespace Omnius.Axis.Remoting;

public sealed partial class GetConfigResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetConfigResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetConfigResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetConfigResult>.Formatter;
    public static global::Omnius.Axis.Remoting.GetConfigResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetConfigResult>.Empty;

    static GetConfigResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetConfigResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetConfigResult>.Empty = new global::Omnius.Axis.Remoting.GetConfigResult(global::Omnius.Axis.Models.ServiceConfig.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public GetConfigResult(global::Omnius.Axis.Models.ServiceConfig config)
    {
        if (config is null) throw new global::System.ArgumentNullException("config");

        this.Config = config;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (config != default) ___h.Add(config.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axis.Models.ServiceConfig Config { get; }

    public static global::Omnius.Axis.Remoting.GetConfigResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.GetConfigResult? left, global::Omnius.Axis.Remoting.GetConfigResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.GetConfigResult? left, global::Omnius.Axis.Remoting.GetConfigResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.GetConfigResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.GetConfigResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.GetConfigResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Config != target.Config) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetConfigResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.GetConfigResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Config != global::Omnius.Axis.Models.ServiceConfig.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Axis.Models.ServiceConfig.Formatter.Serialize(ref w, value.Config, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.GetConfigResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.ServiceConfig p_config = global::Omnius.Axis.Models.ServiceConfig.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_config = global::Omnius.Axis.Models.ServiceConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.GetConfigResult(p_config);
        }
    }
}
public sealed partial class SetConfigRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SetConfigRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.SetConfigRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SetConfigRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.SetConfigRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SetConfigRequest>.Empty;

    static SetConfigRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SetConfigRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SetConfigRequest>.Empty = new global::Omnius.Axis.Remoting.SetConfigRequest(global::Omnius.Axis.Models.ServiceConfig.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public SetConfigRequest(global::Omnius.Axis.Models.ServiceConfig config)
    {
        if (config is null) throw new global::System.ArgumentNullException("config");

        this.Config = config;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (config != default) ___h.Add(config.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axis.Models.ServiceConfig Config { get; }

    public static global::Omnius.Axis.Remoting.SetConfigRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.SetConfigRequest? left, global::Omnius.Axis.Remoting.SetConfigRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.SetConfigRequest? left, global::Omnius.Axis.Remoting.SetConfigRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.SetConfigRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.SetConfigRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.SetConfigRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Config != target.Config) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.SetConfigRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.SetConfigRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Config != global::Omnius.Axis.Models.ServiceConfig.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Axis.Models.ServiceConfig.Formatter.Serialize(ref w, value.Config, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.SetConfigRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.ServiceConfig p_config = global::Omnius.Axis.Models.ServiceConfig.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_config = global::Omnius.Axis.Models.ServiceConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.SetConfigRequest(p_config);
        }
    }
}
public sealed partial class GetSessionsReportResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSessionsReportResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetSessionsReportResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSessionsReportResult>.Formatter;
    public static global::Omnius.Axis.Remoting.GetSessionsReportResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSessionsReportResult>.Empty;

    static GetSessionsReportResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSessionsReportResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSessionsReportResult>.Empty = new global::Omnius.Axis.Remoting.GetSessionsReportResult(global::System.Array.Empty<global::Omnius.Axis.Models.SessionReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSessionsCount = 8192;

    public GetSessionsReportResult(global::Omnius.Axis.Models.SessionReport[] sessions)
    {
        if (sessions is null) throw new global::System.ArgumentNullException("sessions");
        if (sessions.Length > 8192) throw new global::System.ArgumentOutOfRangeException("sessions");
        foreach (var n in sessions)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.Sessions = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.SessionReport>(sessions);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in sessions)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.SessionReport> Sessions { get; }

    public static global::Omnius.Axis.Remoting.GetSessionsReportResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.GetSessionsReportResult? left, global::Omnius.Axis.Remoting.GetSessionsReportResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.GetSessionsReportResult? left, global::Omnius.Axis.Remoting.GetSessionsReportResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.GetSessionsReportResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.GetSessionsReportResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.GetSessionsReportResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Sessions, target.Sessions)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetSessionsReportResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.GetSessionsReportResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Sessions.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Sessions.Count);
                foreach (var n in value.Sessions)
                {
                    global::Omnius.Axis.Models.SessionReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.GetSessionsReportResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.SessionReport[] p_sessions = global::System.Array.Empty<global::Omnius.Axis.Models.SessionReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_sessions = new global::Omnius.Axis.Models.SessionReport[length];
                            for (int i = 0; i < p_sessions.Length; i++)
                            {
                                p_sessions[i] = global::Omnius.Axis.Models.SessionReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.GetSessionsReportResult(p_sessions);
        }
    }
}
public sealed partial class GetMyNodeLocationResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetMyNodeLocationResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetMyNodeLocationResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetMyNodeLocationResult>.Formatter;
    public static global::Omnius.Axis.Remoting.GetMyNodeLocationResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetMyNodeLocationResult>.Empty;

    static GetMyNodeLocationResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetMyNodeLocationResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetMyNodeLocationResult>.Empty = new global::Omnius.Axis.Remoting.GetMyNodeLocationResult(global::Omnius.Axis.Models.NodeLocation.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public GetMyNodeLocationResult(global::Omnius.Axis.Models.NodeLocation nodeLocation)
    {
        if (nodeLocation is null) throw new global::System.ArgumentNullException("nodeLocation");

        this.NodeLocation = nodeLocation;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (nodeLocation != default) ___h.Add(nodeLocation.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axis.Models.NodeLocation NodeLocation { get; }

    public static global::Omnius.Axis.Remoting.GetMyNodeLocationResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.GetMyNodeLocationResult? left, global::Omnius.Axis.Remoting.GetMyNodeLocationResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.GetMyNodeLocationResult? left, global::Omnius.Axis.Remoting.GetMyNodeLocationResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.GetMyNodeLocationResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.GetMyNodeLocationResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.GetMyNodeLocationResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.NodeLocation != target.NodeLocation) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetMyNodeLocationResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.GetMyNodeLocationResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.NodeLocation != global::Omnius.Axis.Models.NodeLocation.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Axis.Models.NodeLocation.Formatter.Serialize(ref w, value.NodeLocation, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.GetMyNodeLocationResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.NodeLocation p_nodeLocation = global::Omnius.Axis.Models.NodeLocation.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_nodeLocation = global::Omnius.Axis.Models.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.GetMyNodeLocationResult(p_nodeLocation);
        }
    }
}
public sealed partial class GetCloudNodeLocationsResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult>.Formatter;
    public static global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult>.Empty;

    static GetCloudNodeLocationsResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult>.Empty = new global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult(global::System.Array.Empty<global::Omnius.Axis.Models.NodeLocation>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNodeLocationsCount = 8192;

    public GetCloudNodeLocationsResult(global::Omnius.Axis.Models.NodeLocation[] nodeLocations)
    {
        if (nodeLocations is null) throw new global::System.ArgumentNullException("nodeLocations");
        if (nodeLocations.Length > 8192) throw new global::System.ArgumentOutOfRangeException("nodeLocations");
        foreach (var n in nodeLocations)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.NodeLocations = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.NodeLocation>(nodeLocations);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in nodeLocations)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.NodeLocation> NodeLocations { get; }

    public static global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult? left, global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult? left, global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.NodeLocations, target.NodeLocations)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.NodeLocations.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.NodeLocations.Count);
                foreach (var n in value.NodeLocations)
                {
                    global::Omnius.Axis.Models.NodeLocation.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.NodeLocation[] p_nodeLocations = global::System.Array.Empty<global::Omnius.Axis.Models.NodeLocation>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_nodeLocations = new global::Omnius.Axis.Models.NodeLocation[length];
                            for (int i = 0; i < p_nodeLocations.Length; i++)
                            {
                                p_nodeLocations[i] = global::Omnius.Axis.Models.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult(p_nodeLocations);
        }
    }
}
public sealed partial class AddCloudNodeLocationsRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest>.Empty;

    static AddCloudNodeLocationsRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest>.Empty = new global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest(global::System.Array.Empty<global::Omnius.Axis.Models.NodeLocation>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNodeLocationsCount = 8192;

    public AddCloudNodeLocationsRequest(global::Omnius.Axis.Models.NodeLocation[] nodeLocations)
    {
        if (nodeLocations is null) throw new global::System.ArgumentNullException("nodeLocations");
        if (nodeLocations.Length > 8192) throw new global::System.ArgumentOutOfRangeException("nodeLocations");
        foreach (var n in nodeLocations)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.NodeLocations = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.NodeLocation>(nodeLocations);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in nodeLocations)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.NodeLocation> NodeLocations { get; }

    public static global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest? left, global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest? left, global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.NodeLocations, target.NodeLocations)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.NodeLocations.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.NodeLocations.Count);
                foreach (var n in value.NodeLocations)
                {
                    global::Omnius.Axis.Models.NodeLocation.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.NodeLocation[] p_nodeLocations = global::System.Array.Empty<global::Omnius.Axis.Models.NodeLocation>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_nodeLocations = new global::Omnius.Axis.Models.NodeLocation[length];
                            for (int i = 0; i < p_nodeLocations.Length; i++)
                            {
                                p_nodeLocations[i] = global::Omnius.Axis.Models.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest(p_nodeLocations);
        }
    }
}
public sealed partial class GetPublishedFilesReportResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetPublishedFilesReportResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetPublishedFilesReportResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetPublishedFilesReportResult>.Formatter;
    public static global::Omnius.Axis.Remoting.GetPublishedFilesReportResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetPublishedFilesReportResult>.Empty;

    static GetPublishedFilesReportResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetPublishedFilesReportResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetPublishedFilesReportResult>.Empty = new global::Omnius.Axis.Remoting.GetPublishedFilesReportResult(global::System.Array.Empty<global::Omnius.Axis.Models.PublishedFileReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxPublishedFilesCount = 2147483647;

    public GetPublishedFilesReportResult(global::Omnius.Axis.Models.PublishedFileReport[] publishedFiles)
    {
        if (publishedFiles is null) throw new global::System.ArgumentNullException("publishedFiles");
        if (publishedFiles.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("publishedFiles");
        foreach (var n in publishedFiles)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.PublishedFiles = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.PublishedFileReport>(publishedFiles);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in publishedFiles)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.PublishedFileReport> PublishedFiles { get; }

    public static global::Omnius.Axis.Remoting.GetPublishedFilesReportResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.GetPublishedFilesReportResult? left, global::Omnius.Axis.Remoting.GetPublishedFilesReportResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.GetPublishedFilesReportResult? left, global::Omnius.Axis.Remoting.GetPublishedFilesReportResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.GetPublishedFilesReportResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.GetPublishedFilesReportResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.GetPublishedFilesReportResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.PublishedFiles, target.PublishedFiles)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetPublishedFilesReportResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.GetPublishedFilesReportResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.PublishedFiles.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.PublishedFiles.Count);
                foreach (var n in value.PublishedFiles)
                {
                    global::Omnius.Axis.Models.PublishedFileReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.GetPublishedFilesReportResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.PublishedFileReport[] p_publishedFiles = global::System.Array.Empty<global::Omnius.Axis.Models.PublishedFileReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_publishedFiles = new global::Omnius.Axis.Models.PublishedFileReport[length];
                            for (int i = 0; i < p_publishedFiles.Length; i++)
                            {
                                p_publishedFiles[i] = global::Omnius.Axis.Models.PublishedFileReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.GetPublishedFilesReportResult(p_publishedFiles);
        }
    }
}
public sealed partial class PublishFileFromStorageRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromStorageRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.PublishFileFromStorageRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromStorageRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.PublishFileFromStorageRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromStorageRequest>.Empty;

    static PublishFileFromStorageRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromStorageRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromStorageRequest>.Empty = new global::Omnius.Axis.Remoting.PublishFileFromStorageRequest(global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxFilePathLength = 2147483647;
    public static readonly int MaxRegistrantLength = 2147483647;

    public PublishFileFromStorageRequest(global::Omnius.Core.RocketPack.Utf8String filePath, global::Omnius.Core.RocketPack.Utf8String registrant)
    {
        if (filePath is null) throw new global::System.ArgumentNullException("filePath");
        if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.FilePath = filePath;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!filePath.IsEmpty) ___h.Add(filePath.GetHashCode());
            if (!registrant.IsEmpty) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String FilePath { get; }
    public global::Omnius.Core.RocketPack.Utf8String Registrant { get; }

    public static global::Omnius.Axis.Remoting.PublishFileFromStorageRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.PublishFileFromStorageRequest? left, global::Omnius.Axis.Remoting.PublishFileFromStorageRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.PublishFileFromStorageRequest? left, global::Omnius.Axis.Remoting.PublishFileFromStorageRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.PublishFileFromStorageRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.PublishFileFromStorageRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.PublishFileFromStorageRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.FilePath != target.FilePath) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.PublishFileFromStorageRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.PublishFileFromStorageRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.FilePath != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.FilePath);
            }
            if (value.Registrant != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.PublishFileFromStorageRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_filePath = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_registrant = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_filePath = r.GetString(2147483647);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.PublishFileFromStorageRequest(p_filePath, p_registrant);
        }
    }
}
public sealed partial class PublishFileFromStorageResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromStorageResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.PublishFileFromStorageResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromStorageResult>.Formatter;
    public static global::Omnius.Axis.Remoting.PublishFileFromStorageResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromStorageResult>.Empty;

    static PublishFileFromStorageResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromStorageResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromStorageResult>.Empty = new global::Omnius.Axis.Remoting.PublishFileFromStorageResult(global::Omnius.Core.Cryptography.OmniHash.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public PublishFileFromStorageResult(global::Omnius.Core.Cryptography.OmniHash hash)
    {
        this.Hash = hash;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (hash != default) ___h.Add(hash.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash Hash { get; }

    public static global::Omnius.Axis.Remoting.PublishFileFromStorageResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.PublishFileFromStorageResult? left, global::Omnius.Axis.Remoting.PublishFileFromStorageResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.PublishFileFromStorageResult? left, global::Omnius.Axis.Remoting.PublishFileFromStorageResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.PublishFileFromStorageResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.PublishFileFromStorageResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.PublishFileFromStorageResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Hash != target.Hash) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.PublishFileFromStorageResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.PublishFileFromStorageResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Hash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.Hash, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.PublishFileFromStorageResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_hash = global::Omnius.Core.Cryptography.OmniHash.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_hash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.PublishFileFromStorageResult(p_hash);
        }
    }
}
public sealed partial class PublishFileFromMemoryRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest>.Empty;

    static PublishFileFromMemoryRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest>.Empty = new global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest(global::System.ReadOnlyMemory<byte>.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxMemoryLength = 33554432;
    public static readonly int MaxRegistrantLength = 2147483647;

    public PublishFileFromMemoryRequest(global::System.ReadOnlyMemory<byte> memory, global::Omnius.Core.RocketPack.Utf8String registrant)
    {
        if (memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("memory");
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.Memory = memory;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(memory.Span));
            if (!registrant.IsEmpty) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::System.ReadOnlyMemory<byte> Memory { get; }
    public global::Omnius.Core.RocketPack.Utf8String Registrant { get; }

    public static global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest? left, global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest? left, global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.BytesOperations.Equals(this.Memory.Span, target.Memory.Span)) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (!value.Memory.IsEmpty)
            {
                w.Write((uint)1);
                w.Write(value.Memory.Span);
            }
            if (value.Registrant != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::System.ReadOnlyMemory<byte> p_memory = global::System.ReadOnlyMemory<byte>.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_registrant = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_memory = r.GetMemory(33554432);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest(p_memory, p_registrant);
        }
    }
}
public sealed partial class PublishFileFromMemoryResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromMemoryResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.PublishFileFromMemoryResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromMemoryResult>.Formatter;
    public static global::Omnius.Axis.Remoting.PublishFileFromMemoryResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromMemoryResult>.Empty;

    static PublishFileFromMemoryResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromMemoryResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishFileFromMemoryResult>.Empty = new global::Omnius.Axis.Remoting.PublishFileFromMemoryResult(global::Omnius.Core.Cryptography.OmniHash.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public PublishFileFromMemoryResult(global::Omnius.Core.Cryptography.OmniHash hash)
    {
        this.Hash = hash;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (hash != default) ___h.Add(hash.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash Hash { get; }

    public static global::Omnius.Axis.Remoting.PublishFileFromMemoryResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.PublishFileFromMemoryResult? left, global::Omnius.Axis.Remoting.PublishFileFromMemoryResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.PublishFileFromMemoryResult? left, global::Omnius.Axis.Remoting.PublishFileFromMemoryResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.PublishFileFromMemoryResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.PublishFileFromMemoryResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.PublishFileFromMemoryResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Hash != target.Hash) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.PublishFileFromMemoryResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.PublishFileFromMemoryResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Hash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.Hash, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.PublishFileFromMemoryResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_hash = global::Omnius.Core.Cryptography.OmniHash.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_hash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.PublishFileFromMemoryResult(p_hash);
        }
    }
}
public sealed partial class UnpublishFileFromStorageRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest>.Empty;

    static UnpublishFileFromStorageRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest>.Empty = new global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest(global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxFilePathLength = 2147483647;
    public static readonly int MaxRegistrantLength = 2147483647;

    public UnpublishFileFromStorageRequest(global::Omnius.Core.RocketPack.Utf8String filePath, global::Omnius.Core.RocketPack.Utf8String registrant)
    {
        if (filePath is null) throw new global::System.ArgumentNullException("filePath");
        if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.FilePath = filePath;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!filePath.IsEmpty) ___h.Add(filePath.GetHashCode());
            if (!registrant.IsEmpty) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String FilePath { get; }
    public global::Omnius.Core.RocketPack.Utf8String Registrant { get; }

    public static global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest? left, global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest? left, global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.FilePath != target.FilePath) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.FilePath != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.FilePath);
            }
            if (value.Registrant != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_filePath = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_registrant = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_filePath = r.GetString(2147483647);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest(p_filePath, p_registrant);
        }
    }
}
public sealed partial class UnpublishFileFromMemoryRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest>.Empty;

    static UnpublishFileFromMemoryRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest>.Empty = new global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest(global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxRegistrantLength = 2147483647;

    public UnpublishFileFromMemoryRequest(global::Omnius.Core.Cryptography.OmniHash rootHash, global::Omnius.Core.RocketPack.Utf8String registrant)
    {
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.RootHash = rootHash;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            if (!registrant.IsEmpty) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public global::Omnius.Core.RocketPack.Utf8String Registrant { get; }

    public static global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest? left, global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest? left, global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.Registrant != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_registrant = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest(p_rootHash, p_registrant);
        }
    }
}
public sealed partial class GetSubscribedFilesReportResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult>.Formatter;
    public static global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult>.Empty;

    static GetSubscribedFilesReportResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult>.Empty = new global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult(global::System.Array.Empty<global::Omnius.Axis.Models.SubscribedFileReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSubscribedFilesCount = 2147483647;

    public GetSubscribedFilesReportResult(global::Omnius.Axis.Models.SubscribedFileReport[] subscribedFiles)
    {
        if (subscribedFiles is null) throw new global::System.ArgumentNullException("subscribedFiles");
        if (subscribedFiles.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("subscribedFiles");
        foreach (var n in subscribedFiles)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.SubscribedFiles = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.SubscribedFileReport>(subscribedFiles);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in subscribedFiles)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.SubscribedFileReport> SubscribedFiles { get; }

    public static global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult? left, global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult? left, global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.SubscribedFiles, target.SubscribedFiles)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.SubscribedFiles.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.SubscribedFiles.Count);
                foreach (var n in value.SubscribedFiles)
                {
                    global::Omnius.Axis.Models.SubscribedFileReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.SubscribedFileReport[] p_subscribedFiles = global::System.Array.Empty<global::Omnius.Axis.Models.SubscribedFileReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_subscribedFiles = new global::Omnius.Axis.Models.SubscribedFileReport[length];
                            for (int i = 0; i < p_subscribedFiles.Length; i++)
                            {
                                p_subscribedFiles[i] = global::Omnius.Axis.Models.SubscribedFileReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult(p_subscribedFiles);
        }
    }
}
public sealed partial class SubscribeFileRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SubscribeFileRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.SubscribeFileRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SubscribeFileRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.SubscribeFileRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SubscribeFileRequest>.Empty;

    static SubscribeFileRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SubscribeFileRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SubscribeFileRequest>.Empty = new global::Omnius.Axis.Remoting.SubscribeFileRequest(global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxRegistrantLength = 2147483647;

    public SubscribeFileRequest(global::Omnius.Core.Cryptography.OmniHash rootHash, global::Omnius.Core.RocketPack.Utf8String registrant)
    {
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.RootHash = rootHash;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            if (!registrant.IsEmpty) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public global::Omnius.Core.RocketPack.Utf8String Registrant { get; }

    public static global::Omnius.Axis.Remoting.SubscribeFileRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.SubscribeFileRequest? left, global::Omnius.Axis.Remoting.SubscribeFileRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.SubscribeFileRequest? left, global::Omnius.Axis.Remoting.SubscribeFileRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.SubscribeFileRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.SubscribeFileRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.SubscribeFileRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.SubscribeFileRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.SubscribeFileRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.Registrant != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.SubscribeFileRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_registrant = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.SubscribeFileRequest(p_rootHash, p_registrant);
        }
    }
}
public sealed partial class UnsubscribeFileRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnsubscribeFileRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.UnsubscribeFileRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnsubscribeFileRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.UnsubscribeFileRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnsubscribeFileRequest>.Empty;

    static UnsubscribeFileRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnsubscribeFileRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnsubscribeFileRequest>.Empty = new global::Omnius.Axis.Remoting.UnsubscribeFileRequest(global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxRegistrantLength = 2147483647;

    public UnsubscribeFileRequest(global::Omnius.Core.Cryptography.OmniHash rootHash, global::Omnius.Core.RocketPack.Utf8String registrant)
    {
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.RootHash = rootHash;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            if (!registrant.IsEmpty) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public global::Omnius.Core.RocketPack.Utf8String Registrant { get; }

    public static global::Omnius.Axis.Remoting.UnsubscribeFileRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.UnsubscribeFileRequest? left, global::Omnius.Axis.Remoting.UnsubscribeFileRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.UnsubscribeFileRequest? left, global::Omnius.Axis.Remoting.UnsubscribeFileRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.UnsubscribeFileRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.UnsubscribeFileRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.UnsubscribeFileRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.UnsubscribeFileRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.UnsubscribeFileRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.Registrant != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.UnsubscribeFileRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_registrant = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.UnsubscribeFileRequest(p_rootHash, p_registrant);
        }
    }
}
public sealed partial class TryExportFileToStorageRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToStorageRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.TryExportFileToStorageRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToStorageRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.TryExportFileToStorageRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToStorageRequest>.Empty;

    static TryExportFileToStorageRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToStorageRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToStorageRequest>.Empty = new global::Omnius.Axis.Remoting.TryExportFileToStorageRequest(global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxFilePathLength = 2147483647;

    public TryExportFileToStorageRequest(global::Omnius.Core.Cryptography.OmniHash rootHash, global::Omnius.Core.RocketPack.Utf8String filePath)
    {
        if (filePath is null) throw new global::System.ArgumentNullException("filePath");
        if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");

        this.RootHash = rootHash;
        this.FilePath = filePath;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            if (!filePath.IsEmpty) ___h.Add(filePath.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public global::Omnius.Core.RocketPack.Utf8String FilePath { get; }

    public static global::Omnius.Axis.Remoting.TryExportFileToStorageRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.TryExportFileToStorageRequest? left, global::Omnius.Axis.Remoting.TryExportFileToStorageRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.TryExportFileToStorageRequest? left, global::Omnius.Axis.Remoting.TryExportFileToStorageRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.TryExportFileToStorageRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.TryExportFileToStorageRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.TryExportFileToStorageRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (this.FilePath != target.FilePath) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.TryExportFileToStorageRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.TryExportFileToStorageRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.FilePath != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.FilePath);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.TryExportFileToStorageRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_filePath = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_filePath = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.TryExportFileToStorageRequest(p_rootHash, p_filePath);
        }
    }
}
public sealed partial class TryExportFileToStorageResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToStorageResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.TryExportFileToStorageResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToStorageResult>.Formatter;
    public static global::Omnius.Axis.Remoting.TryExportFileToStorageResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToStorageResult>.Empty;

    static TryExportFileToStorageResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToStorageResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToStorageResult>.Empty = new global::Omnius.Axis.Remoting.TryExportFileToStorageResult(false);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TryExportFileToStorageResult(bool success)
    {
        this.Success = success;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (success != default) ___h.Add(success.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public bool Success { get; }

    public static global::Omnius.Axis.Remoting.TryExportFileToStorageResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.TryExportFileToStorageResult? left, global::Omnius.Axis.Remoting.TryExportFileToStorageResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.TryExportFileToStorageResult? left, global::Omnius.Axis.Remoting.TryExportFileToStorageResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.TryExportFileToStorageResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.TryExportFileToStorageResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.TryExportFileToStorageResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Success != target.Success) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.TryExportFileToStorageResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.TryExportFileToStorageResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Success != false)
            {
                w.Write((uint)1);
                w.Write(value.Success);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.TryExportFileToStorageResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            bool p_success = false;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_success = r.GetBoolean();
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.TryExportFileToStorageResult(p_success);
        }
    }
}
public sealed partial class TryExportFileToMemoryRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest>.Empty;

    static TryExportFileToMemoryRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest>.Empty = new global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest(global::Omnius.Core.Cryptography.OmniHash.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TryExportFileToMemoryRequest(global::Omnius.Core.Cryptography.OmniHash rootHash)
    {
        this.RootHash = rootHash;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }

    public static global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest? left, global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest? left, global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest(p_rootHash);
        }
    }
}
public sealed partial class TryExportFileToMemoryResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToMemoryResult>, global::System.IDisposable
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.TryExportFileToMemoryResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToMemoryResult>.Formatter;
    public static global::Omnius.Axis.Remoting.TryExportFileToMemoryResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToMemoryResult>.Empty;

    static TryExportFileToMemoryResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToMemoryResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportFileToMemoryResult>.Empty = new global::Omnius.Axis.Remoting.TryExportFileToMemoryResult(null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxMemoryLength = 33554432;

    public TryExportFileToMemoryResult(global::System.Buffers.IMemoryOwner<byte>? memory)
    {
        if (memory is not null && memory.Memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("memory");

        this.Memory = memory;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (memory is not null && !memory.Memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(memory.Memory.Span));
            return ___h.ToHashCode();
        });
    }

    public void Dispose()
    {
        if (this.Memory is not null) this.Memory.Dispose();
    }

    public global::System.Buffers.IMemoryOwner<byte>? Memory { get; }

    public static global::Omnius.Axis.Remoting.TryExportFileToMemoryResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.TryExportFileToMemoryResult? left, global::Omnius.Axis.Remoting.TryExportFileToMemoryResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.TryExportFileToMemoryResult? left, global::Omnius.Axis.Remoting.TryExportFileToMemoryResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.TryExportFileToMemoryResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.TryExportFileToMemoryResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.TryExportFileToMemoryResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if ((this.Memory is null) != (target.Memory is null)) return false;
        if ((this.Memory is not null) && (target.Memory is not null) && !global::Omnius.Core.BytesOperations.Equals(this.Memory.Memory.Span, target.Memory.Memory.Span)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.TryExportFileToMemoryResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.TryExportFileToMemoryResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Memory != null)
            {
                w.Write((uint)1);
                w.Write(value.Memory.Memory.Span);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.TryExportFileToMemoryResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::System.Buffers.IMemoryOwner<byte>? p_memory = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_memory = r.GetRecyclableMemory(33554432);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.TryExportFileToMemoryResult(p_memory);
        }
    }
}
public sealed partial class GetPublishedShoutsReportResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult>.Formatter;
    public static global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult>.Empty;

    static GetPublishedShoutsReportResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult>.Empty = new global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult(global::System.Array.Empty<global::Omnius.Axis.Models.PublishedShoutReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxPublishedShoutsCount = 2147483647;

    public GetPublishedShoutsReportResult(global::Omnius.Axis.Models.PublishedShoutReport[] publishedShouts)
    {
        if (publishedShouts is null) throw new global::System.ArgumentNullException("publishedShouts");
        if (publishedShouts.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("publishedShouts");
        foreach (var n in publishedShouts)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.PublishedShouts = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.PublishedShoutReport>(publishedShouts);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in publishedShouts)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.PublishedShoutReport> PublishedShouts { get; }

    public static global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult? left, global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult? left, global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.PublishedShouts, target.PublishedShouts)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.PublishedShouts.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.PublishedShouts.Count);
                foreach (var n in value.PublishedShouts)
                {
                    global::Omnius.Axis.Models.PublishedShoutReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.PublishedShoutReport[] p_publishedShouts = global::System.Array.Empty<global::Omnius.Axis.Models.PublishedShoutReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_publishedShouts = new global::Omnius.Axis.Models.PublishedShoutReport[length];
                            for (int i = 0; i < p_publishedShouts.Length; i++)
                            {
                                p_publishedShouts[i] = global::Omnius.Axis.Models.PublishedShoutReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult(p_publishedShouts);
        }
    }
}
public sealed partial class PublishShoutRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishShoutRequest>, global::System.IDisposable
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.PublishShoutRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishShoutRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.PublishShoutRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishShoutRequest>.Empty;

    static PublishShoutRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishShoutRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.PublishShoutRequest>.Empty = new global::Omnius.Axis.Remoting.PublishShoutRequest(global::Omnius.Axis.Models.Shout.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxRegistrantLength = 2147483647;

    public PublishShoutRequest(global::Omnius.Axis.Models.Shout shout, global::Omnius.Core.RocketPack.Utf8String registrant)
    {
        if (shout is null) throw new global::System.ArgumentNullException("shout");
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.Shout = shout;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (shout != default) ___h.Add(shout.GetHashCode());
            if (!registrant.IsEmpty) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public void Dispose()
    {
        this.Shout.Dispose();
    }

    public global::Omnius.Axis.Models.Shout Shout { get; }
    public global::Omnius.Core.RocketPack.Utf8String Registrant { get; }

    public static global::Omnius.Axis.Remoting.PublishShoutRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.PublishShoutRequest? left, global::Omnius.Axis.Remoting.PublishShoutRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.PublishShoutRequest? left, global::Omnius.Axis.Remoting.PublishShoutRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.PublishShoutRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.PublishShoutRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.PublishShoutRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Shout != target.Shout) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.PublishShoutRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.PublishShoutRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Shout != global::Omnius.Axis.Models.Shout.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Axis.Models.Shout.Formatter.Serialize(ref w, value.Shout, rank + 1);
            }
            if (value.Registrant != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.PublishShoutRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.Shout p_shout = global::Omnius.Axis.Models.Shout.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_registrant = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_shout = global::Omnius.Axis.Models.Shout.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.PublishShoutRequest(p_shout, p_registrant);
        }
    }
}
public sealed partial class UnpublishShoutRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishShoutRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.UnpublishShoutRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishShoutRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.UnpublishShoutRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishShoutRequest>.Empty;

    static UnpublishShoutRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishShoutRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnpublishShoutRequest>.Empty = new global::Omnius.Axis.Remoting.UnpublishShoutRequest(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxRegistrantLength = 2147483647;

    public UnpublishShoutRequest(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Utf8String registrant)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.Signature = signature;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (!registrant.IsEmpty) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Utf8String Registrant { get; }

    public static global::Omnius.Axis.Remoting.UnpublishShoutRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.UnpublishShoutRequest? left, global::Omnius.Axis.Remoting.UnpublishShoutRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.UnpublishShoutRequest? left, global::Omnius.Axis.Remoting.UnpublishShoutRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.UnpublishShoutRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.UnpublishShoutRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.UnpublishShoutRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.UnpublishShoutRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.UnpublishShoutRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Registrant != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.UnpublishShoutRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_registrant = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.UnpublishShoutRequest(p_signature, p_registrant);
        }
    }
}
public sealed partial class GetSubscribedShoutsReportResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult>.Formatter;
    public static global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult>.Empty;

    static GetSubscribedShoutsReportResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult>.Empty = new global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult(global::System.Array.Empty<global::Omnius.Axis.Models.SubscribedShoutReport>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSubscribedShoutsCount = 2147483647;

    public GetSubscribedShoutsReportResult(global::Omnius.Axis.Models.SubscribedShoutReport[] subscribedShouts)
    {
        if (subscribedShouts is null) throw new global::System.ArgumentNullException("subscribedShouts");
        if (subscribedShouts.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("subscribedShouts");
        foreach (var n in subscribedShouts)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.SubscribedShouts = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.SubscribedShoutReport>(subscribedShouts);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in subscribedShouts)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axis.Models.SubscribedShoutReport> SubscribedShouts { get; }

    public static global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult? left, global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult? left, global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.SubscribedShouts, target.SubscribedShouts)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.SubscribedShouts.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.SubscribedShouts.Count);
                foreach (var n in value.SubscribedShouts)
                {
                    global::Omnius.Axis.Models.SubscribedShoutReport.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.SubscribedShoutReport[] p_subscribedShouts = global::System.Array.Empty<global::Omnius.Axis.Models.SubscribedShoutReport>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_subscribedShouts = new global::Omnius.Axis.Models.SubscribedShoutReport[length];
                            for (int i = 0; i < p_subscribedShouts.Length; i++)
                            {
                                p_subscribedShouts[i] = global::Omnius.Axis.Models.SubscribedShoutReport.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult(p_subscribedShouts);
        }
    }
}
public sealed partial class SubscribeShoutRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SubscribeShoutRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.SubscribeShoutRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SubscribeShoutRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.SubscribeShoutRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SubscribeShoutRequest>.Empty;

    static SubscribeShoutRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SubscribeShoutRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.SubscribeShoutRequest>.Empty = new global::Omnius.Axis.Remoting.SubscribeShoutRequest(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxRegistrantLength = 2147483647;

    public SubscribeShoutRequest(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Utf8String registrant)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.Signature = signature;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (!registrant.IsEmpty) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Utf8String Registrant { get; }

    public static global::Omnius.Axis.Remoting.SubscribeShoutRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.SubscribeShoutRequest? left, global::Omnius.Axis.Remoting.SubscribeShoutRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.SubscribeShoutRequest? left, global::Omnius.Axis.Remoting.SubscribeShoutRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.SubscribeShoutRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.SubscribeShoutRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.SubscribeShoutRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.SubscribeShoutRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.SubscribeShoutRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Registrant != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.SubscribeShoutRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_registrant = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.SubscribeShoutRequest(p_signature, p_registrant);
        }
    }
}
public sealed partial class UnsubscribeShoutRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnsubscribeShoutRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.UnsubscribeShoutRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnsubscribeShoutRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.UnsubscribeShoutRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnsubscribeShoutRequest>.Empty;

    static UnsubscribeShoutRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnsubscribeShoutRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.UnsubscribeShoutRequest>.Empty = new global::Omnius.Axis.Remoting.UnsubscribeShoutRequest(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxRegistrantLength = 2147483647;

    public UnsubscribeShoutRequest(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Utf8String registrant)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.Signature = signature;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (!registrant.IsEmpty) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Utf8String Registrant { get; }

    public static global::Omnius.Axis.Remoting.UnsubscribeShoutRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.UnsubscribeShoutRequest? left, global::Omnius.Axis.Remoting.UnsubscribeShoutRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.UnsubscribeShoutRequest? left, global::Omnius.Axis.Remoting.UnsubscribeShoutRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.UnsubscribeShoutRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.UnsubscribeShoutRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.UnsubscribeShoutRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.UnsubscribeShoutRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.UnsubscribeShoutRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Registrant != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.UnsubscribeShoutRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_registrant = global::Omnius.Core.RocketPack.Utf8String.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.UnsubscribeShoutRequest(p_signature, p_registrant);
        }
    }
}
public sealed partial class TryExportShoutRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportShoutRequest>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.TryExportShoutRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportShoutRequest>.Formatter;
    public static global::Omnius.Axis.Remoting.TryExportShoutRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportShoutRequest>.Empty;

    static TryExportShoutRequest()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportShoutRequest>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportShoutRequest>.Empty = new global::Omnius.Axis.Remoting.TryExportShoutRequest(global::Omnius.Core.Cryptography.OmniSignature.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TryExportShoutRequest(global::Omnius.Core.Cryptography.OmniSignature signature)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");

        this.Signature = signature;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }

    public static global::Omnius.Axis.Remoting.TryExportShoutRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.TryExportShoutRequest? left, global::Omnius.Axis.Remoting.TryExportShoutRequest? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.TryExportShoutRequest? left, global::Omnius.Axis.Remoting.TryExportShoutRequest? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.TryExportShoutRequest) return false;
        return this.Equals((global::Omnius.Axis.Remoting.TryExportShoutRequest)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.TryExportShoutRequest? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.TryExportShoutRequest>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.TryExportShoutRequest value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.TryExportShoutRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.TryExportShoutRequest(p_signature);
        }
    }
}
public sealed partial class TryExportShoutResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportShoutResult>, global::System.IDisposable
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.TryExportShoutResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportShoutResult>.Formatter;
    public static global::Omnius.Axis.Remoting.TryExportShoutResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportShoutResult>.Empty;

    static TryExportShoutResult()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportShoutResult>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Remoting.TryExportShoutResult>.Empty = new global::Omnius.Axis.Remoting.TryExportShoutResult(null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TryExportShoutResult(global::Omnius.Axis.Models.Shout? shout)
    {
        this.Shout = shout;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (shout != default) ___h.Add(shout.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public void Dispose()
    {
        if (this.Shout is not null) this.Shout.Dispose();
    }

    public global::Omnius.Axis.Models.Shout? Shout { get; }

    public static global::Omnius.Axis.Remoting.TryExportShoutResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Remoting.TryExportShoutResult? left, global::Omnius.Axis.Remoting.TryExportShoutResult? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Remoting.TryExportShoutResult? left, global::Omnius.Axis.Remoting.TryExportShoutResult? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Remoting.TryExportShoutResult) return false;
        return this.Equals((global::Omnius.Axis.Remoting.TryExportShoutResult)other);
    }
    public bool Equals(global::Omnius.Axis.Remoting.TryExportShoutResult? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if ((this.Shout is null) != (target.Shout is null)) return false;
        if ((this.Shout is not null) && (target.Shout is not null) && this.Shout != target.Shout) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Remoting.TryExportShoutResult>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Remoting.TryExportShoutResult value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Shout != null)
            {
                w.Write((uint)1);
                global::Omnius.Axis.Models.Shout.Formatter.Serialize(ref w, value.Shout, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Remoting.TryExportShoutResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.Shout? p_shout = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_shout = global::Omnius.Axis.Models.Shout.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Remoting.TryExportShoutResult(p_shout);
        }
    }
}
public interface IAxisService
{
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetConfigResult> GetConfigAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask SetConfigAsync(global::Omnius.Axis.Remoting.SetConfigRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetSessionsReportResult> GetSessionsReportAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetMyNodeLocationResult> GetMyNodeLocationAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult> GetCloudNodeLocationsAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask AddCloudNodeLocationsAsync(global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetPublishedFilesReportResult> GetPublishedFilesReportAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.PublishFileFromStorageResult> PublishFileFromStorageAsync(global::Omnius.Axis.Remoting.PublishFileFromStorageRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.PublishFileFromMemoryResult> PublishFileFromMemoryAsync(global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask UnpublishFileFromStorageAsync(global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask UnpublishFileFromMemoryAsync(global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult> GetSubscribedFilesReportAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask SubscribeFileAsync(global::Omnius.Axis.Remoting.SubscribeFileRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask UnsubscribeFileAsync(global::Omnius.Axis.Remoting.UnsubscribeFileRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.TryExportFileToStorageResult> TryExportFileToStorageAsync(global::Omnius.Axis.Remoting.TryExportFileToStorageRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.TryExportFileToMemoryResult> TryExportFileToMemoryAsync(global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult> GetPublishedShoutsReportAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask PublishShoutAsync(global::Omnius.Axis.Remoting.PublishShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask UnpublishShoutAsync(global::Omnius.Axis.Remoting.UnpublishShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult> GetSubscribedShoutsReportAsync(global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask SubscribeShoutAsync(global::Omnius.Axis.Remoting.SubscribeShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask UnsubscribeShoutAsync(global::Omnius.Axis.Remoting.UnsubscribeShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.TryExportShoutResult> TryExportShoutAsync(global::Omnius.Axis.Remoting.TryExportShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default);
}
public class AxisServiceRemoting
{
    public class Client<TError> : global::Omnius.Axis.Remoting.IAxisService
        where TError : global::Omnius.Core.RocketPack.IRocketMessage<TError>
    {
        private readonly global::Omnius.Core.RocketPack.Remoting.IRocketRemotingCallerFactory<TError> _callerFactory;
        private readonly global::Omnius.Core.IBytesPool _bytesPool;
        public Client(global::Omnius.Core.RocketPack.Remoting.IRocketRemotingCallerFactory<TError> callerFactory, global::Omnius.Core.IBytesPool bytesPool)
        {
            _callerFactory = callerFactory;
            _bytesPool = bytesPool;
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetConfigResult> GetConfigAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(1, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.GetConfigResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask SetConfigAsync(global::Omnius.Axis.Remoting.SetConfigRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(2, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axis.Remoting.SetConfigRequest>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetSessionsReportResult> GetSessionsReportAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(3, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.GetSessionsReportResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetMyNodeLocationResult> GetMyNodeLocationAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(4, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.GetMyNodeLocationResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult> GetCloudNodeLocationsAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(5, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask AddCloudNodeLocationsAsync(global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(6, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetPublishedFilesReportResult> GetPublishedFilesReportAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(7, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.GetPublishedFilesReportResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.PublishFileFromStorageResult> PublishFileFromStorageAsync(global::Omnius.Axis.Remoting.PublishFileFromStorageRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(8, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.PublishFileFromStorageRequest, global::Omnius.Axis.Remoting.PublishFileFromStorageResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.PublishFileFromMemoryResult> PublishFileFromMemoryAsync(global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(9, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest, global::Omnius.Axis.Remoting.PublishFileFromMemoryResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask UnpublishFileFromStorageAsync(global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(10, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask UnpublishFileFromMemoryAsync(global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(11, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult> GetSubscribedFilesReportAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(12, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask SubscribeFileAsync(global::Omnius.Axis.Remoting.SubscribeFileRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(13, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axis.Remoting.SubscribeFileRequest>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask UnsubscribeFileAsync(global::Omnius.Axis.Remoting.UnsubscribeFileRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(14, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axis.Remoting.UnsubscribeFileRequest>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.TryExportFileToStorageResult> TryExportFileToStorageAsync(global::Omnius.Axis.Remoting.TryExportFileToStorageRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(15, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.TryExportFileToStorageRequest, global::Omnius.Axis.Remoting.TryExportFileToStorageResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.TryExportFileToMemoryResult> TryExportFileToMemoryAsync(global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(16, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest, global::Omnius.Axis.Remoting.TryExportFileToMemoryResult>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult> GetPublishedShoutsReportAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(17, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask PublishShoutAsync(global::Omnius.Axis.Remoting.PublishShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(18, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axis.Remoting.PublishShoutRequest>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask UnpublishShoutAsync(global::Omnius.Axis.Remoting.UnpublishShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(19, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axis.Remoting.UnpublishShoutRequest>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult> GetSubscribedShoutsReportAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(20, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult>(cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask SubscribeShoutAsync(global::Omnius.Axis.Remoting.SubscribeShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(21, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axis.Remoting.SubscribeShoutRequest>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask UnsubscribeShoutAsync(global::Omnius.Axis.Remoting.UnsubscribeShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(22, cancellationToken);
            await caller.CallActionAsync<global::Omnius.Axis.Remoting.UnsubscribeShoutRequest>(param, cancellationToken);
        }
        public async global::System.Threading.Tasks.ValueTask<global::Omnius.Axis.Remoting.TryExportShoutResult> TryExportShoutAsync(global::Omnius.Axis.Remoting.TryExportShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default)
        {
            await using var caller = await _callerFactory.CreateAsync(23, cancellationToken);
            return await caller.CallFunctionAsync<global::Omnius.Axis.Remoting.TryExportShoutRequest, global::Omnius.Axis.Remoting.TryExportShoutResult>(param, cancellationToken);
        }
    }
    public class Server<TError>
        where TError : global::Omnius.Core.RocketPack.IRocketMessage<TError>
    {
        private readonly global::Omnius.Axis.Remoting.IAxisService _service;
        private readonly global::Omnius.Core.RocketPack.Remoting.IRocketRemotingListenerFactory<TError> _listenerFactory;
        private readonly global::Omnius.Core.IBytesPool _bytesPool;
        public Server(global::Omnius.Axis.Remoting.IAxisService service, global::Omnius.Core.RocketPack.Remoting.IRocketRemotingListenerFactory<TError> listenerFactory, global::Omnius.Core.IBytesPool bytesPool)
        {
            _service = service;
            _listenerFactory = listenerFactory;
            _bytesPool = bytesPool;
        }
        public async global::System.Threading.Tasks.Task EventLoopAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await using var listener = await _listenerFactory.CreateAsync(cancellationToken);
                switch (listener.FunctionId)
                {
                    case 1:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.GetConfigResult>(_service.GetConfigAsync, cancellationToken);
                        }
                        break;
                    case 2:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axis.Remoting.SetConfigRequest>(_service.SetConfigAsync, cancellationToken);
                        }
                        break;
                    case 3:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.GetSessionsReportResult>(_service.GetSessionsReportAsync, cancellationToken);
                        }
                        break;
                    case 4:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.GetMyNodeLocationResult>(_service.GetMyNodeLocationAsync, cancellationToken);
                        }
                        break;
                    case 5:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.GetCloudNodeLocationsResult>(_service.GetCloudNodeLocationsAsync, cancellationToken);
                        }
                        break;
                    case 6:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axis.Remoting.AddCloudNodeLocationsRequest>(_service.AddCloudNodeLocationsAsync, cancellationToken);
                        }
                        break;
                    case 7:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.GetPublishedFilesReportResult>(_service.GetPublishedFilesReportAsync, cancellationToken);
                        }
                        break;
                    case 8:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.PublishFileFromStorageRequest, global::Omnius.Axis.Remoting.PublishFileFromStorageResult>(_service.PublishFileFromStorageAsync, cancellationToken);
                        }
                        break;
                    case 9:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.PublishFileFromMemoryRequest, global::Omnius.Axis.Remoting.PublishFileFromMemoryResult>(_service.PublishFileFromMemoryAsync, cancellationToken);
                        }
                        break;
                    case 10:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axis.Remoting.UnpublishFileFromStorageRequest>(_service.UnpublishFileFromStorageAsync, cancellationToken);
                        }
                        break;
                    case 11:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axis.Remoting.UnpublishFileFromMemoryRequest>(_service.UnpublishFileFromMemoryAsync, cancellationToken);
                        }
                        break;
                    case 12:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.GetSubscribedFilesReportResult>(_service.GetSubscribedFilesReportAsync, cancellationToken);
                        }
                        break;
                    case 13:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axis.Remoting.SubscribeFileRequest>(_service.SubscribeFileAsync, cancellationToken);
                        }
                        break;
                    case 14:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axis.Remoting.UnsubscribeFileRequest>(_service.UnsubscribeFileAsync, cancellationToken);
                        }
                        break;
                    case 15:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.TryExportFileToStorageRequest, global::Omnius.Axis.Remoting.TryExportFileToStorageResult>(_service.TryExportFileToStorageAsync, cancellationToken);
                        }
                        break;
                    case 16:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.TryExportFileToMemoryRequest, global::Omnius.Axis.Remoting.TryExportFileToMemoryResult>(_service.TryExportFileToMemoryAsync, cancellationToken);
                        }
                        break;
                    case 17:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.GetPublishedShoutsReportResult>(_service.GetPublishedShoutsReportAsync, cancellationToken);
                        }
                        break;
                    case 18:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axis.Remoting.PublishShoutRequest>(_service.PublishShoutAsync, cancellationToken);
                        }
                        break;
                    case 19:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axis.Remoting.UnpublishShoutRequest>(_service.UnpublishShoutAsync, cancellationToken);
                        }
                        break;
                    case 20:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.GetSubscribedShoutsReportResult>(_service.GetSubscribedShoutsReportAsync, cancellationToken);
                        }
                        break;
                    case 21:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axis.Remoting.SubscribeShoutRequest>(_service.SubscribeShoutAsync, cancellationToken);
                        }
                        break;
                    case 22:
                        {
                            await listener.ListenActionAsync<global::Omnius.Axis.Remoting.UnsubscribeShoutRequest>(_service.UnsubscribeShoutAsync, cancellationToken);
                        }
                        break;
                    case 23:
                        {
                            await listener.ListenFunctionAsync<global::Omnius.Axis.Remoting.TryExportShoutRequest, global::Omnius.Axis.Remoting.TryExportShoutResult>(_service.TryExportShoutAsync, cancellationToken);
                        }
                        break;
                }
            }
        }
    }
}
