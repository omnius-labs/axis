// <auto-generated/>
#nullable enable

namespace Omnius.Axus.Engines.Models;

public sealed partial class ContentClue : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engines.Models.ContentClue>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engines.Models.ContentClue> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engines.Models.ContentClue>.Formatter;
    public static global::Omnius.Axus.Engines.Models.ContentClue Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engines.Models.ContentClue>.Empty;

    static ContentClue()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engines.Models.ContentClue>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Engines.Models.ContentClue>.Empty = new global::Omnius.Axus.Engines.Models.ContentClue(global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.Cryptography.OmniHash.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSchemeLength = 256;

    public ContentClue(global::Omnius.Core.RocketPack.Utf8String scheme, global::Omnius.Core.Cryptography.OmniHash rootHash)
    {
        if (scheme is null) throw new global::System.ArgumentNullException("scheme");
        if (scheme.Length > 256) throw new global::System.ArgumentOutOfRangeException("scheme");
        this.Scheme = scheme;
        this.RootHash = rootHash;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!scheme.IsEmpty) ___h.Add(scheme.GetHashCode());
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String Scheme { get; }
    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }

    public static global::Omnius.Axus.Engines.Models.ContentClue Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Engines.Models.ContentClue? left, global::Omnius.Axus.Engines.Models.ContentClue? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Engines.Models.ContentClue? left, global::Omnius.Axus.Engines.Models.ContentClue? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Engines.Models.ContentClue) return false;
        return this.Equals((global::Omnius.Axus.Engines.Models.ContentClue)other);
    }
    public bool Equals(global::Omnius.Axus.Engines.Models.ContentClue? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Scheme != target.Scheme) return false;
        if (this.RootHash != target.RootHash) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Engines.Models.ContentClue>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axus.Engines.Models.ContentClue value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Scheme != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Scheme);
            }
            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Engines.Models.ContentClue Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_scheme = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_scheme = r.GetString(256);
                            break;
                        }
                    case 2:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Engines.Models.ContentClue(p_scheme, p_rootHash);
        }
    }
}
