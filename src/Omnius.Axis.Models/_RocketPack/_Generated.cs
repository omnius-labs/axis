// <auto-generated/>
#nullable enable

namespace Omnius.Axis.Models;

public enum SessionHandshakeType : byte
{
    Unknown = 0,
    Connected = 1,
    Accepted = 2,
}
public enum TcpProxyType : byte
{
    None = 0,
    HttpProxy = 1,
    Socks5Proxy = 2,
}
public enum SubscribedFileState : byte
{
    Unknown = 0,
    Downloading = 1,
    Downloaded = 2,
    Failed = 3,
}
public sealed partial class NodeLocation : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.NodeLocation>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.NodeLocation> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.NodeLocation>.Formatter;
    public static global::Omnius.Axis.Models.NodeLocation Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.NodeLocation>.Empty;

    static NodeLocation()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.NodeLocation>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.NodeLocation>.Empty = new global::Omnius.Axis.Models.NodeLocation(global::System.Array.Empty<global::Omnius.Core.Net.OmniAddress>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxAddressesCount = 32;

    public NodeLocation(global::Omnius.Core.Net.OmniAddress[] addresses)
    {
        if (addresses is null) throw new global::System.ArgumentNullException("addresses");
        if (addresses.Length > 32) throw new global::System.ArgumentOutOfRangeException("addresses");
        foreach (var n in addresses)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.Addresses = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Net.OmniAddress>(addresses);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in addresses)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Net.OmniAddress> Addresses { get; }

    public static global::Omnius.Axis.Models.NodeLocation Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.NodeLocation? left, global::Omnius.Axis.Models.NodeLocation? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.NodeLocation? left, global::Omnius.Axis.Models.NodeLocation? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.NodeLocation) return false;
        return this.Equals((global::Omnius.Axis.Models.NodeLocation)other);
    }
    public bool Equals(global::Omnius.Axis.Models.NodeLocation? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Addresses, target.Addresses)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.NodeLocation>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.NodeLocation value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Addresses.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Addresses.Count);
                foreach (var n in value.Addresses)
                {
                    global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.NodeLocation Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Net.OmniAddress[] p_addresses = global::System.Array.Empty<global::Omnius.Core.Net.OmniAddress>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_addresses = new global::Omnius.Core.Net.OmniAddress[length];
                            for (int i = 0; i < p_addresses.Length; i++)
                            {
                                p_addresses[i] = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.NodeLocation(p_addresses);
        }
    }
}
public sealed partial class ContentClue : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ContentClue>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.ContentClue> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ContentClue>.Formatter;
    public static global::Omnius.Axis.Models.ContentClue Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ContentClue>.Empty;

    static ContentClue()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ContentClue>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ContentClue>.Empty = new global::Omnius.Axis.Models.ContentClue(string.Empty, global::Omnius.Core.Cryptography.OmniHash.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSchemeLength = 256;

    public ContentClue(string scheme, global::Omnius.Core.Cryptography.OmniHash rootHash)
    {
        if (scheme is null) throw new global::System.ArgumentNullException("scheme");
        if (scheme.Length > 256) throw new global::System.ArgumentOutOfRangeException("scheme");
        this.Scheme = scheme;
        this.RootHash = rootHash;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (scheme != default) ___h.Add(scheme.GetHashCode());
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public string Scheme { get; }
    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }

    public static global::Omnius.Axis.Models.ContentClue Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.ContentClue? left, global::Omnius.Axis.Models.ContentClue? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.ContentClue? left, global::Omnius.Axis.Models.ContentClue? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.ContentClue) return false;
        return this.Equals((global::Omnius.Axis.Models.ContentClue)other);
    }
    public bool Equals(global::Omnius.Axis.Models.ContentClue? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Scheme != target.Scheme) return false;
        if (this.RootHash != target.RootHash) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.ContentClue>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.ContentClue value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Scheme != string.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Scheme);
            }
            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.ContentClue Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            string p_scheme = string.Empty;
            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_scheme = r.GetString(256);
                            break;
                        }
                    case 2:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.ContentClue(p_scheme, p_rootHash);
        }
    }
}
public sealed partial class Shout : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.Shout>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.Shout> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.Shout>.Formatter;
    public static global::Omnius.Axis.Models.Shout Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.Shout>.Empty;

    static Shout()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.Shout>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.Shout>.Empty = new global::Omnius.Axis.Models.Shout(global::Omnius.Core.RocketPack.Timestamp.Zero, global::Omnius.Core.MemoryOwner<byte>.Empty, null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxValueLength = 33554432;

    public Shout(global::Omnius.Core.RocketPack.Timestamp creationTime, global::System.Buffers.IMemoryOwner<byte> value, global::Omnius.Core.Cryptography.OmniCertificate? certificate)
    {
        if (value is null) throw new global::System.ArgumentNullException("value");
        if (value.Memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("value");
        this.CreationTime = creationTime;
        this.Value = value;
        this.Certificate = certificate;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (creationTime != default) ___h.Add(creationTime.GetHashCode());
            if (!value.Memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(value.Memory.Span));
            if (certificate != default) ___h.Add(certificate.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Timestamp CreationTime { get; }
    public global::System.Buffers.IMemoryOwner<byte> Value { get; }
    public global::Omnius.Core.Cryptography.OmniCertificate? Certificate { get; }

    public static global::Omnius.Axis.Models.Shout Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.Shout? left, global::Omnius.Axis.Models.Shout? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.Shout? left, global::Omnius.Axis.Models.Shout? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.Shout) return false;
        return this.Equals((global::Omnius.Axis.Models.Shout)other);
    }
    public bool Equals(global::Omnius.Axis.Models.Shout? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.CreationTime != target.CreationTime) return false;
        if (!global::Omnius.Core.BytesOperations.Equals(this.Value.Memory.Span, target.Value.Memory.Span)) return false;
        if ((this.Certificate is null) != (target.Certificate is null)) return false;
        if ((this.Certificate is not null) && (target.Certificate is not null) && this.Certificate != target.Certificate) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.Shout>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.Shout value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.CreationTime != global::Omnius.Core.RocketPack.Timestamp.Zero)
            {
                w.Write((uint)1);
                w.Write(value.CreationTime);
            }
            if (!value.Value.Memory.IsEmpty)
            {
                w.Write((uint)2);
                w.Write(value.Value.Memory.Span);
            }
            if (value.Certificate != null)
            {
                w.Write((uint)3);
                global::Omnius.Core.Cryptography.OmniCertificate.Formatter.Serialize(ref w, value.Certificate, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.Shout Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Timestamp p_creationTime = global::Omnius.Core.RocketPack.Timestamp.Zero;
            global::System.Buffers.IMemoryOwner<byte> p_value = global::Omnius.Core.MemoryOwner<byte>.Empty;
            global::Omnius.Core.Cryptography.OmniCertificate? p_certificate = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_creationTime = r.GetTimestamp();
                            break;
                        }
                    case 2:
                        {
                            p_value = r.GetRecyclableMemory(33554432);
                            break;
                        }
                    case 3:
                        {
                            p_certificate = global::Omnius.Core.Cryptography.OmniCertificate.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.Shout(p_creationTime, p_value, p_certificate);
        }
    }
}
public sealed partial class ConsistencyReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ConsistencyReport>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.ConsistencyReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ConsistencyReport>.Formatter;
    public static global::Omnius.Axis.Models.ConsistencyReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ConsistencyReport>.Empty;

    static ConsistencyReport()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ConsistencyReport>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ConsistencyReport>.Empty = new global::Omnius.Axis.Models.ConsistencyReport(0, 0, 0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public ConsistencyReport(uint badBlockCount, uint checkedBlockCount, uint totalBlockCount)
    {
        this.BadBlockCount = badBlockCount;
        this.CheckedBlockCount = checkedBlockCount;
        this.TotalBlockCount = totalBlockCount;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (badBlockCount != default) ___h.Add(badBlockCount.GetHashCode());
            if (checkedBlockCount != default) ___h.Add(checkedBlockCount.GetHashCode());
            if (totalBlockCount != default) ___h.Add(totalBlockCount.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public uint BadBlockCount { get; }
    public uint CheckedBlockCount { get; }
    public uint TotalBlockCount { get; }

    public static global::Omnius.Axis.Models.ConsistencyReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.ConsistencyReport? left, global::Omnius.Axis.Models.ConsistencyReport? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.ConsistencyReport? left, global::Omnius.Axis.Models.ConsistencyReport? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.ConsistencyReport) return false;
        return this.Equals((global::Omnius.Axis.Models.ConsistencyReport)other);
    }
    public bool Equals(global::Omnius.Axis.Models.ConsistencyReport? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.BadBlockCount != target.BadBlockCount) return false;
        if (this.CheckedBlockCount != target.CheckedBlockCount) return false;
        if (this.TotalBlockCount != target.TotalBlockCount) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.ConsistencyReport>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.ConsistencyReport value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.BadBlockCount != 0)
            {
                w.Write((uint)1);
                w.Write(value.BadBlockCount);
            }
            if (value.CheckedBlockCount != 0)
            {
                w.Write((uint)2);
                w.Write(value.CheckedBlockCount);
            }
            if (value.TotalBlockCount != 0)
            {
                w.Write((uint)3);
                w.Write(value.TotalBlockCount);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.ConsistencyReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            uint p_badBlockCount = 0;
            uint p_checkedBlockCount = 0;
            uint p_totalBlockCount = 0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_badBlockCount = r.GetUInt32();
                            break;
                        }
                    case 2:
                        {
                            p_checkedBlockCount = r.GetUInt32();
                            break;
                        }
                    case 3:
                        {
                            p_totalBlockCount = r.GetUInt32();
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.ConsistencyReport(p_badBlockCount, p_checkedBlockCount, p_totalBlockCount);
        }
    }
}
public sealed partial class SessionReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SessionReport>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.SessionReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SessionReport>.Formatter;
    public static global::Omnius.Axis.Models.SessionReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SessionReport>.Empty;

    static SessionReport()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SessionReport>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SessionReport>.Empty = new global::Omnius.Axis.Models.SessionReport(string.Empty, (global::Omnius.Axis.Models.SessionHandshakeType)0, global::Omnius.Core.Net.OmniAddress.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxServiceNameLength = 256;

    public SessionReport(string serviceName, global::Omnius.Axis.Models.SessionHandshakeType handshakeType, global::Omnius.Core.Net.OmniAddress address)
    {
        if (serviceName is null) throw new global::System.ArgumentNullException("serviceName");
        if (serviceName.Length > 256) throw new global::System.ArgumentOutOfRangeException("serviceName");
        if (address is null) throw new global::System.ArgumentNullException("address");

        this.ServiceName = serviceName;
        this.HandshakeType = handshakeType;
        this.Address = address;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (serviceName != default) ___h.Add(serviceName.GetHashCode());
            if (handshakeType != default) ___h.Add(handshakeType.GetHashCode());
            if (address != default) ___h.Add(address.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public string ServiceName { get; }
    public global::Omnius.Axis.Models.SessionHandshakeType HandshakeType { get; }
    public global::Omnius.Core.Net.OmniAddress Address { get; }

    public static global::Omnius.Axis.Models.SessionReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.SessionReport? left, global::Omnius.Axis.Models.SessionReport? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.SessionReport? left, global::Omnius.Axis.Models.SessionReport? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.SessionReport) return false;
        return this.Equals((global::Omnius.Axis.Models.SessionReport)other);
    }
    public bool Equals(global::Omnius.Axis.Models.SessionReport? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.ServiceName != target.ServiceName) return false;
        if (this.HandshakeType != target.HandshakeType) return false;
        if (this.Address != target.Address) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.SessionReport>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.SessionReport value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.ServiceName != string.Empty)
            {
                w.Write((uint)1);
                w.Write(value.ServiceName);
            }
            if (value.HandshakeType != (global::Omnius.Axis.Models.SessionHandshakeType)0)
            {
                w.Write((uint)2);
                w.Write((ulong)value.HandshakeType);
            }
            if (value.Address != global::Omnius.Core.Net.OmniAddress.Empty)
            {
                w.Write((uint)3);
                global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, value.Address, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.SessionReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            string p_serviceName = string.Empty;
            global::Omnius.Axis.Models.SessionHandshakeType p_handshakeType = (global::Omnius.Axis.Models.SessionHandshakeType)0;
            global::Omnius.Core.Net.OmniAddress p_address = global::Omnius.Core.Net.OmniAddress.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_serviceName = r.GetString(256);
                            break;
                        }
                    case 2:
                        {
                            p_handshakeType = (global::Omnius.Axis.Models.SessionHandshakeType)r.GetUInt64();
                            break;
                        }
                    case 3:
                        {
                            p_address = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.SessionReport(p_serviceName, p_handshakeType, p_address);
        }
    }
}
public sealed partial class ServiceConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ServiceConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.ServiceConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ServiceConfig>.Formatter;
    public static global::Omnius.Axis.Models.ServiceConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ServiceConfig>.Empty;

    static ServiceConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ServiceConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.ServiceConfig>.Empty = new global::Omnius.Axis.Models.ServiceConfig(null, null, null, null, null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public ServiceConfig(global::Omnius.Axis.Models.BandwidthConfig? bandwidth, global::Omnius.Axis.Models.I2pConnectorConfig? i2pConnector, global::Omnius.Axis.Models.I2pAccepterConfig? i2pAccepter, global::Omnius.Axis.Models.TcpConnectorConfig? tcpConnector, global::Omnius.Axis.Models.TcpAccepterConfig? tcpAccepter)
    {
        this.Bandwidth = bandwidth;
        this.I2pConnector = i2pConnector;
        this.I2pAccepter = i2pAccepter;
        this.TcpConnector = tcpConnector;
        this.TcpAccepter = tcpAccepter;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (bandwidth != default) ___h.Add(bandwidth.GetHashCode());
            if (i2pConnector != default) ___h.Add(i2pConnector.GetHashCode());
            if (i2pAccepter != default) ___h.Add(i2pAccepter.GetHashCode());
            if (tcpConnector != default) ___h.Add(tcpConnector.GetHashCode());
            if (tcpAccepter != default) ___h.Add(tcpAccepter.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axis.Models.BandwidthConfig? Bandwidth { get; }
    public global::Omnius.Axis.Models.I2pConnectorConfig? I2pConnector { get; }
    public global::Omnius.Axis.Models.I2pAccepterConfig? I2pAccepter { get; }
    public global::Omnius.Axis.Models.TcpConnectorConfig? TcpConnector { get; }
    public global::Omnius.Axis.Models.TcpAccepterConfig? TcpAccepter { get; }

    public static global::Omnius.Axis.Models.ServiceConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.ServiceConfig? left, global::Omnius.Axis.Models.ServiceConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.ServiceConfig? left, global::Omnius.Axis.Models.ServiceConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.ServiceConfig) return false;
        return this.Equals((global::Omnius.Axis.Models.ServiceConfig)other);
    }
    public bool Equals(global::Omnius.Axis.Models.ServiceConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if ((this.Bandwidth is null) != (target.Bandwidth is null)) return false;
        if ((this.Bandwidth is not null) && (target.Bandwidth is not null) && this.Bandwidth != target.Bandwidth) return false;
        if ((this.I2pConnector is null) != (target.I2pConnector is null)) return false;
        if ((this.I2pConnector is not null) && (target.I2pConnector is not null) && this.I2pConnector != target.I2pConnector) return false;
        if ((this.I2pAccepter is null) != (target.I2pAccepter is null)) return false;
        if ((this.I2pAccepter is not null) && (target.I2pAccepter is not null) && this.I2pAccepter != target.I2pAccepter) return false;
        if ((this.TcpConnector is null) != (target.TcpConnector is null)) return false;
        if ((this.TcpConnector is not null) && (target.TcpConnector is not null) && this.TcpConnector != target.TcpConnector) return false;
        if ((this.TcpAccepter is null) != (target.TcpAccepter is null)) return false;
        if ((this.TcpAccepter is not null) && (target.TcpAccepter is not null) && this.TcpAccepter != target.TcpAccepter) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.ServiceConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.ServiceConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Bandwidth != null)
            {
                w.Write((uint)1);
                global::Omnius.Axis.Models.BandwidthConfig.Formatter.Serialize(ref w, value.Bandwidth, rank + 1);
            }
            if (value.I2pConnector != null)
            {
                w.Write((uint)2);
                global::Omnius.Axis.Models.I2pConnectorConfig.Formatter.Serialize(ref w, value.I2pConnector, rank + 1);
            }
            if (value.I2pAccepter != null)
            {
                w.Write((uint)3);
                global::Omnius.Axis.Models.I2pAccepterConfig.Formatter.Serialize(ref w, value.I2pAccepter, rank + 1);
            }
            if (value.TcpConnector != null)
            {
                w.Write((uint)4);
                global::Omnius.Axis.Models.TcpConnectorConfig.Formatter.Serialize(ref w, value.TcpConnector, rank + 1);
            }
            if (value.TcpAccepter != null)
            {
                w.Write((uint)5);
                global::Omnius.Axis.Models.TcpAccepterConfig.Formatter.Serialize(ref w, value.TcpAccepter, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.ServiceConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.BandwidthConfig? p_bandwidth = null;
            global::Omnius.Axis.Models.I2pConnectorConfig? p_i2pConnector = null;
            global::Omnius.Axis.Models.I2pAccepterConfig? p_i2pAccepter = null;
            global::Omnius.Axis.Models.TcpConnectorConfig? p_tcpConnector = null;
            global::Omnius.Axis.Models.TcpAccepterConfig? p_tcpAccepter = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_bandwidth = global::Omnius.Axis.Models.BandwidthConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_i2pConnector = global::Omnius.Axis.Models.I2pConnectorConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 3:
                        {
                            p_i2pAccepter = global::Omnius.Axis.Models.I2pAccepterConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 4:
                        {
                            p_tcpConnector = global::Omnius.Axis.Models.TcpConnectorConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 5:
                        {
                            p_tcpAccepter = global::Omnius.Axis.Models.TcpAccepterConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.ServiceConfig(p_bandwidth, p_i2pConnector, p_i2pAccepter, p_tcpConnector, p_tcpAccepter);
        }
    }
}
public sealed partial class BandwidthConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.BandwidthConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.BandwidthConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.BandwidthConfig>.Formatter;
    public static global::Omnius.Axis.Models.BandwidthConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.BandwidthConfig>.Empty;

    static BandwidthConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.BandwidthConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.BandwidthConfig>.Empty = new global::Omnius.Axis.Models.BandwidthConfig(0, 0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public BandwidthConfig(int maxSendBytesPerSeconds, int maxReceiveBytesPerSeconds)
    {
        this.MaxSendBytesPerSeconds = maxSendBytesPerSeconds;
        this.MaxReceiveBytesPerSeconds = maxReceiveBytesPerSeconds;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (maxSendBytesPerSeconds != default) ___h.Add(maxSendBytesPerSeconds.GetHashCode());
            if (maxReceiveBytesPerSeconds != default) ___h.Add(maxReceiveBytesPerSeconds.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public int MaxSendBytesPerSeconds { get; }
    public int MaxReceiveBytesPerSeconds { get; }

    public static global::Omnius.Axis.Models.BandwidthConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.BandwidthConfig? left, global::Omnius.Axis.Models.BandwidthConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.BandwidthConfig? left, global::Omnius.Axis.Models.BandwidthConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.BandwidthConfig) return false;
        return this.Equals((global::Omnius.Axis.Models.BandwidthConfig)other);
    }
    public bool Equals(global::Omnius.Axis.Models.BandwidthConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.MaxSendBytesPerSeconds != target.MaxSendBytesPerSeconds) return false;
        if (this.MaxReceiveBytesPerSeconds != target.MaxReceiveBytesPerSeconds) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.BandwidthConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.BandwidthConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.MaxSendBytesPerSeconds != 0)
            {
                w.Write((uint)1);
                w.Write(value.MaxSendBytesPerSeconds);
            }
            if (value.MaxReceiveBytesPerSeconds != 0)
            {
                w.Write((uint)2);
                w.Write(value.MaxReceiveBytesPerSeconds);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.BandwidthConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            int p_maxSendBytesPerSeconds = 0;
            int p_maxReceiveBytesPerSeconds = 0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_maxSendBytesPerSeconds = r.GetInt32();
                            break;
                        }
                    case 2:
                        {
                            p_maxReceiveBytesPerSeconds = r.GetInt32();
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.BandwidthConfig(p_maxSendBytesPerSeconds, p_maxReceiveBytesPerSeconds);
        }
    }
}
public sealed partial class I2pConnectorConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.I2pConnectorConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.I2pConnectorConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.I2pConnectorConfig>.Formatter;
    public static global::Omnius.Axis.Models.I2pConnectorConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.I2pConnectorConfig>.Empty;

    static I2pConnectorConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.I2pConnectorConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.I2pConnectorConfig>.Empty = new global::Omnius.Axis.Models.I2pConnectorConfig(false, global::Omnius.Core.Net.OmniAddress.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public I2pConnectorConfig(bool isEnabled, global::Omnius.Core.Net.OmniAddress samBridgeAddress)
    {
        if (samBridgeAddress is null) throw new global::System.ArgumentNullException("samBridgeAddress");

        this.IsEnabled = isEnabled;
        this.SamBridgeAddress = samBridgeAddress;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (isEnabled != default) ___h.Add(isEnabled.GetHashCode());
            if (samBridgeAddress != default) ___h.Add(samBridgeAddress.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public bool IsEnabled { get; }
    public global::Omnius.Core.Net.OmniAddress SamBridgeAddress { get; }

    public static global::Omnius.Axis.Models.I2pConnectorConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.I2pConnectorConfig? left, global::Omnius.Axis.Models.I2pConnectorConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.I2pConnectorConfig? left, global::Omnius.Axis.Models.I2pConnectorConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.I2pConnectorConfig) return false;
        return this.Equals((global::Omnius.Axis.Models.I2pConnectorConfig)other);
    }
    public bool Equals(global::Omnius.Axis.Models.I2pConnectorConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.IsEnabled != target.IsEnabled) return false;
        if (this.SamBridgeAddress != target.SamBridgeAddress) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.I2pConnectorConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.I2pConnectorConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.IsEnabled != false)
            {
                w.Write((uint)1);
                w.Write(value.IsEnabled);
            }
            if (value.SamBridgeAddress != global::Omnius.Core.Net.OmniAddress.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, value.SamBridgeAddress, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.I2pConnectorConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            bool p_isEnabled = false;
            global::Omnius.Core.Net.OmniAddress p_samBridgeAddress = global::Omnius.Core.Net.OmniAddress.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_isEnabled = r.GetBoolean();
                            break;
                        }
                    case 2:
                        {
                            p_samBridgeAddress = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.I2pConnectorConfig(p_isEnabled, p_samBridgeAddress);
        }
    }
}
public sealed partial class I2pAccepterConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.I2pAccepterConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.I2pAccepterConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.I2pAccepterConfig>.Formatter;
    public static global::Omnius.Axis.Models.I2pAccepterConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.I2pAccepterConfig>.Empty;

    static I2pAccepterConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.I2pAccepterConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.I2pAccepterConfig>.Empty = new global::Omnius.Axis.Models.I2pAccepterConfig(false, global::Omnius.Core.Net.OmniAddress.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public I2pAccepterConfig(bool isEnabled, global::Omnius.Core.Net.OmniAddress samBridgeAddress)
    {
        if (samBridgeAddress is null) throw new global::System.ArgumentNullException("samBridgeAddress");

        this.IsEnabled = isEnabled;
        this.SamBridgeAddress = samBridgeAddress;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (isEnabled != default) ___h.Add(isEnabled.GetHashCode());
            if (samBridgeAddress != default) ___h.Add(samBridgeAddress.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public bool IsEnabled { get; }
    public global::Omnius.Core.Net.OmniAddress SamBridgeAddress { get; }

    public static global::Omnius.Axis.Models.I2pAccepterConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.I2pAccepterConfig? left, global::Omnius.Axis.Models.I2pAccepterConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.I2pAccepterConfig? left, global::Omnius.Axis.Models.I2pAccepterConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.I2pAccepterConfig) return false;
        return this.Equals((global::Omnius.Axis.Models.I2pAccepterConfig)other);
    }
    public bool Equals(global::Omnius.Axis.Models.I2pAccepterConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.IsEnabled != target.IsEnabled) return false;
        if (this.SamBridgeAddress != target.SamBridgeAddress) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.I2pAccepterConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.I2pAccepterConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.IsEnabled != false)
            {
                w.Write((uint)1);
                w.Write(value.IsEnabled);
            }
            if (value.SamBridgeAddress != global::Omnius.Core.Net.OmniAddress.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, value.SamBridgeAddress, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.I2pAccepterConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            bool p_isEnabled = false;
            global::Omnius.Core.Net.OmniAddress p_samBridgeAddress = global::Omnius.Core.Net.OmniAddress.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_isEnabled = r.GetBoolean();
                            break;
                        }
                    case 2:
                        {
                            p_samBridgeAddress = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.I2pAccepterConfig(p_isEnabled, p_samBridgeAddress);
        }
    }
}
public sealed partial class TcpConnectorConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpConnectorConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.TcpConnectorConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpConnectorConfig>.Formatter;
    public static global::Omnius.Axis.Models.TcpConnectorConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpConnectorConfig>.Empty;

    static TcpConnectorConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpConnectorConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpConnectorConfig>.Empty = new global::Omnius.Axis.Models.TcpConnectorConfig(false, null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TcpConnectorConfig(bool isEnabled, global::Omnius.Axis.Models.TcpProxyConfig? proxy)
    {
        this.IsEnabled = isEnabled;
        this.Proxy = proxy;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (isEnabled != default) ___h.Add(isEnabled.GetHashCode());
            if (proxy != default) ___h.Add(proxy.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public bool IsEnabled { get; }
    public global::Omnius.Axis.Models.TcpProxyConfig? Proxy { get; }

    public static global::Omnius.Axis.Models.TcpConnectorConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.TcpConnectorConfig? left, global::Omnius.Axis.Models.TcpConnectorConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.TcpConnectorConfig? left, global::Omnius.Axis.Models.TcpConnectorConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.TcpConnectorConfig) return false;
        return this.Equals((global::Omnius.Axis.Models.TcpConnectorConfig)other);
    }
    public bool Equals(global::Omnius.Axis.Models.TcpConnectorConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.IsEnabled != target.IsEnabled) return false;
        if ((this.Proxy is null) != (target.Proxy is null)) return false;
        if ((this.Proxy is not null) && (target.Proxy is not null) && this.Proxy != target.Proxy) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.TcpConnectorConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.TcpConnectorConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.IsEnabled != false)
            {
                w.Write((uint)1);
                w.Write(value.IsEnabled);
            }
            if (value.Proxy != null)
            {
                w.Write((uint)2);
                global::Omnius.Axis.Models.TcpProxyConfig.Formatter.Serialize(ref w, value.Proxy, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.TcpConnectorConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            bool p_isEnabled = false;
            global::Omnius.Axis.Models.TcpProxyConfig? p_proxy = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_isEnabled = r.GetBoolean();
                            break;
                        }
                    case 2:
                        {
                            p_proxy = global::Omnius.Axis.Models.TcpProxyConfig.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.TcpConnectorConfig(p_isEnabled, p_proxy);
        }
    }
}
public sealed partial class TcpProxyConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpProxyConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.TcpProxyConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpProxyConfig>.Formatter;
    public static global::Omnius.Axis.Models.TcpProxyConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpProxyConfig>.Empty;

    static TcpProxyConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpProxyConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpProxyConfig>.Empty = new global::Omnius.Axis.Models.TcpProxyConfig((global::Omnius.Axis.Models.TcpProxyType)0, global::Omnius.Core.Net.OmniAddress.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TcpProxyConfig(global::Omnius.Axis.Models.TcpProxyType type, global::Omnius.Core.Net.OmniAddress address)
    {
        if (address is null) throw new global::System.ArgumentNullException("address");

        this.Type = type;
        this.Address = address;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (type != default) ___h.Add(type.GetHashCode());
            if (address != default) ___h.Add(address.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Axis.Models.TcpProxyType Type { get; }
    public global::Omnius.Core.Net.OmniAddress Address { get; }

    public static global::Omnius.Axis.Models.TcpProxyConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.TcpProxyConfig? left, global::Omnius.Axis.Models.TcpProxyConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.TcpProxyConfig? left, global::Omnius.Axis.Models.TcpProxyConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.TcpProxyConfig) return false;
        return this.Equals((global::Omnius.Axis.Models.TcpProxyConfig)other);
    }
    public bool Equals(global::Omnius.Axis.Models.TcpProxyConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Type != target.Type) return false;
        if (this.Address != target.Address) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.TcpProxyConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.TcpProxyConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Type != (global::Omnius.Axis.Models.TcpProxyType)0)
            {
                w.Write((uint)1);
                w.Write((ulong)value.Type);
            }
            if (value.Address != global::Omnius.Core.Net.OmniAddress.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, value.Address, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.TcpProxyConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Axis.Models.TcpProxyType p_type = (global::Omnius.Axis.Models.TcpProxyType)0;
            global::Omnius.Core.Net.OmniAddress p_address = global::Omnius.Core.Net.OmniAddress.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_type = (global::Omnius.Axis.Models.TcpProxyType)r.GetUInt64();
                            break;
                        }
                    case 2:
                        {
                            p_address = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.TcpProxyConfig(p_type, p_address);
        }
    }
}
public sealed partial class TcpAccepterConfig : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpAccepterConfig>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.TcpAccepterConfig> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpAccepterConfig>.Formatter;
    public static global::Omnius.Axis.Models.TcpAccepterConfig Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpAccepterConfig>.Empty;

    static TcpAccepterConfig()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpAccepterConfig>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.TcpAccepterConfig>.Empty = new global::Omnius.Axis.Models.TcpAccepterConfig(false, false, global::Omnius.Core.Net.OmniAddress.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public TcpAccepterConfig(bool isEnabled, bool useUpnp, global::Omnius.Core.Net.OmniAddress listenAddress)
    {
        if (listenAddress is null) throw new global::System.ArgumentNullException("listenAddress");

        this.IsEnabled = isEnabled;
        this.UseUpnp = useUpnp;
        this.ListenAddress = listenAddress;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (isEnabled != default) ___h.Add(isEnabled.GetHashCode());
            if (useUpnp != default) ___h.Add(useUpnp.GetHashCode());
            if (listenAddress != default) ___h.Add(listenAddress.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public bool IsEnabled { get; }
    public bool UseUpnp { get; }
    public global::Omnius.Core.Net.OmniAddress ListenAddress { get; }

    public static global::Omnius.Axis.Models.TcpAccepterConfig Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.TcpAccepterConfig? left, global::Omnius.Axis.Models.TcpAccepterConfig? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.TcpAccepterConfig? left, global::Omnius.Axis.Models.TcpAccepterConfig? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.TcpAccepterConfig) return false;
        return this.Equals((global::Omnius.Axis.Models.TcpAccepterConfig)other);
    }
    public bool Equals(global::Omnius.Axis.Models.TcpAccepterConfig? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.IsEnabled != target.IsEnabled) return false;
        if (this.UseUpnp != target.UseUpnp) return false;
        if (this.ListenAddress != target.ListenAddress) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.TcpAccepterConfig>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.TcpAccepterConfig value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.IsEnabled != false)
            {
                w.Write((uint)1);
                w.Write(value.IsEnabled);
            }
            if (value.UseUpnp != false)
            {
                w.Write((uint)2);
                w.Write(value.UseUpnp);
            }
            if (value.ListenAddress != global::Omnius.Core.Net.OmniAddress.Empty)
            {
                w.Write((uint)3);
                global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, value.ListenAddress, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.TcpAccepterConfig Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            bool p_isEnabled = false;
            bool p_useUpnp = false;
            global::Omnius.Core.Net.OmniAddress p_listenAddress = global::Omnius.Core.Net.OmniAddress.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_isEnabled = r.GetBoolean();
                            break;
                        }
                    case 2:
                        {
                            p_useUpnp = r.GetBoolean();
                            break;
                        }
                    case 3:
                        {
                            p_listenAddress = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.TcpAccepterConfig(p_isEnabled, p_useUpnp, p_listenAddress);
        }
    }
}
public sealed partial class PublishedFileReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.PublishedFileReport>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.PublishedFileReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.PublishedFileReport>.Formatter;
    public static global::Omnius.Axis.Models.PublishedFileReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.PublishedFileReport>.Empty;

    static PublishedFileReport()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.PublishedFileReport>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.PublishedFileReport>.Empty = new global::Omnius.Axis.Models.PublishedFileReport(null, null, string.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxFilePathLength = 2147483647;
    public static readonly int MaxRegistrantLength = 2147483647;

    public PublishedFileReport(string? filePath, global::Omnius.Core.Cryptography.OmniHash? rootHash, string registrant)
    {
        if (filePath is not null && filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.FilePath = filePath;
        this.RootHash = rootHash;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (filePath != default) ___h.Add(filePath.GetHashCode());
            if (rootHash is not null) ___h.Add(rootHash.Value.GetHashCode());
            if (registrant != default) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public string? FilePath { get; }
    public global::Omnius.Core.Cryptography.OmniHash? RootHash { get; }
    public string Registrant { get; }

    public static global::Omnius.Axis.Models.PublishedFileReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.PublishedFileReport? left, global::Omnius.Axis.Models.PublishedFileReport? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.PublishedFileReport? left, global::Omnius.Axis.Models.PublishedFileReport? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.PublishedFileReport) return false;
        return this.Equals((global::Omnius.Axis.Models.PublishedFileReport)other);
    }
    public bool Equals(global::Omnius.Axis.Models.PublishedFileReport? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.FilePath != target.FilePath) return false;
        if ((this.RootHash is null) != (target.RootHash is null)) return false;
        if ((this.RootHash is not null) && (target.RootHash is not null) && this.RootHash != target.RootHash) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.PublishedFileReport>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.PublishedFileReport value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.FilePath != null)
            {
                w.Write((uint)1);
                w.Write(value.FilePath);
            }
            if (value.RootHash != null)
            {
                w.Write((uint)2);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash.Value, rank + 1);
            }
            if (value.Registrant != string.Empty)
            {
                w.Write((uint)3);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.PublishedFileReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            string? p_filePath = null;
            global::Omnius.Core.Cryptography.OmniHash? p_rootHash = null;
            string p_registrant = string.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_filePath = r.GetString(2147483647);
                            break;
                        }
                    case 2:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 3:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.PublishedFileReport(p_filePath, p_rootHash, p_registrant);
        }
    }
}
public sealed partial class SubscribedFileReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedFileReport>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.SubscribedFileReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedFileReport>.Formatter;
    public static global::Omnius.Axis.Models.SubscribedFileReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedFileReport>.Empty;

    static SubscribedFileReport()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedFileReport>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedFileReport>.Empty = new global::Omnius.Axis.Models.SubscribedFileReport(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty, global::Omnius.Axis.Models.SubscribedFileStatus.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxRegistrantLength = 2147483647;

    public SubscribedFileReport(global::Omnius.Core.Cryptography.OmniHash rootHash, string registrant, global::Omnius.Axis.Models.SubscribedFileStatus status)
    {
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");
        if (status is null) throw new global::System.ArgumentNullException("status");

        this.RootHash = rootHash;
        this.Registrant = registrant;
        this.Status = status;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            if (registrant != default) ___h.Add(registrant.GetHashCode());
            if (status != default) ___h.Add(status.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public string Registrant { get; }
    public global::Omnius.Axis.Models.SubscribedFileStatus Status { get; }

    public static global::Omnius.Axis.Models.SubscribedFileReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.SubscribedFileReport? left, global::Omnius.Axis.Models.SubscribedFileReport? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.SubscribedFileReport? left, global::Omnius.Axis.Models.SubscribedFileReport? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.SubscribedFileReport) return false;
        return this.Equals((global::Omnius.Axis.Models.SubscribedFileReport)other);
    }
    public bool Equals(global::Omnius.Axis.Models.SubscribedFileReport? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (this.Registrant != target.Registrant) return false;
        if (this.Status != target.Status) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.SubscribedFileReport>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.SubscribedFileReport value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.Registrant != string.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            if (value.Status != global::Omnius.Axis.Models.SubscribedFileStatus.Empty)
            {
                w.Write((uint)3);
                global::Omnius.Axis.Models.SubscribedFileStatus.Formatter.Serialize(ref w, value.Status, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.SubscribedFileReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            string p_registrant = string.Empty;
            global::Omnius.Axis.Models.SubscribedFileStatus p_status = global::Omnius.Axis.Models.SubscribedFileStatus.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                    case 3:
                        {
                            p_status = global::Omnius.Axis.Models.SubscribedFileStatus.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.SubscribedFileReport(p_rootHash, p_registrant, p_status);
        }
    }
}
public sealed partial class SubscribedFileStatus : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedFileStatus>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.SubscribedFileStatus> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedFileStatus>.Formatter;
    public static global::Omnius.Axis.Models.SubscribedFileStatus Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedFileStatus>.Empty;

    static SubscribedFileStatus()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedFileStatus>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedFileStatus>.Empty = new global::Omnius.Axis.Models.SubscribedFileStatus(0, 0, 0, (global::Omnius.Axis.Models.SubscribedFileState)0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public SubscribedFileStatus(int currentDepth, uint downloadedBlockCount, uint totalBlockCount, global::Omnius.Axis.Models.SubscribedFileState state)
    {
        this.CurrentDepth = currentDepth;
        this.DownloadedBlockCount = downloadedBlockCount;
        this.TotalBlockCount = totalBlockCount;
        this.State = state;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (currentDepth != default) ___h.Add(currentDepth.GetHashCode());
            if (downloadedBlockCount != default) ___h.Add(downloadedBlockCount.GetHashCode());
            if (totalBlockCount != default) ___h.Add(totalBlockCount.GetHashCode());
            if (state != default) ___h.Add(state.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public int CurrentDepth { get; }
    public uint DownloadedBlockCount { get; }
    public uint TotalBlockCount { get; }
    public global::Omnius.Axis.Models.SubscribedFileState State { get; }

    public static global::Omnius.Axis.Models.SubscribedFileStatus Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.SubscribedFileStatus? left, global::Omnius.Axis.Models.SubscribedFileStatus? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.SubscribedFileStatus? left, global::Omnius.Axis.Models.SubscribedFileStatus? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.SubscribedFileStatus) return false;
        return this.Equals((global::Omnius.Axis.Models.SubscribedFileStatus)other);
    }
    public bool Equals(global::Omnius.Axis.Models.SubscribedFileStatus? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.CurrentDepth != target.CurrentDepth) return false;
        if (this.DownloadedBlockCount != target.DownloadedBlockCount) return false;
        if (this.TotalBlockCount != target.TotalBlockCount) return false;
        if (this.State != target.State) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.SubscribedFileStatus>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.SubscribedFileStatus value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.CurrentDepth != 0)
            {
                w.Write((uint)1);
                w.Write(value.CurrentDepth);
            }
            if (value.DownloadedBlockCount != 0)
            {
                w.Write((uint)2);
                w.Write(value.DownloadedBlockCount);
            }
            if (value.TotalBlockCount != 0)
            {
                w.Write((uint)3);
                w.Write(value.TotalBlockCount);
            }
            if (value.State != (global::Omnius.Axis.Models.SubscribedFileState)0)
            {
                w.Write((uint)4);
                w.Write((ulong)value.State);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.SubscribedFileStatus Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            int p_currentDepth = 0;
            uint p_downloadedBlockCount = 0;
            uint p_totalBlockCount = 0;
            global::Omnius.Axis.Models.SubscribedFileState p_state = (global::Omnius.Axis.Models.SubscribedFileState)0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_currentDepth = r.GetInt32();
                            break;
                        }
                    case 2:
                        {
                            p_downloadedBlockCount = r.GetUInt32();
                            break;
                        }
                    case 3:
                        {
                            p_totalBlockCount = r.GetUInt32();
                            break;
                        }
                    case 4:
                        {
                            p_state = (global::Omnius.Axis.Models.SubscribedFileState)r.GetUInt64();
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.SubscribedFileStatus(p_currentDepth, p_downloadedBlockCount, p_totalBlockCount, p_state);
        }
    }
}
public sealed partial class PublishedShoutReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.PublishedShoutReport>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.PublishedShoutReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.PublishedShoutReport>.Formatter;
    public static global::Omnius.Axis.Models.PublishedShoutReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.PublishedShoutReport>.Empty;

    static PublishedShoutReport()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.PublishedShoutReport>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.PublishedShoutReport>.Empty = new global::Omnius.Axis.Models.PublishedShoutReport(global::Omnius.Core.Cryptography.OmniSignature.Empty, string.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxRegistrantLength = 2147483647;

    public PublishedShoutReport(global::Omnius.Core.Cryptography.OmniSignature signature, string registrant)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.Signature = signature;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (registrant != default) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public string Registrant { get; }

    public static global::Omnius.Axis.Models.PublishedShoutReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.PublishedShoutReport? left, global::Omnius.Axis.Models.PublishedShoutReport? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.PublishedShoutReport? left, global::Omnius.Axis.Models.PublishedShoutReport? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.PublishedShoutReport) return false;
        return this.Equals((global::Omnius.Axis.Models.PublishedShoutReport)other);
    }
    public bool Equals(global::Omnius.Axis.Models.PublishedShoutReport? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.PublishedShoutReport>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.PublishedShoutReport value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Registrant != string.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.PublishedShoutReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            string p_registrant = string.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.PublishedShoutReport(p_signature, p_registrant);
        }
    }
}
public sealed partial class SubscribedShoutReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedShoutReport>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.SubscribedShoutReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedShoutReport>.Formatter;
    public static global::Omnius.Axis.Models.SubscribedShoutReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedShoutReport>.Empty;

    static SubscribedShoutReport()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedShoutReport>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axis.Models.SubscribedShoutReport>.Empty = new global::Omnius.Axis.Models.SubscribedShoutReport(global::Omnius.Core.Cryptography.OmniSignature.Empty, string.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxRegistrantLength = 2147483647;

    public SubscribedShoutReport(global::Omnius.Core.Cryptography.OmniSignature signature, string registrant)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (registrant is null) throw new global::System.ArgumentNullException("registrant");
        if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

        this.Signature = signature;
        this.Registrant = registrant;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (registrant != default) ___h.Add(registrant.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public string Registrant { get; }

    public static global::Omnius.Axis.Models.SubscribedShoutReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axis.Models.SubscribedShoutReport? left, global::Omnius.Axis.Models.SubscribedShoutReport? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axis.Models.SubscribedShoutReport? left, global::Omnius.Axis.Models.SubscribedShoutReport? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axis.Models.SubscribedShoutReport) return false;
        return this.Equals((global::Omnius.Axis.Models.SubscribedShoutReport)other);
    }
    public bool Equals(global::Omnius.Axis.Models.SubscribedShoutReport? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Registrant != target.Registrant) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axis.Models.SubscribedShoutReport>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Axis.Models.SubscribedShoutReport value, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Registrant != string.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Registrant);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axis.Models.SubscribedShoutReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            string p_registrant = string.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_registrant = r.GetString(2147483647);
                            break;
                        }
                }
            }

            return new global::Omnius.Axis.Models.SubscribedShoutReport(p_signature, p_registrant);
        }
    }
}
