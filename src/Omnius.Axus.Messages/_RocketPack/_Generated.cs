// <auto-generated/>
#nullable enable

namespace Omnius.Axus.Messages;

public enum SessionHandshakeType : byte
{
    Unknown = 0,
    Connected = 1,
    Accepted = 2,
}
public enum SubscribedFileState : byte
{
    Unknown = 0,
    Downloading = 1,
    Downloaded = 2,
    Failed = 3,
}
public sealed partial class NodeLocation : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.NodeLocation>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.NodeLocation> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.NodeLocation>.Formatter;
    public static global::Omnius.Axus.Messages.NodeLocation Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.NodeLocation>.Empty;

    static NodeLocation()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.NodeLocation>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.NodeLocation>.Empty = new global::Omnius.Axus.Messages.NodeLocation(global::System.Array.Empty<global::Omnius.Core.Net.OmniAddress>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxAddressesCount = 32;

    public NodeLocation(global::Omnius.Core.Net.OmniAddress[] addresses)
    {
        if (addresses is null) throw new global::System.ArgumentNullException("addresses");
        if (addresses.Length > 32) throw new global::System.ArgumentOutOfRangeException("addresses");
        foreach (var n in addresses)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.Addresses = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Net.OmniAddress>(addresses);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            foreach (var n in addresses)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Net.OmniAddress> Addresses { get; }

    public static global::Omnius.Axus.Messages.NodeLocation Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Messages.NodeLocation? left, global::Omnius.Axus.Messages.NodeLocation? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Messages.NodeLocation? left, global::Omnius.Axus.Messages.NodeLocation? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Messages.NodeLocation) return false;
        return this.Equals((global::Omnius.Axus.Messages.NodeLocation)other);
    }
    public bool Equals(global::Omnius.Axus.Messages.NodeLocation? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Addresses, target.Addresses)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.NodeLocation>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Messages.NodeLocation value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Addresses.Count != 0)
            {
                w.Write((uint)1);
                w.Write((uint)value.Addresses.Count);
                foreach (var n in value.Addresses)
                {
                    global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Messages.NodeLocation Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Net.OmniAddress[] p_addresses = global::System.Array.Empty<global::Omnius.Core.Net.OmniAddress>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            var length = r.GetUInt32();
                            p_addresses = new global::Omnius.Core.Net.OmniAddress[length];
                            for (int i = 0; i < p_addresses.Length; i++)
                            {
                                p_addresses[i] = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Messages.NodeLocation(p_addresses);
        }
    }
}
public sealed partial class Shout : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.Shout>, global::System.IDisposable
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.Shout> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.Shout>.Formatter;
    public static global::Omnius.Axus.Messages.Shout Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.Shout>.Empty;

    static Shout()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.Shout>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.Shout>.Empty = new global::Omnius.Axus.Messages.Shout(global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.RocketPack.Timestamp64.Zero, global::Omnius.Core.MemoryOwner<byte>.Empty, null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxChannelLength = 256;
    public static readonly int MaxValueLength = 33554432;

    public Shout(global::Omnius.Core.RocketPack.Utf8String channel, global::Omnius.Core.RocketPack.Timestamp64 createdTime, global::System.Buffers.IMemoryOwner<byte> value, global::Omnius.Core.Cryptography.OmniCertificate? certificate)
    {
        if (channel is null) throw new global::System.ArgumentNullException("channel");
        if (channel.Length > 256) throw new global::System.ArgumentOutOfRangeException("channel");
        if (value is null) throw new global::System.ArgumentNullException("value");
        if (value.Memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("value");
        this.Channel = channel;
        this.CreatedTime = createdTime;
        this.Value = value;
        this.Certificate = certificate;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!channel.IsEmpty) ___h.Add(channel.GetHashCode());
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            if (!value.Memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(value.Memory.Span));
            if (certificate != default) ___h.Add(certificate.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public void Dispose()
    {
        this.Value.Dispose();
    }

    public global::Omnius.Core.RocketPack.Utf8String Channel { get; }
    public global::Omnius.Core.RocketPack.Timestamp64 CreatedTime { get; }
    public global::System.Buffers.IMemoryOwner<byte> Value { get; }
    public global::Omnius.Core.Cryptography.OmniCertificate? Certificate { get; }

    public static global::Omnius.Axus.Messages.Shout Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Messages.Shout? left, global::Omnius.Axus.Messages.Shout? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Messages.Shout? left, global::Omnius.Axus.Messages.Shout? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Messages.Shout) return false;
        return this.Equals((global::Omnius.Axus.Messages.Shout)other);
    }
    public bool Equals(global::Omnius.Axus.Messages.Shout? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Channel != target.Channel) return false;
        if (this.CreatedTime != target.CreatedTime) return false;
        if (!global::Omnius.Core.BytesOperations.Equals(this.Value.Memory.Span, target.Value.Memory.Span)) return false;
        if ((this.Certificate is null) != (target.Certificate is null)) return false;
        if ((this.Certificate is not null) && (target.Certificate is not null) && this.Certificate != target.Certificate) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.Shout>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Messages.Shout value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Channel != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Channel);
            }
            if (value.CreatedTime != global::Omnius.Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)2);
                w.Write(value.CreatedTime);
            }
            if (!value.Value.Memory.IsEmpty)
            {
                w.Write((uint)3);
                w.Write(value.Value.Memory.Span);
            }
            if (value.Certificate != null)
            {
                w.Write((uint)4);
                global::Omnius.Core.Cryptography.OmniCertificate.Formatter.Serialize(ref w, value.Certificate, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Messages.Shout Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_channel = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.RocketPack.Timestamp64 p_createdTime = global::Omnius.Core.RocketPack.Timestamp64.Zero;
            global::System.Buffers.IMemoryOwner<byte> p_value = global::Omnius.Core.MemoryOwner<byte>.Empty;
            global::Omnius.Core.Cryptography.OmniCertificate? p_certificate = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_channel = r.GetString(256);
                            break;
                        }
                    case 2:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                    case 3:
                        {
                            p_value = r.GetRecyclableMemory(33554432);
                            break;
                        }
                    case 4:
                        {
                            p_certificate = global::Omnius.Core.Cryptography.OmniCertificate.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Messages.Shout(p_channel, p_createdTime, p_value, p_certificate);
        }
    }
}
public sealed partial class AttachedProperty : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.AttachedProperty>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.AttachedProperty> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.AttachedProperty>.Formatter;
    public static global::Omnius.Axus.Messages.AttachedProperty Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.AttachedProperty>.Empty;

    static AttachedProperty()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.AttachedProperty>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.AttachedProperty>.Empty = new global::Omnius.Axus.Messages.AttachedProperty(global::Omnius.Core.RocketPack.Utf8String.Empty, global::System.ReadOnlyMemory<byte>.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNameLength = 256;
    public static readonly int MaxValueLength = 32768;

    public AttachedProperty(global::Omnius.Core.RocketPack.Utf8String name, global::System.ReadOnlyMemory<byte> value)
    {
        if (name is null) throw new global::System.ArgumentNullException("name");
        if (name.Length > 256) throw new global::System.ArgumentOutOfRangeException("name");
        if (value.Length > 32768) throw new global::System.ArgumentOutOfRangeException("value");

        this.Name = name;
        this.Value = value;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!name.IsEmpty) ___h.Add(name.GetHashCode());
            if (!value.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(value.Span));
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String Name { get; }
    public global::System.ReadOnlyMemory<byte> Value { get; }

    public static global::Omnius.Axus.Messages.AttachedProperty Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Messages.AttachedProperty? left, global::Omnius.Axus.Messages.AttachedProperty? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Messages.AttachedProperty? left, global::Omnius.Axus.Messages.AttachedProperty? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Messages.AttachedProperty) return false;
        return this.Equals((global::Omnius.Axus.Messages.AttachedProperty)other);
    }
    public bool Equals(global::Omnius.Axus.Messages.AttachedProperty? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Name != target.Name) return false;
        if (!global::Omnius.Core.BytesOperations.Equals(this.Value.Span, target.Value.Span)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.AttachedProperty>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Messages.AttachedProperty value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Name != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Name);
            }
            if (!value.Value.IsEmpty)
            {
                w.Write((uint)2);
                w.Write(value.Value.Span);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Messages.AttachedProperty Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_name = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::System.ReadOnlyMemory<byte> p_value = global::System.ReadOnlyMemory<byte>.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_name = r.GetString(256);
                            break;
                        }
                    case 2:
                        {
                            p_value = r.GetMemory(32768);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Messages.AttachedProperty(p_name, p_value);
        }
    }
}
public sealed partial class ConsistencyReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.ConsistencyReport>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.ConsistencyReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.ConsistencyReport>.Formatter;
    public static global::Omnius.Axus.Messages.ConsistencyReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.ConsistencyReport>.Empty;

    static ConsistencyReport()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.ConsistencyReport>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.ConsistencyReport>.Empty = new global::Omnius.Axus.Messages.ConsistencyReport(0, 0, 0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public ConsistencyReport(uint badBlockCount, uint checkedBlockCount, uint totalBlockCount)
    {
        this.BadBlockCount = badBlockCount;
        this.CheckedBlockCount = checkedBlockCount;
        this.TotalBlockCount = totalBlockCount;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (badBlockCount != default) ___h.Add(badBlockCount.GetHashCode());
            if (checkedBlockCount != default) ___h.Add(checkedBlockCount.GetHashCode());
            if (totalBlockCount != default) ___h.Add(totalBlockCount.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public uint BadBlockCount { get; }
    public uint CheckedBlockCount { get; }
    public uint TotalBlockCount { get; }

    public static global::Omnius.Axus.Messages.ConsistencyReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Messages.ConsistencyReport? left, global::Omnius.Axus.Messages.ConsistencyReport? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Messages.ConsistencyReport? left, global::Omnius.Axus.Messages.ConsistencyReport? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Messages.ConsistencyReport) return false;
        return this.Equals((global::Omnius.Axus.Messages.ConsistencyReport)other);
    }
    public bool Equals(global::Omnius.Axus.Messages.ConsistencyReport? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.BadBlockCount != target.BadBlockCount) return false;
        if (this.CheckedBlockCount != target.CheckedBlockCount) return false;
        if (this.TotalBlockCount != target.TotalBlockCount) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.ConsistencyReport>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Messages.ConsistencyReport value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.BadBlockCount != 0)
            {
                w.Write((uint)1);
                w.Write(value.BadBlockCount);
            }
            if (value.CheckedBlockCount != 0)
            {
                w.Write((uint)2);
                w.Write(value.CheckedBlockCount);
            }
            if (value.TotalBlockCount != 0)
            {
                w.Write((uint)3);
                w.Write(value.TotalBlockCount);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Messages.ConsistencyReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            uint p_badBlockCount = 0;
            uint p_checkedBlockCount = 0;
            uint p_totalBlockCount = 0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_badBlockCount = r.GetUInt32();
                            break;
                        }
                    case 2:
                        {
                            p_checkedBlockCount = r.GetUInt32();
                            break;
                        }
                    case 3:
                        {
                            p_totalBlockCount = r.GetUInt32();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Messages.ConsistencyReport(p_badBlockCount, p_checkedBlockCount, p_totalBlockCount);
        }
    }
}
public sealed partial class SessionReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SessionReport>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.SessionReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SessionReport>.Formatter;
    public static global::Omnius.Axus.Messages.SessionReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SessionReport>.Empty;

    static SessionReport()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SessionReport>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SessionReport>.Empty = new global::Omnius.Axus.Messages.SessionReport(global::Omnius.Core.RocketPack.Utf8String.Empty, (global::Omnius.Axus.Messages.SessionHandshakeType)0, global::Omnius.Core.Net.OmniAddress.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSchemeLength = 256;

    public SessionReport(global::Omnius.Core.RocketPack.Utf8String scheme, global::Omnius.Axus.Messages.SessionHandshakeType handshakeType, global::Omnius.Core.Net.OmniAddress address)
    {
        if (scheme is null) throw new global::System.ArgumentNullException("scheme");
        if (scheme.Length > 256) throw new global::System.ArgumentOutOfRangeException("scheme");
        if (address is null) throw new global::System.ArgumentNullException("address");

        this.Scheme = scheme;
        this.HandshakeType = handshakeType;
        this.Address = address;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!scheme.IsEmpty) ___h.Add(scheme.GetHashCode());
            if (handshakeType != default) ___h.Add(handshakeType.GetHashCode());
            if (address != default) ___h.Add(address.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String Scheme { get; }
    public global::Omnius.Axus.Messages.SessionHandshakeType HandshakeType { get; }
    public global::Omnius.Core.Net.OmniAddress Address { get; }

    public static global::Omnius.Axus.Messages.SessionReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Messages.SessionReport? left, global::Omnius.Axus.Messages.SessionReport? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Messages.SessionReport? left, global::Omnius.Axus.Messages.SessionReport? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Messages.SessionReport) return false;
        return this.Equals((global::Omnius.Axus.Messages.SessionReport)other);
    }
    public bool Equals(global::Omnius.Axus.Messages.SessionReport? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Scheme != target.Scheme) return false;
        if (this.HandshakeType != target.HandshakeType) return false;
        if (this.Address != target.Address) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.SessionReport>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Messages.SessionReport value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Scheme != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Scheme);
            }
            if (value.HandshakeType != (global::Omnius.Axus.Messages.SessionHandshakeType)0)
            {
                w.Write((uint)2);
                w.Write((ulong)value.HandshakeType);
            }
            if (value.Address != global::Omnius.Core.Net.OmniAddress.Empty)
            {
                w.Write((uint)3);
                global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, value.Address, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Messages.SessionReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String p_scheme = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Axus.Messages.SessionHandshakeType p_handshakeType = (global::Omnius.Axus.Messages.SessionHandshakeType)0;
            global::Omnius.Core.Net.OmniAddress p_address = global::Omnius.Core.Net.OmniAddress.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_scheme = r.GetString(256);
                            break;
                        }
                    case 2:
                        {
                            p_handshakeType = (global::Omnius.Axus.Messages.SessionHandshakeType)r.GetUInt64();
                            break;
                        }
                    case 3:
                        {
                            p_address = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Messages.SessionReport(p_scheme, p_handshakeType, p_address);
        }
    }
}
public sealed partial class PublishedFileReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.PublishedFileReport>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.PublishedFileReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.PublishedFileReport>.Formatter;
    public static global::Omnius.Axus.Messages.PublishedFileReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.PublishedFileReport>.Empty;

    static PublishedFileReport()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.PublishedFileReport>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.PublishedFileReport>.Empty = new global::Omnius.Axus.Messages.PublishedFileReport(null, null, global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxFilePathLength = 2147483647;
    public static readonly int MaxPropertiesCount = 256;

    public PublishedFileReport(global::Omnius.Core.RocketPack.Utf8String? filePath, global::Omnius.Core.Cryptography.OmniHash? rootHash, global::Omnius.Axus.Messages.AttachedProperty[] properties)
    {
        if (filePath is not null && filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
        if (properties is null) throw new global::System.ArgumentNullException("properties");
        if (properties.Length > 256) throw new global::System.ArgumentOutOfRangeException("properties");
        foreach (var n in properties)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.FilePath = filePath;
        this.RootHash = rootHash;
        this.Properties = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty>(properties);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (filePath is not null && !filePath.IsEmpty) ___h.Add(filePath.GetHashCode());
            if (rootHash is not null) ___h.Add(rootHash.Value.GetHashCode());
            foreach (var n in properties)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.RocketPack.Utf8String? FilePath { get; }
    public global::Omnius.Core.Cryptography.OmniHash? RootHash { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty> Properties { get; }

    public static global::Omnius.Axus.Messages.PublishedFileReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Messages.PublishedFileReport? left, global::Omnius.Axus.Messages.PublishedFileReport? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Messages.PublishedFileReport? left, global::Omnius.Axus.Messages.PublishedFileReport? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Messages.PublishedFileReport) return false;
        return this.Equals((global::Omnius.Axus.Messages.PublishedFileReport)other);
    }
    public bool Equals(global::Omnius.Axus.Messages.PublishedFileReport? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.FilePath != target.FilePath) return false;
        if ((this.RootHash is null) != (target.RootHash is null)) return false;
        if ((this.RootHash is not null) && (target.RootHash is not null) && this.RootHash != target.RootHash) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Properties, target.Properties)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.PublishedFileReport>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Messages.PublishedFileReport value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.FilePath != null)
            {
                w.Write((uint)1);
                w.Write(value.FilePath);
            }
            if (value.RootHash != null)
            {
                w.Write((uint)2);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash.Value, rank + 1);
            }
            if (value.Properties.Count != 0)
            {
                w.Write((uint)3);
                w.Write((uint)value.Properties.Count);
                foreach (var n in value.Properties)
                {
                    global::Omnius.Axus.Messages.AttachedProperty.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Messages.PublishedFileReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.RocketPack.Utf8String? p_filePath = null;
            global::Omnius.Core.Cryptography.OmniHash? p_rootHash = null;
            global::Omnius.Axus.Messages.AttachedProperty[] p_properties = global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_filePath = r.GetString(2147483647);
                            break;
                        }
                    case 2:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 3:
                        {
                            var length = r.GetUInt32();
                            p_properties = new global::Omnius.Axus.Messages.AttachedProperty[length];
                            for (int i = 0; i < p_properties.Length; i++)
                            {
                                p_properties[i] = global::Omnius.Axus.Messages.AttachedProperty.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Messages.PublishedFileReport(p_filePath, p_rootHash, p_properties);
        }
    }
}
public sealed partial class SubscribedFileReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedFileReport>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.SubscribedFileReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedFileReport>.Formatter;
    public static global::Omnius.Axus.Messages.SubscribedFileReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedFileReport>.Empty;

    static SubscribedFileReport()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedFileReport>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedFileReport>.Empty = new global::Omnius.Axus.Messages.SubscribedFileReport(global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Axus.Messages.SubscribedFileStatus.Empty, global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxPropertiesCount = 256;

    public SubscribedFileReport(global::Omnius.Core.Cryptography.OmniHash rootHash, global::Omnius.Axus.Messages.SubscribedFileStatus status, global::Omnius.Axus.Messages.AttachedProperty[] properties)
    {
        if (status is null) throw new global::System.ArgumentNullException("status");
        if (properties is null) throw new global::System.ArgumentNullException("properties");
        if (properties.Length > 256) throw new global::System.ArgumentOutOfRangeException("properties");
        foreach (var n in properties)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.RootHash = rootHash;
        this.Status = status;
        this.Properties = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty>(properties);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (rootHash != default) ___h.Add(rootHash.GetHashCode());
            if (status != default) ___h.Add(status.GetHashCode());
            foreach (var n in properties)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
    public global::Omnius.Axus.Messages.SubscribedFileStatus Status { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty> Properties { get; }

    public static global::Omnius.Axus.Messages.SubscribedFileReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Messages.SubscribedFileReport? left, global::Omnius.Axus.Messages.SubscribedFileReport? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Messages.SubscribedFileReport? left, global::Omnius.Axus.Messages.SubscribedFileReport? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Messages.SubscribedFileReport) return false;
        return this.Equals((global::Omnius.Axus.Messages.SubscribedFileReport)other);
    }
    public bool Equals(global::Omnius.Axus.Messages.SubscribedFileReport? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.RootHash != target.RootHash) return false;
        if (this.Status != target.Status) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Properties, target.Properties)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.SubscribedFileReport>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Messages.SubscribedFileReport value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
            }
            if (value.Status != global::Omnius.Axus.Messages.SubscribedFileStatus.Empty)
            {
                w.Write((uint)2);
                global::Omnius.Axus.Messages.SubscribedFileStatus.Formatter.Serialize(ref w, value.Status, rank + 1);
            }
            if (value.Properties.Count != 0)
            {
                w.Write((uint)3);
                w.Write((uint)value.Properties.Count);
                foreach (var n in value.Properties)
                {
                    global::Omnius.Axus.Messages.AttachedProperty.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Messages.SubscribedFileReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
            global::Omnius.Axus.Messages.SubscribedFileStatus p_status = global::Omnius.Axus.Messages.SubscribedFileStatus.Empty;
            global::Omnius.Axus.Messages.AttachedProperty[] p_properties = global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_status = global::Omnius.Axus.Messages.SubscribedFileStatus.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 3:
                        {
                            var length = r.GetUInt32();
                            p_properties = new global::Omnius.Axus.Messages.AttachedProperty[length];
                            for (int i = 0; i < p_properties.Length; i++)
                            {
                                p_properties[i] = global::Omnius.Axus.Messages.AttachedProperty.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Messages.SubscribedFileReport(p_rootHash, p_status, p_properties);
        }
    }
}
public sealed partial class SubscribedFileStatus : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedFileStatus>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.SubscribedFileStatus> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedFileStatus>.Formatter;
    public static global::Omnius.Axus.Messages.SubscribedFileStatus Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedFileStatus>.Empty;

    static SubscribedFileStatus()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedFileStatus>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedFileStatus>.Empty = new global::Omnius.Axus.Messages.SubscribedFileStatus(0, 0, 0, (global::Omnius.Axus.Messages.SubscribedFileState)0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public SubscribedFileStatus(int currentDepth, uint downloadedBlockCount, uint totalBlockCount, global::Omnius.Axus.Messages.SubscribedFileState state)
    {
        this.CurrentDepth = currentDepth;
        this.DownloadedBlockCount = downloadedBlockCount;
        this.TotalBlockCount = totalBlockCount;
        this.State = state;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (currentDepth != default) ___h.Add(currentDepth.GetHashCode());
            if (downloadedBlockCount != default) ___h.Add(downloadedBlockCount.GetHashCode());
            if (totalBlockCount != default) ___h.Add(totalBlockCount.GetHashCode());
            if (state != default) ___h.Add(state.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public int CurrentDepth { get; }
    public uint DownloadedBlockCount { get; }
    public uint TotalBlockCount { get; }
    public global::Omnius.Axus.Messages.SubscribedFileState State { get; }

    public static global::Omnius.Axus.Messages.SubscribedFileStatus Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Messages.SubscribedFileStatus? left, global::Omnius.Axus.Messages.SubscribedFileStatus? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Messages.SubscribedFileStatus? left, global::Omnius.Axus.Messages.SubscribedFileStatus? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Messages.SubscribedFileStatus) return false;
        return this.Equals((global::Omnius.Axus.Messages.SubscribedFileStatus)other);
    }
    public bool Equals(global::Omnius.Axus.Messages.SubscribedFileStatus? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.CurrentDepth != target.CurrentDepth) return false;
        if (this.DownloadedBlockCount != target.DownloadedBlockCount) return false;
        if (this.TotalBlockCount != target.TotalBlockCount) return false;
        if (this.State != target.State) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.SubscribedFileStatus>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Messages.SubscribedFileStatus value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.CurrentDepth != 0)
            {
                w.Write((uint)1);
                w.Write(value.CurrentDepth);
            }
            if (value.DownloadedBlockCount != 0)
            {
                w.Write((uint)2);
                w.Write(value.DownloadedBlockCount);
            }
            if (value.TotalBlockCount != 0)
            {
                w.Write((uint)3);
                w.Write(value.TotalBlockCount);
            }
            if (value.State != (global::Omnius.Axus.Messages.SubscribedFileState)0)
            {
                w.Write((uint)4);
                w.Write((ulong)value.State);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Messages.SubscribedFileStatus Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            int p_currentDepth = 0;
            uint p_downloadedBlockCount = 0;
            uint p_totalBlockCount = 0;
            global::Omnius.Axus.Messages.SubscribedFileState p_state = (global::Omnius.Axus.Messages.SubscribedFileState)0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_currentDepth = r.GetInt32();
                            break;
                        }
                    case 2:
                        {
                            p_downloadedBlockCount = r.GetUInt32();
                            break;
                        }
                    case 3:
                        {
                            p_totalBlockCount = r.GetUInt32();
                            break;
                        }
                    case 4:
                        {
                            p_state = (global::Omnius.Axus.Messages.SubscribedFileState)r.GetUInt64();
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Messages.SubscribedFileStatus(p_currentDepth, p_downloadedBlockCount, p_totalBlockCount, p_state);
        }
    }
}
public sealed partial class PublishedShoutReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.PublishedShoutReport>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.PublishedShoutReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.PublishedShoutReport>.Formatter;
    public static global::Omnius.Axus.Messages.PublishedShoutReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.PublishedShoutReport>.Empty;

    static PublishedShoutReport()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.PublishedShoutReport>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.PublishedShoutReport>.Empty = new global::Omnius.Axus.Messages.PublishedShoutReport(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.RocketPack.Timestamp64.Zero, global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxChannelLength = 2147483647;
    public static readonly int MaxPropertiesCount = 256;

    public PublishedShoutReport(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Utf8String channel, global::Omnius.Core.RocketPack.Timestamp64 createdTime, global::Omnius.Axus.Messages.AttachedProperty[] properties)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (channel is null) throw new global::System.ArgumentNullException("channel");
        if (channel.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("channel");
        if (properties is null) throw new global::System.ArgumentNullException("properties");
        if (properties.Length > 256) throw new global::System.ArgumentOutOfRangeException("properties");
        foreach (var n in properties)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.Signature = signature;
        this.Channel = channel;
        this.CreatedTime = createdTime;
        this.Properties = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty>(properties);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (!channel.IsEmpty) ___h.Add(channel.GetHashCode());
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            foreach (var n in properties)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Utf8String Channel { get; }
    public global::Omnius.Core.RocketPack.Timestamp64 CreatedTime { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty> Properties { get; }

    public static global::Omnius.Axus.Messages.PublishedShoutReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Messages.PublishedShoutReport? left, global::Omnius.Axus.Messages.PublishedShoutReport? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Messages.PublishedShoutReport? left, global::Omnius.Axus.Messages.PublishedShoutReport? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Messages.PublishedShoutReport) return false;
        return this.Equals((global::Omnius.Axus.Messages.PublishedShoutReport)other);
    }
    public bool Equals(global::Omnius.Axus.Messages.PublishedShoutReport? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Channel != target.Channel) return false;
        if (this.CreatedTime != target.CreatedTime) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Properties, target.Properties)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.PublishedShoutReport>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Messages.PublishedShoutReport value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Channel != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Channel);
            }
            if (value.CreatedTime != global::Omnius.Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)3);
                w.Write(value.CreatedTime);
            }
            if (value.Properties.Count != 0)
            {
                w.Write((uint)4);
                w.Write((uint)value.Properties.Count);
                foreach (var n in value.Properties)
                {
                    global::Omnius.Axus.Messages.AttachedProperty.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Messages.PublishedShoutReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_channel = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.RocketPack.Timestamp64 p_createdTime = global::Omnius.Core.RocketPack.Timestamp64.Zero;
            global::Omnius.Axus.Messages.AttachedProperty[] p_properties = global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_channel = r.GetString(2147483647);
                            break;
                        }
                    case 3:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                    case 4:
                        {
                            var length = r.GetUInt32();
                            p_properties = new global::Omnius.Axus.Messages.AttachedProperty[length];
                            for (int i = 0; i < p_properties.Length; i++)
                            {
                                p_properties[i] = global::Omnius.Axus.Messages.AttachedProperty.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Messages.PublishedShoutReport(p_signature, p_channel, p_createdTime, p_properties);
        }
    }
}
public sealed partial class SubscribedShoutReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedShoutReport>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.SubscribedShoutReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedShoutReport>.Formatter;
    public static global::Omnius.Axus.Messages.SubscribedShoutReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedShoutReport>.Empty;

    static SubscribedShoutReport()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedShoutReport>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Axus.Messages.SubscribedShoutReport>.Empty = new global::Omnius.Axus.Messages.SubscribedShoutReport(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Utf8String.Empty, global::Omnius.Core.RocketPack.Timestamp64.Zero, global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxChannelLength = 2147483647;
    public static readonly int MaxPropertiesCount = 256;

    public SubscribedShoutReport(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Utf8String channel, global::Omnius.Core.RocketPack.Timestamp64 createdTime, global::Omnius.Axus.Messages.AttachedProperty[] properties)
    {
        if (signature is null) throw new global::System.ArgumentNullException("signature");
        if (channel is null) throw new global::System.ArgumentNullException("channel");
        if (channel.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("channel");
        if (properties is null) throw new global::System.ArgumentNullException("properties");
        if (properties.Length > 256) throw new global::System.ArgumentOutOfRangeException("properties");
        foreach (var n in properties)
        {
            if (n is null) throw new global::System.ArgumentNullException("n");
        }

        this.Signature = signature;
        this.Channel = channel;
        this.CreatedTime = createdTime;
        this.Properties = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty>(properties);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (signature != default) ___h.Add(signature.GetHashCode());
            if (!channel.IsEmpty) ___h.Add(channel.GetHashCode());
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            foreach (var n in properties)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
    public global::Omnius.Core.RocketPack.Utf8String Channel { get; }
    public global::Omnius.Core.RocketPack.Timestamp64 CreatedTime { get; }
    public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Axus.Messages.AttachedProperty> Properties { get; }

    public static global::Omnius.Axus.Messages.SubscribedShoutReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Axus.Messages.SubscribedShoutReport? left, global::Omnius.Axus.Messages.SubscribedShoutReport? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Axus.Messages.SubscribedShoutReport? left, global::Omnius.Axus.Messages.SubscribedShoutReport? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Axus.Messages.SubscribedShoutReport) return false;
        return this.Equals((global::Omnius.Axus.Messages.SubscribedShoutReport)other);
    }
    public bool Equals(global::Omnius.Axus.Messages.SubscribedShoutReport? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Signature != target.Signature) return false;
        if (this.Channel != target.Channel) return false;
        if (this.CreatedTime != target.CreatedTime) return false;
        if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Properties, target.Properties)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Axus.Messages.SubscribedShoutReport>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Axus.Messages.SubscribedShoutReport value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
            {
                w.Write((uint)1);
                global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
            }
            if (value.Channel != global::Omnius.Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)2);
                w.Write(value.Channel);
            }
            if (value.CreatedTime != global::Omnius.Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)3);
                w.Write(value.CreatedTime);
            }
            if (value.Properties.Count != 0)
            {
                w.Write((uint)4);
                w.Write((uint)value.Properties.Count);
                foreach (var n in value.Properties)
                {
                    global::Omnius.Axus.Messages.AttachedProperty.Formatter.Serialize(ref w, n, rank + 1);
                }
            }
            w.Write((uint)0);
        }
        public global::Omnius.Axus.Messages.SubscribedShoutReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
            global::Omnius.Core.RocketPack.Utf8String p_channel = global::Omnius.Core.RocketPack.Utf8String.Empty;
            global::Omnius.Core.RocketPack.Timestamp64 p_createdTime = global::Omnius.Core.RocketPack.Timestamp64.Zero;
            global::Omnius.Axus.Messages.AttachedProperty[] p_properties = global::System.Array.Empty<global::Omnius.Axus.Messages.AttachedProperty>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_channel = r.GetString(2147483647);
                            break;
                        }
                    case 3:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                    case 4:
                        {
                            var length = r.GetUInt32();
                            p_properties = new global::Omnius.Axus.Messages.AttachedProperty[length];
                            for (int i = 0; i < p_properties.Length; i++)
                            {
                                p_properties[i] = global::Omnius.Axus.Messages.AttachedProperty.Formatter.Deserialize(ref r, rank + 1);
                            }
                            break;
                        }
                }
            }

            return new global::Omnius.Axus.Messages.SubscribedShoutReport(p_signature, p_channel, p_createdTime, p_properties);
        }
    }
}
