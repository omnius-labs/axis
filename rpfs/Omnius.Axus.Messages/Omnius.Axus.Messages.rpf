syntax v1.0;

using "Omnius.Core.Cryptography";
using "Omnius.Core.Net";

namespace "Omnius.Axus.Messages";

// Common

message NodeLocation {
    Addresses: vector<OmniAddress>(capacity: 32),
}

message Seed {
    RootHash: OmniHash,
    Name: string(capacity: 256),
    Size: uint64,
}

message Profile {
    TrustedSignatures: vector<OmniSignature>(capacity: 1024),
    BlockedSignatures: vector<OmniSignature>(capacity: 1024),
}

message Note {
    Value: string(capacity: 1024),
    Tag: string(capacity: 256),
    AnchorHash: OmniHash,
    CreatedTime: timestamp64,
}

message MatcherText {
    Pattern: string,
}

enum DirectionType : uint8 {
    Asc = 0,
    Desc = 1,
}

// Config

message ServiceConfig {
    Bandwidth: BandwidthConfig?,
    I2pConnector: I2pConnectorConfig?,
    I2pAccepter: I2pAccepterConfig?,
    TcpConnector: TcpConnectorConfig?,
    TcpAccepter: TcpAccepterConfig?,
    FileDownloader: FileDownloaderConfig?,
    Profile: ProfileConfig?,
    Note: NoteConfig?,
}

message BandwidthConfig {
    MaxSendBytesPerSeconds: int32,
    MaxReceiveBytesPerSeconds: int32,
}

message I2pConnectorConfig {
    IsEnabled: bool,
    SamBridgeAddress: OmniAddress,
}

message I2pAccepterConfig {
    IsEnabled: bool,
    SamBridgeAddress: OmniAddress,
}

message TcpConnectorConfig {
    IsEnabled: bool,
    Proxy: TcpProxyConfig?,
}

message TcpProxyConfig {
    Type: TcpProxyType,
    Address: OmniAddress,
}

enum TcpProxyType : uint8 {
    None = 0,
    HttpProxy = 1,
    Socks5Proxy = 2,
}

message TcpAccepterConfig {
    IsEnabled: bool,
    UseUpnp: bool,
    ListenAddress: OmniAddress,
}

message FileDownloaderConfig {
    DestinationDirectory: string,
}

message ProfileConfig {
    DigitalSignature: OmniDigitalSignature,
    TrustedSignatures: vector<OmniSignature>(capacity: 1024),
    BlockedSignatures: vector<OmniSignature>(capacity: 1024),
}

message NoteConfig {
    Tags: vector<string(capacity: 256)>(capacity: 256),
}

// Session

message SessionReport {
    Scheme: string(capacity: 256),
    HandshakeType: SessionHandshakeType,
    Address: OmniAddress,
}

enum SessionHandshakeType : uint8 {
    Unknown = 0,
    Connected = 1,
    Accepted = 2,
}

// PublishedFile

message GetPublishedFilesMatcher {
    Name: MatcherText?,
}

message GetPublishedFilesDirection {
    FieldType: GetPublishedFilesFieldType,
    DirectionType: DirectionType,
}

enum GetPublishedFilesFieldType : uint8 {
    Unknown = 0,
    Name = 1,
    Size = 2,
    CreatedTime = 3,
    UpdatedTime = 4,
    ProcessedRate = 5,
}

message PublishedFileReport {
    FilePath: string,
    Seed: Seed?,
    Status: PublishedFileStatus,
}

message PublishedFileStatus {
    CurrentDepth: int32,
    ProcessedBlockCount: uint32,
    TotalBlockCount: uint32,
    State: PublishedFileState,
    FailedReason: string?,
}

enum PublishedFileState : uint8 {
    Unknown = 0,
    Waiting = 1,
    Encoding = 2,
    Completed = 3,
    Failed = 4,
}

// SubscribedFile

message GetSubscribedFilesMatcher {
    Name: MatcherText?,
}

message GetSubscribedFilesDirection {
    FieldType: GetSubscribedFilesFieldType,
    DirectionType: DirectionType,
}

enum GetSubscribedFilesFieldType : uint8 {
    Unknown = 0,
    Name = 1,
    Size = 2,
    CreatedTime = 3,
    UpdatedTime = 4,
    ProcessedRate = 5,
}

message SubscribedFileReport {
    FilePath: string?,
    Seed: Seed,
    Status: SubscribedFileStatus,
}

message SubscribedFileStatus {
    CurrentDepth: int32,
    ProcessedBlockCount: uint32,
    TotalBlockCount: uint32,
    State: SubscribedFileState,
}

enum SubscribedFileState : uint8 {
    Unknown = 0,
    Downloading = 1,
    Decoding = 2,
    Completed = 3,
    Failed = 4,
}
