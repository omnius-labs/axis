syntax v1.0;

using "Omnius.Axus.Models";

namespace "Omnius.Axus.Remoting";

service AxusService {
    GetConfig: () -> (GetConfigResult),
    SetConfig: (SetConfigRequest) -> (),

    GetSessionsReport: () -> (GetSessionsReportResult),

    GetMyNodeLocation: () -> (GetMyNodeLocationResult),

    GetCloudNodeLocations: () -> (GetCloudNodeLocationsResult),
    AddCloudNodeLocations: (AddCloudNodeLocationsRequest) -> (),

    GetPublishedFilesReport: () -> (GetPublishedFilesReportResult),
    PublishFileFromStorage: (PublishFileFromStorageRequest) -> (PublishFileFromStorageResult),
    PublishFileFromMemory: (PublishFileFromMemoryRequest) -> (PublishFileFromMemoryResult),
    UnpublishFileFromStorage: (UnpublishFileFromStorageRequest) -> (),
    UnpublishFileFromMemory: (UnpublishFileFromMemoryRequest) -> (),

    GetSubscribedFilesReport: () -> (GetSubscribedFilesReportResult),
    SubscribeFile: (SubscribeFileRequest) -> (),
    UnsubscribeFile: (UnsubscribeFileRequest) -> (),
    TryExportFileToStorage: (TryExportFileToStorageRequest) -> (TryExportFileToStorageResult),
    TryExportFileToMemory: (TryExportFileToMemoryRequest) -> (TryExportFileToMemoryResult),

    GetPublishedShoutsReport: () -> (GetPublishedShoutsReportResult),
    PublishShout: (PublishShoutRequest) -> (),
    UnpublishShout: (UnpublishShoutRequest) -> (),

    GetSubscribedShoutsReport: () -> (GetSubscribedShoutsReportResult),
    SubscribeShout: (SubscribeShoutRequest) -> (),
    UnsubscribeShout: (UnsubscribeShoutRequest) -> (),
    TryExportShout: (TryExportShoutRequest) -> (TryExportShoutResult),
}

message GetConfigResult {
    Config: ServiceConfig,
}

message SetConfigRequest {
    Config: ServiceConfig,
}

message GetSessionsReportResult {
    Sessions: vector<SessionReport>(capacity: 8192),
}

message GetMyNodeLocationResult {
    NodeLocation: NodeLocation,
}

message GetCloudNodeLocationsResult {
    NodeLocations: vector<NodeLocation>(capacity: 8192),
}

message AddCloudNodeLocationsRequest {
    NodeLocations: vector<NodeLocation>(capacity: 8192),
}

message GetPublishedFilesReportResult {
    PublishedFiles: vector<PublishedFileReport>,
}

message PublishFileFromStorageRequest {
    FilePath: string,
    MaxBlockSize: int32,
    Author: string,
}
message PublishFileFromStorageResult {
    Hash: OmniHash,
}

message PublishFileFromMemoryRequest {
    Memory: bytes(capacity: 32 * 1024 * 1024),
    MaxBlockSize: int32,
    Author: string,
}
message PublishFileFromMemoryResult {
    Hash: OmniHash,
}

message UnpublishFileFromStorageRequest {
    FilePath: string,
    Author: string,
}

message UnpublishFileFromMemoryRequest {
    RootHash: OmniHash,
    Author: string,
}

message GetSubscribedFilesReportResult {
    SubscribedFiles: vector<SubscribedFileReport>,
}

message SubscribeFileRequest {
    RootHash: OmniHash,
    Author: string,
}

message UnsubscribeFileRequest {
    RootHash: OmniHash,
    Author: string,
}

message TryExportFileToStorageRequest {
    RootHash: OmniHash,
    FilePath: string,
}

message TryExportFileToStorageResult {
    Success: bool,
}

message TryExportFileToMemoryRequest {
    RootHash: OmniHash,
}

message TryExportFileToMemoryResult {
    Memory: bytes?(capacity: 32 * 1024 * 1024, recyclable: true),
}

message GetPublishedShoutsReportResult {
    PublishedShouts: vector<PublishedShoutReport>,
}

message PublishShoutRequest {
    Shout: Shout,
    Author: string,
}

message UnpublishShoutRequest {
    Signature: OmniSignature,
    Channel: string,
    Author: string,
}

message GetSubscribedShoutsReportResult {
    SubscribedShouts: vector<SubscribedShoutReport>,
}

message SubscribeShoutRequest {
    Signature: OmniSignature,
    Channel: string,
    Author: string,
}

message UnsubscribeShoutRequest {
    Signature: OmniSignature,
    Channel: string,
    Author: string,
}

message TryExportShoutRequest {
    Signature: OmniSignature,
    Channel: string,
    UpdatedTime: timestamp64,
}

message TryExportShoutResult {
    Shout: Shout?,
}

// Config

message ServiceConfig {
    Bandwidth: BandwidthConfig?,
    I2pConnector: I2pConnectorConfig?,
    I2pAccepter: I2pAccepterConfig?,
    TcpConnector: TcpConnectorConfig?,
    TcpAccepter: TcpAccepterConfig?,
}

message BandwidthConfig {
    MaxSendBytesPerSeconds: int32,
    MaxReceiveBytesPerSeconds: int32,
}

message I2pConnectorConfig {
    IsEnabled: bool,
    SamBridgeAddress: OmniAddress,
}

message I2pAccepterConfig {
    IsEnabled: bool,
    SamBridgeAddress: OmniAddress,
}

message TcpConnectorConfig {
    IsEnabled: bool,
    Proxy: TcpProxyConfig?,
}

message TcpProxyConfig {
    Type: TcpProxyType,
    Address: OmniAddress,
}

enum TcpProxyType : uint8 {
    None = 0,
    HttpProxy = 1,
    Socks5Proxy = 2,
}

message TcpAccepterConfig {
    IsEnabled: bool,
    UseUpnp: bool,
    ListenAddress: OmniAddress,
}
