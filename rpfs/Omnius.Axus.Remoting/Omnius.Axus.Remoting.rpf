syntax v1.0;

using "Omnius.Axus.Messages";

namespace "Omnius.Axus.Remoting";

service AxusService {
    // Config
    GetConfig: () -> (GetConfigResult),
    SetConfig: (SetConfigParam) -> (),

    // Session
    GetSessions: () -> (GetSessionsResult),

    // MyNodeLocation
    GetMyNodeLocation: () -> (GetMyNodeLocationResult),

    // CloudNodeLocation
    GetCloudNodeLocations: () -> (GetCloudNodeLocationsResult),
    AddCloudNodeLocations: (AddCloudNodeLocationsParam) -> (),

    // PublishFile
    GetPublishedFiles: (GetPublishedFilesParam) -> (GetPublishedFilesResult),
    PublishFiles: (PublishFilesParam) -> (),
    UnpublishFiles: (UnpublishFilesParam) -> (),

    // SubscribeFile
    GetSubscribedFiles: (GetSubscribedFilesParam) -> (GetSubscribedFilesResult),
    SubscribeFiles: (SubscribeFilesParam) -> (),
    UnsubscribeFiles: (UnsubscribeFilesParam) -> (),
}

// Config

message GetConfigResult {
    Config: ServiceConfig,
}

message SetConfigParam {
    Config: ServiceConfig,
}

// Session

message GetSessionsResult {
    Sessions: vector<SessionReport>,
}

// MyNodeLocation

message GetMyNodeLocationResult {
    NodeLocation: NodeLocation,
}

// CloudNodeLocation

message GetCloudNodeLocationsResult {
    NodeLocations: vector<NodeLocation>,
}

message AddCloudNodeLocationsParam {
    NodeLocations: vector<NodeLocation>,
}

// PublishedFile

message GetPublishedFilesParam {
    Matcher: GetPublishedFilesMatcher?,
    Direction: GetPublishedFilesDirection?,
    Offset: int64?,
    Limit: int64?,
}

message GetPublishedFilesResult {
    PublishedFiles: vector<PublishedFileReport>,
}

message PublishFilesParam {
    FilePath: vector<string>,
    MaxBlockSize: int32,
}

message UnpublishFilesParam {
    FilePath: vector<string>,
}

// SubscribedFile

message GetSubscribedFilesParam {
    Matcher: GetSubscribedFilesMatcher?,
    Direction: GetSubscribedFilesDirection?,
    Offset: int64?,
    Limit: int64?,
}

message GetSubscribedFilesResult {
    SubscribedFiles: vector<SubscribedFileReport>,
}

message SubscribeFilesParam {
    RootHashes: vector<OmniHash>,
}

message UnsubscribeFileParam {
    RootHashes: vector<OmniHash>,
}
